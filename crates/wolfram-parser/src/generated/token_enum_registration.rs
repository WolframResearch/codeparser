//
// AUTO GENERATED FILE
// DO NOT MODIFY
//

use crate::symbol::Symbol;

use wolfram_expr::symbol::SymbolRef;

//
// All token enums
//

#[allow(non_camel_case_types)]
#[rustfmt::skip]
#[derive(Debug, Copy, Clone, PartialEq)]
#[repr(u16)]
pub enum TokenKind {
    Unknown = 0, // { group2Bits:0, group1Bits:0, enum:0, 0b0_0000_0000 }
    EndOfFile = 2049, // { group2Bits:2048, group1Bits:0, enum:1, 0b0_0000_0001 }
    Symbol = 514, // { group2Bits:0, group1Bits:512, enum:2, 0b0_0000_0010 }
    String = 515, // { group2Bits:0, group1Bits:512, enum:3, 0b0_0000_0011 }
    Integer = 516, // { group2Bits:0, group1Bits:512, enum:4, 0b0_0000_0100 }
    Real = 517, // { group2Bits:0, group1Bits:512, enum:5, 0b0_0000_0101 }
    Rational = 518, // { group2Bits:0, group1Bits:512, enum:6, 0b0_0000_0110 }
    LinearSyntaxBlob = 519, // { group2Bits:0, group1Bits:512, enum:7, 0b0_0000_0111 }
    InternalNewline = 8, // { group2Bits:0, group1Bits:0, enum:8, 0b0_0000_1000 }
    Comment = 9, // { group2Bits:0, group1Bits:0, enum:9, 0b0_0000_1001 }
    Whitespace = 10, // { group2Bits:0, group1Bits:0, enum:10, 0b0_0000_1010 }
    Buffer1 = 11, // { group2Bits:0, group1Bits:0, enum:11, 0b0_0000_1011 }
    ToplevelNewline = 12, // { group2Bits:0, group1Bits:0, enum:12, 0b0_0000_1100 }
    Buffer2 = 13, // { group2Bits:0, group1Bits:0, enum:13, 0b0_0000_1101 }
    Buffer3 = 14, // { group2Bits:0, group1Bits:0, enum:14, 0b0_0000_1110 }
    Buffer4 = 15, // { group2Bits:0, group1Bits:0, enum:15, 0b0_0000_1111 }
    Error_ExpectedEqual = 1552, // { group2Bits:0, group1Bits:1536, enum:16, 0b0_0001_0000 }
    Error_Number = 1553, // { group2Bits:0, group1Bits:1536, enum:17, 0b0_0001_0001 }
    Error_UnhandledCharacter = 1554, // { group2Bits:0, group1Bits:1536, enum:18, 0b0_0001_0010 }
    Error_ExpectedLetterlike = 1555, // { group2Bits:0, group1Bits:1536, enum:19, 0b0_0001_0011 }
    Error_Aborted = 3604, // { group2Bits:2048, group1Bits:1536, enum:20, 0b0_0001_0100 }
    Error_ExpectedOperand = 3605, // { group2Bits:2048, group1Bits:1536, enum:21, 0b0_0001_0101 }
    Error_ExpectedTag = 3606, // { group2Bits:2048, group1Bits:1536, enum:22, 0b0_0001_0110 }
    Error_ExpectedFile = 3607, // { group2Bits:2048, group1Bits:1536, enum:23, 0b0_0001_0111 }
    Error_UnexpectedCloser = 1560, // { group2Bits:0, group1Bits:1536, enum:24, 0b0_0001_1000 }
    Error_PrefixImplicitNull = 3609, // { group2Bits:2048, group1Bits:1536, enum:25, 0b0_0001_1001 }
    Error_InfixImplicitNull = 3610, // { group2Bits:2048, group1Bits:1536, enum:26, 0b0_0001_1010 }
    Error_UnsafeCharacterEncoding = 1563, // { group2Bits:0, group1Bits:1536, enum:27, 0b0_0001_1011 }
    Error_UnterminatedComment = 1564, // { group2Bits:0, group1Bits:1536, enum:28, 0b0_0001_1100 }
    Error_Unterminated_First = 28, // { group2Bits:0, group1Bits:0, enum:28, 0b0_0001_1100 }
    Error_UnterminatedString = 1565, // { group2Bits:0, group1Bits:1536, enum:29, 0b0_0001_1101 }
    Error_UnterminatedFileString = 1566, // { group2Bits:0, group1Bits:1536, enum:30, 0b0_0001_1110 }
    Error_UnterminatedLinearSyntaxBlob = 1567, // { group2Bits:0, group1Bits:1536, enum:31, 0b0_0001_1111 }
    Error_UnsupportedToken = 1568, // { group2Bits:0, group1Bits:1536, enum:32, 0b0_0010_0000 }
    Error_Unterminated_End = 32, // { group2Bits:0, group1Bits:0, enum:32, 0b0_0010_0000 }
    Error_UnexpectedCommentCloser = 1569, // { group2Bits:0, group1Bits:1536, enum:33, 0b0_0010_0001 }
    Error_End = 1570, // { group2Bits:0, group1Bits:1536, enum:34, 0b0_0010_0010 }
    Dot = 35, // { group2Bits:0, group1Bits:0, enum:35, 0b0_0010_0011 }
    Colon = 36, // { group2Bits:0, group1Bits:0, enum:36, 0b0_0010_0100 }
    OpenParen = 549, // { group2Bits:0, group1Bits:512, enum:37, 0b0_0010_0101 }
    CloseParen = 1062, // { group2Bits:0, group1Bits:1024, enum:38, 0b0_0010_0110 }
    OpenSquare = 39, // { group2Bits:0, group1Bits:0, enum:39, 0b0_0010_0111 }
    CloseSquare = 1064, // { group2Bits:0, group1Bits:1024, enum:40, 0b0_0010_1000 }
    Comma = 41, // { group2Bits:0, group1Bits:0, enum:41, 0b0_0010_1001 }
    OpenCurly = 554, // { group2Bits:0, group1Bits:512, enum:42, 0b0_0010_1010 }
    CloseCurly = 1067, // { group2Bits:0, group1Bits:1024, enum:43, 0b0_0010_1011 }
    Equal = 44, // { group2Bits:0, group1Bits:0, enum:44, 0b0_0010_1100 }
    Bang = 557, // { group2Bits:0, group1Bits:512, enum:45, 0b0_0010_1101 }
    Under = 558, // { group2Bits:0, group1Bits:512, enum:46, 0b0_0010_1110 }
    Less = 47, // { group2Bits:0, group1Bits:0, enum:47, 0b0_0010_1111 }
    Greater = 48, // { group2Bits:0, group1Bits:0, enum:48, 0b0_0011_0000 }
    Minus = 561, // { group2Bits:0, group1Bits:512, enum:49, 0b0_0011_0001 }
    Bar = 50, // { group2Bits:0, group1Bits:0, enum:50, 0b0_0011_0010 }
    Semi = 51, // { group2Bits:0, group1Bits:0, enum:51, 0b0_0011_0011 }
    Hash = 564, // { group2Bits:0, group1Bits:512, enum:52, 0b0_0011_0100 }
    Amp = 53, // { group2Bits:0, group1Bits:0, enum:53, 0b0_0011_0101 }
    Slash = 54, // { group2Bits:0, group1Bits:0, enum:54, 0b0_0011_0110 }
    At = 55, // { group2Bits:0, group1Bits:0, enum:55, 0b0_0011_0111 }
    Plus = 568, // { group2Bits:0, group1Bits:512, enum:56, 0b0_0011_1000 }
    Tilde = 57, // { group2Bits:0, group1Bits:0, enum:57, 0b0_0011_1001 }
    Star = 58, // { group2Bits:0, group1Bits:0, enum:58, 0b0_0011_1010 }
    Caret = 59, // { group2Bits:0, group1Bits:0, enum:59, 0b0_0011_1011 }
    SingleQuote = 60, // { group2Bits:0, group1Bits:0, enum:60, 0b0_0011_1100 }
    Percent = 573, // { group2Bits:0, group1Bits:512, enum:61, 0b0_0011_1101 }
    Question = 62, // { group2Bits:0, group1Bits:0, enum:62, 0b0_0011_1110 }
    DotDot = 63, // { group2Bits:0, group1Bits:0, enum:63, 0b0_0011_1111 }
    ColonColon = 64, // { group2Bits:0, group1Bits:0, enum:64, 0b0_0100_0000 }
    ColonEqual = 65, // { group2Bits:0, group1Bits:0, enum:65, 0b0_0100_0001 }
    ColonGreater = 66, // { group2Bits:0, group1Bits:0, enum:66, 0b0_0100_0010 }
    EqualEqual = 67, // { group2Bits:0, group1Bits:0, enum:67, 0b0_0100_0011 }
    UnderUnder = 580, // { group2Bits:0, group1Bits:512, enum:68, 0b0_0100_0100 }
    UnderDot = 581, // { group2Bits:0, group1Bits:512, enum:69, 0b0_0100_0101 }
    LessBar = 582, // { group2Bits:0, group1Bits:512, enum:70, 0b0_0100_0110 }
    LessLess = 583, // { group2Bits:0, group1Bits:512, enum:71, 0b0_0100_0111 }
    LessGreater = 72, // { group2Bits:0, group1Bits:0, enum:72, 0b0_0100_1000 }
    LessEqual = 73, // { group2Bits:0, group1Bits:0, enum:73, 0b0_0100_1001 }
    GreaterGreater = 74, // { group2Bits:0, group1Bits:0, enum:74, 0b0_0100_1010 }
    GreaterEqual = 75, // { group2Bits:0, group1Bits:0, enum:75, 0b0_0100_1011 }
    MinusGreater = 76, // { group2Bits:0, group1Bits:0, enum:76, 0b0_0100_1100 }
    MinusMinus = 589, // { group2Bits:0, group1Bits:512, enum:77, 0b0_0100_1101 }
    MinusEqual = 78, // { group2Bits:0, group1Bits:0, enum:78, 0b0_0100_1110 }
    BarBar = 79, // { group2Bits:0, group1Bits:0, enum:79, 0b0_0100_1111 }
    BarGreater = 1104, // { group2Bits:0, group1Bits:1024, enum:80, 0b0_0101_0000 }
    SemiSemi = 593, // { group2Bits:0, group1Bits:512, enum:81, 0b0_0101_0001 }
    AmpAmp = 82, // { group2Bits:0, group1Bits:0, enum:82, 0b0_0101_0010 }
    SlashAt = 83, // { group2Bits:0, group1Bits:0, enum:83, 0b0_0101_0011 }
    SlashSemi = 84, // { group2Bits:0, group1Bits:0, enum:84, 0b0_0101_0100 }
    SlashDot = 85, // { group2Bits:0, group1Bits:0, enum:85, 0b0_0101_0101 }
    SlashSlash = 86, // { group2Bits:0, group1Bits:0, enum:86, 0b0_0101_0110 }
    SlashColon = 87, // { group2Bits:0, group1Bits:0, enum:87, 0b0_0101_0111 }
    SlashEqual = 88, // { group2Bits:0, group1Bits:0, enum:88, 0b0_0101_1000 }
    SlashStar = 89, // { group2Bits:0, group1Bits:0, enum:89, 0b0_0101_1001 }
    AtAt = 90, // { group2Bits:0, group1Bits:0, enum:90, 0b0_0101_1010 }
    AtStar = 91, // { group2Bits:0, group1Bits:0, enum:91, 0b0_0101_1011 }
    PlusPlus = 604, // { group2Bits:0, group1Bits:512, enum:92, 0b0_0101_1100 }
    PlusEqual = 93, // { group2Bits:0, group1Bits:0, enum:93, 0b0_0101_1101 }
    TildeTilde = 94, // { group2Bits:0, group1Bits:0, enum:94, 0b0_0101_1110 }
    StarEqual = 95, // { group2Bits:0, group1Bits:0, enum:95, 0b0_0101_1111 }
    StarStar = 96, // { group2Bits:0, group1Bits:0, enum:96, 0b0_0110_0000 }
    CaretEqual = 97, // { group2Bits:0, group1Bits:0, enum:97, 0b0_0110_0001 }
    HashHash = 610, // { group2Bits:0, group1Bits:512, enum:98, 0b0_0110_0010 }
    BangEqual = 99, // { group2Bits:0, group1Bits:0, enum:99, 0b0_0110_0011 }
    BangBang = 612, // { group2Bits:0, group1Bits:512, enum:100, 0b0_0110_0100 }
    QuestionQuestion = 101, // { group2Bits:0, group1Bits:0, enum:101, 0b0_0110_0101 }
    DotDotDot = 102, // { group2Bits:0, group1Bits:0, enum:102, 0b0_0110_0110 }
    EqualEqualEqual = 103, // { group2Bits:0, group1Bits:0, enum:103, 0b0_0110_0111 }
    EqualBangEqual = 104, // { group2Bits:0, group1Bits:0, enum:104, 0b0_0110_1000 }
    UnderUnderUnder = 617, // { group2Bits:0, group1Bits:512, enum:105, 0b0_0110_1001 }
    SlashSlashDot = 106, // { group2Bits:0, group1Bits:0, enum:106, 0b0_0110_1010 }
    AtAtAt = 107, // { group2Bits:0, group1Bits:0, enum:107, 0b0_0110_1011 }
    LessMinusGreater = 108, // { group2Bits:0, group1Bits:0, enum:108, 0b0_0110_1100 }
    SlashSlashAt = 109, // { group2Bits:0, group1Bits:0, enum:109, 0b0_0110_1101 }
    CaretColonEqual = 110, // { group2Bits:0, group1Bits:0, enum:110, 0b0_0110_1110 }
    GreaterGreaterGreater = 111, // { group2Bits:0, group1Bits:0, enum:111, 0b0_0110_1111 }
    BarMinusGreater = 112, // { group2Bits:0, group1Bits:0, enum:112, 0b0_0111_0000 }
    SlashSlashEqual = 113, // { group2Bits:0, group1Bits:0, enum:113, 0b0_0111_0001 }
    ColonColonOpenSquare = 114, // { group2Bits:0, group1Bits:0, enum:114, 0b0_0111_0010 }
    PercentPercent = 627, // { group2Bits:0, group1Bits:512, enum:115, 0b0_0111_0011 }
    LinearSyntax_Bang = 628, // { group2Bits:0, group1Bits:512, enum:116, 0b0_0111_0100 }
    LinearSyntax_CloseParen = 117, // { group2Bits:0, group1Bits:0, enum:117, 0b0_0111_0101 }
    LinearSyntax_At = 118, // { group2Bits:0, group1Bits:0, enum:118, 0b0_0111_0110 }
    LinearSyntax_Amp = 119, // { group2Bits:0, group1Bits:0, enum:119, 0b0_0111_0111 }
    LinearSyntax_Star = 120, // { group2Bits:0, group1Bits:0, enum:120, 0b0_0111_1000 }
    LinearSyntax_Under = 121, // { group2Bits:0, group1Bits:0, enum:121, 0b0_0111_1001 }
    LinearSyntax_Caret = 122, // { group2Bits:0, group1Bits:0, enum:122, 0b0_0111_1010 }
    LinearSyntax_Space = 123, // { group2Bits:0, group1Bits:0, enum:123, 0b0_0111_1011 }
    LinearSyntax_Percent = 124, // { group2Bits:0, group1Bits:0, enum:124, 0b0_0111_1100 }
    LinearSyntax_Plus = 125, // { group2Bits:0, group1Bits:0, enum:125, 0b0_0111_1101 }
    LinearSyntax_Slash = 126, // { group2Bits:0, group1Bits:0, enum:126, 0b0_0111_1110 }
    LinearSyntax_BackTick = 127, // { group2Bits:0, group1Bits:0, enum:127, 0b0_0111_1111 }
    Fake_ImplicitTimes = 2176, // { group2Bits:2048, group1Bits:0, enum:128, 0b0_1000_0000 }
    Fake_ImplicitNull = 2177, // { group2Bits:2048, group1Bits:0, enum:129, 0b0_1000_0001 }
    Fake_ImplicitOne = 2178, // { group2Bits:2048, group1Bits:0, enum:130, 0b0_1000_0010 }
    Fake_ImplicitAll = 2179, // { group2Bits:2048, group1Bits:0, enum:131, 0b0_1000_0011 }
    Boxes_OpenParenStar = 132, // { group2Bits:0, group1Bits:0, enum:132, 0b0_1000_0100 }
    Boxes_StarCloseParen = 133, // { group2Bits:0, group1Bits:0, enum:133, 0b0_1000_0101 }
    Boxes_MultiSingleQuote = 134, // { group2Bits:0, group1Bits:0, enum:134, 0b0_1000_0110 }
    Boxes_MultiWhitespace = 135, // { group2Bits:0, group1Bits:0, enum:135, 0b0_1000_0111 }
    LongName_Not = 648, // { group2Bits:0, group1Bits:512, enum:136, 0b0_1000_1000 }
    LongName_PlusMinus = 649, // { group2Bits:0, group1Bits:512, enum:137, 0b0_1000_1001 }
    LongName_CenterDot = 138, // { group2Bits:0, group1Bits:0, enum:138, 0b0_1000_1010 }
    LongName_Times = 139, // { group2Bits:0, group1Bits:0, enum:139, 0b0_1000_1011 }
    LongName_Divide = 140, // { group2Bits:0, group1Bits:0, enum:140, 0b0_1000_1100 }
    LongName_OpenCurlyQuote = 653, // { group2Bits:0, group1Bits:512, enum:141, 0b0_1000_1101 }
    LongName_CloseCurlyQuote = 1166, // { group2Bits:0, group1Bits:1024, enum:142, 0b0_1000_1110 }
    LongName_OpenCurlyDoubleQuote = 655, // { group2Bits:0, group1Bits:512, enum:143, 0b0_1000_1111 }
    LongName_CloseCurlyDoubleQuote = 1168, // { group2Bits:0, group1Bits:1024, enum:144, 0b0_1001_0000 }
    LongName_InvisibleTimes = 145, // { group2Bits:0, group1Bits:0, enum:145, 0b0_1001_0001 }
    LongName_LeftArrow = 146, // { group2Bits:0, group1Bits:0, enum:146, 0b0_1001_0010 }
    LongName_UpArrow = 147, // { group2Bits:0, group1Bits:0, enum:147, 0b0_1001_0011 }
    LongName_RightArrow = 148, // { group2Bits:0, group1Bits:0, enum:148, 0b0_1001_0100 }
    LongName_DownArrow = 149, // { group2Bits:0, group1Bits:0, enum:149, 0b0_1001_0101 }
    LongName_LeftRightArrow = 150, // { group2Bits:0, group1Bits:0, enum:150, 0b0_1001_0110 }
    LongName_UpDownArrow = 151, // { group2Bits:0, group1Bits:0, enum:151, 0b0_1001_0111 }
    LongName_UpperLeftArrow = 152, // { group2Bits:0, group1Bits:0, enum:152, 0b0_1001_1000 }
    LongName_UpperRightArrow = 153, // { group2Bits:0, group1Bits:0, enum:153, 0b0_1001_1001 }
    LongName_LowerRightArrow = 154, // { group2Bits:0, group1Bits:0, enum:154, 0b0_1001_1010 }
    LongName_LowerLeftArrow = 155, // { group2Bits:0, group1Bits:0, enum:155, 0b0_1001_1011 }
    LongName_LeftTeeArrow = 156, // { group2Bits:0, group1Bits:0, enum:156, 0b0_1001_1100 }
    LongName_UpTeeArrow = 157, // { group2Bits:0, group1Bits:0, enum:157, 0b0_1001_1101 }
    LongName_RightTeeArrow = 158, // { group2Bits:0, group1Bits:0, enum:158, 0b0_1001_1110 }
    LongName_DownTeeArrow = 159, // { group2Bits:0, group1Bits:0, enum:159, 0b0_1001_1111 }
    LongName_LeftVector = 160, // { group2Bits:0, group1Bits:0, enum:160, 0b0_1010_0000 }
    LongName_DownLeftVector = 161, // { group2Bits:0, group1Bits:0, enum:161, 0b0_1010_0001 }
    LongName_RightUpVector = 162, // { group2Bits:0, group1Bits:0, enum:162, 0b0_1010_0010 }
    LongName_LeftUpVector = 163, // { group2Bits:0, group1Bits:0, enum:163, 0b0_1010_0011 }
    LongName_RightVector = 164, // { group2Bits:0, group1Bits:0, enum:164, 0b0_1010_0100 }
    LongName_DownRightVector = 165, // { group2Bits:0, group1Bits:0, enum:165, 0b0_1010_0101 }
    LongName_RightDownVector = 166, // { group2Bits:0, group1Bits:0, enum:166, 0b0_1010_0110 }
    LongName_LeftDownVector = 167, // { group2Bits:0, group1Bits:0, enum:167, 0b0_1010_0111 }
    LongName_RightArrowLeftArrow = 168, // { group2Bits:0, group1Bits:0, enum:168, 0b0_1010_1000 }
    LongName_UpArrowDownArrow = 169, // { group2Bits:0, group1Bits:0, enum:169, 0b0_1010_1001 }
    LongName_LeftArrowRightArrow = 170, // { group2Bits:0, group1Bits:0, enum:170, 0b0_1010_1010 }
    LongName_ReverseEquilibrium = 171, // { group2Bits:0, group1Bits:0, enum:171, 0b0_1010_1011 }
    LongName_Equilibrium = 172, // { group2Bits:0, group1Bits:0, enum:172, 0b0_1010_1100 }
    LongName_DoubleLeftArrow = 173, // { group2Bits:0, group1Bits:0, enum:173, 0b0_1010_1101 }
    LongName_DoubleUpArrow = 174, // { group2Bits:0, group1Bits:0, enum:174, 0b0_1010_1110 }
    LongName_DoubleRightArrow = 175, // { group2Bits:0, group1Bits:0, enum:175, 0b0_1010_1111 }
    LongName_DoubleDownArrow = 176, // { group2Bits:0, group1Bits:0, enum:176, 0b0_1011_0000 }
    LongName_DoubleLeftRightArrow = 177, // { group2Bits:0, group1Bits:0, enum:177, 0b0_1011_0001 }
    LongName_DoubleUpDownArrow = 178, // { group2Bits:0, group1Bits:0, enum:178, 0b0_1011_0010 }
    LongName_LeftArrowBar = 179, // { group2Bits:0, group1Bits:0, enum:179, 0b0_1011_0011 }
    LongName_RightArrowBar = 180, // { group2Bits:0, group1Bits:0, enum:180, 0b0_1011_0100 }
    LongName_DownArrowUpArrow = 181, // { group2Bits:0, group1Bits:0, enum:181, 0b0_1011_0101 }
    LongName_ForAll = 694, // { group2Bits:0, group1Bits:512, enum:182, 0b0_1011_0110 }
    LongName_PartialD = 183, // { group2Bits:0, group1Bits:0, enum:183, 0b0_1011_0111 }
    LongName_Exists = 696, // { group2Bits:0, group1Bits:512, enum:184, 0b0_1011_1000 }
    LongName_NotExists = 697, // { group2Bits:0, group1Bits:512, enum:185, 0b0_1011_1001 }
    LongName_Del = 698, // { group2Bits:0, group1Bits:512, enum:186, 0b0_1011_1010 }
    LongName_Element = 187, // { group2Bits:0, group1Bits:0, enum:187, 0b0_1011_1011 }
    LongName_NotElement = 188, // { group2Bits:0, group1Bits:0, enum:188, 0b0_1011_1100 }
    LongName_ReverseElement = 189, // { group2Bits:0, group1Bits:0, enum:189, 0b0_1011_1101 }
    LongName_NotReverseElement = 190, // { group2Bits:0, group1Bits:0, enum:190, 0b0_1011_1110 }
    LongName_SuchThat = 191, // { group2Bits:0, group1Bits:0, enum:191, 0b0_1011_1111 }
    LongName_Product = 704, // { group2Bits:0, group1Bits:512, enum:192, 0b0_1100_0000 }
    LongName_Coproduct = 705, // { group2Bits:0, group1Bits:512, enum:193, 0b0_1100_0001 }
    LongName_Sum = 706, // { group2Bits:0, group1Bits:512, enum:194, 0b0_1100_0010 }
    LongName_Minus = 707, // { group2Bits:0, group1Bits:512, enum:195, 0b0_1100_0011 }
    LongName_MinusPlus = 708, // { group2Bits:0, group1Bits:512, enum:196, 0b0_1100_0100 }
    LongName_DivisionSlash = 197, // { group2Bits:0, group1Bits:0, enum:197, 0b0_1100_0101 }
    LongName_Backslash = 198, // { group2Bits:0, group1Bits:0, enum:198, 0b0_1100_0110 }
    LongName_SmallCircle = 199, // { group2Bits:0, group1Bits:0, enum:199, 0b0_1100_0111 }
    LongName_Sqrt = 712, // { group2Bits:0, group1Bits:512, enum:200, 0b0_1100_1000 }
    LongName_CubeRoot = 713, // { group2Bits:0, group1Bits:512, enum:201, 0b0_1100_1001 }
    LongName_Proportional = 202, // { group2Bits:0, group1Bits:0, enum:202, 0b0_1100_1010 }
    LongName_Divides = 203, // { group2Bits:0, group1Bits:0, enum:203, 0b0_1100_1011 }
    LongName_DoubleVerticalBar = 204, // { group2Bits:0, group1Bits:0, enum:204, 0b0_1100_1100 }
    LongName_NotDoubleVerticalBar = 205, // { group2Bits:0, group1Bits:0, enum:205, 0b0_1100_1101 }
    LongName_And = 206, // { group2Bits:0, group1Bits:0, enum:206, 0b0_1100_1110 }
    LongName_Or = 207, // { group2Bits:0, group1Bits:0, enum:207, 0b0_1100_1111 }
    LongName_Integral = 720, // { group2Bits:0, group1Bits:512, enum:208, 0b0_1101_0000 }
    LongName_ContourIntegral = 721, // { group2Bits:0, group1Bits:512, enum:209, 0b0_1101_0001 }
    LongName_DoubleContourIntegral = 722, // { group2Bits:0, group1Bits:512, enum:210, 0b0_1101_0010 }
    LongName_ClockwiseContourIntegral = 723, // { group2Bits:0, group1Bits:512, enum:211, 0b0_1101_0011 }
    LongName_CounterClockwiseContourIntegral = 724, // { group2Bits:0, group1Bits:512, enum:212, 0b0_1101_0100 }
    LongName_Therefore = 213, // { group2Bits:0, group1Bits:0, enum:213, 0b0_1101_0101 }
    LongName_Because = 214, // { group2Bits:0, group1Bits:0, enum:214, 0b0_1101_0110 }
    LongName_Colon = 215, // { group2Bits:0, group1Bits:0, enum:215, 0b0_1101_0111 }
    LongName_Proportion = 216, // { group2Bits:0, group1Bits:0, enum:216, 0b0_1101_1000 }
    LongName_Tilde = 217, // { group2Bits:0, group1Bits:0, enum:217, 0b0_1101_1001 }
    LongName_VerticalTilde = 218, // { group2Bits:0, group1Bits:0, enum:218, 0b0_1101_1010 }
    LongName_NotTilde = 219, // { group2Bits:0, group1Bits:0, enum:219, 0b0_1101_1011 }
    LongName_EqualTilde = 220, // { group2Bits:0, group1Bits:0, enum:220, 0b0_1101_1100 }
    LongName_TildeEqual = 221, // { group2Bits:0, group1Bits:0, enum:221, 0b0_1101_1101 }
    LongName_NotTildeEqual = 222, // { group2Bits:0, group1Bits:0, enum:222, 0b0_1101_1110 }
    LongName_TildeFullEqual = 223, // { group2Bits:0, group1Bits:0, enum:223, 0b0_1101_1111 }
    LongName_NotTildeFullEqual = 224, // { group2Bits:0, group1Bits:0, enum:224, 0b0_1110_0000 }
    LongName_TildeTilde = 225, // { group2Bits:0, group1Bits:0, enum:225, 0b0_1110_0001 }
    LongName_NotTildeTilde = 226, // { group2Bits:0, group1Bits:0, enum:226, 0b0_1110_0010 }
    LongName_CupCap = 227, // { group2Bits:0, group1Bits:0, enum:227, 0b0_1110_0011 }
    LongName_HumpDownHump = 228, // { group2Bits:0, group1Bits:0, enum:228, 0b0_1110_0100 }
    LongName_HumpEqual = 229, // { group2Bits:0, group1Bits:0, enum:229, 0b0_1110_0101 }
    LongName_DotEqual = 230, // { group2Bits:0, group1Bits:0, enum:230, 0b0_1110_0110 }
    LongName_NotEqual = 231, // { group2Bits:0, group1Bits:0, enum:231, 0b0_1110_0111 }
    LongName_Congruent = 232, // { group2Bits:0, group1Bits:0, enum:232, 0b0_1110_1000 }
    LongName_NotCongruent = 233, // { group2Bits:0, group1Bits:0, enum:233, 0b0_1110_1001 }
    LongName_LessEqual = 234, // { group2Bits:0, group1Bits:0, enum:234, 0b0_1110_1010 }
    LongName_GreaterEqual = 235, // { group2Bits:0, group1Bits:0, enum:235, 0b0_1110_1011 }
    LongName_LessFullEqual = 236, // { group2Bits:0, group1Bits:0, enum:236, 0b0_1110_1100 }
    LongName_GreaterFullEqual = 237, // { group2Bits:0, group1Bits:0, enum:237, 0b0_1110_1101 }
    LongName_NotLessFullEqual = 238, // { group2Bits:0, group1Bits:0, enum:238, 0b0_1110_1110 }
    LongName_NotGreaterFullEqual = 239, // { group2Bits:0, group1Bits:0, enum:239, 0b0_1110_1111 }
    LongName_LessLess = 240, // { group2Bits:0, group1Bits:0, enum:240, 0b0_1111_0000 }
    LongName_GreaterGreater = 241, // { group2Bits:0, group1Bits:0, enum:241, 0b0_1111_0001 }
    LongName_NotCupCap = 242, // { group2Bits:0, group1Bits:0, enum:242, 0b0_1111_0010 }
    LongName_NotLess = 243, // { group2Bits:0, group1Bits:0, enum:243, 0b0_1111_0011 }
    LongName_NotGreater = 244, // { group2Bits:0, group1Bits:0, enum:244, 0b0_1111_0100 }
    LongName_NotLessEqual = 245, // { group2Bits:0, group1Bits:0, enum:245, 0b0_1111_0101 }
    LongName_NotGreaterEqual = 246, // { group2Bits:0, group1Bits:0, enum:246, 0b0_1111_0110 }
    LongName_LessTilde = 247, // { group2Bits:0, group1Bits:0, enum:247, 0b0_1111_0111 }
    LongName_GreaterTilde = 248, // { group2Bits:0, group1Bits:0, enum:248, 0b0_1111_1000 }
    LongName_NotLessTilde = 249, // { group2Bits:0, group1Bits:0, enum:249, 0b0_1111_1001 }
    LongName_NotGreaterTilde = 250, // { group2Bits:0, group1Bits:0, enum:250, 0b0_1111_1010 }
    LongName_LessGreater = 251, // { group2Bits:0, group1Bits:0, enum:251, 0b0_1111_1011 }
    LongName_GreaterLess = 252, // { group2Bits:0, group1Bits:0, enum:252, 0b0_1111_1100 }
    LongName_NotLessGreater = 253, // { group2Bits:0, group1Bits:0, enum:253, 0b0_1111_1101 }
    LongName_NotGreaterLess = 254, // { group2Bits:0, group1Bits:0, enum:254, 0b0_1111_1110 }
    LongName_Precedes = 255, // { group2Bits:0, group1Bits:0, enum:255, 0b0_1111_1111 }
    LongName_Succeeds = 256, // { group2Bits:0, group1Bits:0, enum:256, 0b1_0000_0000 }
    LongName_PrecedesSlantEqual = 257, // { group2Bits:0, group1Bits:0, enum:257, 0b1_0000_0001 }
    LongName_SucceedsSlantEqual = 258, // { group2Bits:0, group1Bits:0, enum:258, 0b1_0000_0010 }
    LongName_PrecedesTilde = 259, // { group2Bits:0, group1Bits:0, enum:259, 0b1_0000_0011 }
    LongName_SucceedsTilde = 260, // { group2Bits:0, group1Bits:0, enum:260, 0b1_0000_0100 }
    LongName_NotPrecedes = 261, // { group2Bits:0, group1Bits:0, enum:261, 0b1_0000_0101 }
    LongName_NotSucceeds = 262, // { group2Bits:0, group1Bits:0, enum:262, 0b1_0000_0110 }
    LongName_Subset = 263, // { group2Bits:0, group1Bits:0, enum:263, 0b1_0000_0111 }
    LongName_Superset = 264, // { group2Bits:0, group1Bits:0, enum:264, 0b1_0000_1000 }
    LongName_NotSubset = 265, // { group2Bits:0, group1Bits:0, enum:265, 0b1_0000_1001 }
    LongName_NotSuperset = 266, // { group2Bits:0, group1Bits:0, enum:266, 0b1_0000_1010 }
    LongName_SubsetEqual = 267, // { group2Bits:0, group1Bits:0, enum:267, 0b1_0000_1011 }
    LongName_SupersetEqual = 268, // { group2Bits:0, group1Bits:0, enum:268, 0b1_0000_1100 }
    LongName_NotSubsetEqual = 269, // { group2Bits:0, group1Bits:0, enum:269, 0b1_0000_1101 }
    LongName_NotSupersetEqual = 270, // { group2Bits:0, group1Bits:0, enum:270, 0b1_0000_1110 }
    LongName_UnionPlus = 271, // { group2Bits:0, group1Bits:0, enum:271, 0b1_0000_1111 }
    LongName_SquareSubset = 272, // { group2Bits:0, group1Bits:0, enum:272, 0b1_0001_0000 }
    LongName_SquareSuperset = 273, // { group2Bits:0, group1Bits:0, enum:273, 0b1_0001_0001 }
    LongName_SquareSubsetEqual = 274, // { group2Bits:0, group1Bits:0, enum:274, 0b1_0001_0010 }
    LongName_SquareSupersetEqual = 275, // { group2Bits:0, group1Bits:0, enum:275, 0b1_0001_0011 }
    LongName_SquareIntersection = 276, // { group2Bits:0, group1Bits:0, enum:276, 0b1_0001_0100 }
    LongName_SquareUnion = 277, // { group2Bits:0, group1Bits:0, enum:277, 0b1_0001_0101 }
    LongName_CirclePlus = 278, // { group2Bits:0, group1Bits:0, enum:278, 0b1_0001_0110 }
    LongName_CircleMinus = 279, // { group2Bits:0, group1Bits:0, enum:279, 0b1_0001_0111 }
    LongName_CircleTimes = 792, // { group2Bits:0, group1Bits:512, enum:280, 0b1_0001_1000 }
    LongName_CircleDot = 281, // { group2Bits:0, group1Bits:0, enum:281, 0b1_0001_1001 }
    LongName_RightTee = 282, // { group2Bits:0, group1Bits:0, enum:282, 0b1_0001_1010 }
    LongName_LeftTee = 283, // { group2Bits:0, group1Bits:0, enum:283, 0b1_0001_1011 }
    LongName_DownTee = 284, // { group2Bits:0, group1Bits:0, enum:284, 0b1_0001_1100 }
    LongName_UpTee = 285, // { group2Bits:0, group1Bits:0, enum:285, 0b1_0001_1101 }
    LongName_DoubleRightTee = 286, // { group2Bits:0, group1Bits:0, enum:286, 0b1_0001_1110 }
    LongName_LeftTriangle = 287, // { group2Bits:0, group1Bits:0, enum:287, 0b1_0001_1111 }
    LongName_RightTriangle = 288, // { group2Bits:0, group1Bits:0, enum:288, 0b1_0010_0000 }
    LongName_LeftTriangleEqual = 289, // { group2Bits:0, group1Bits:0, enum:289, 0b1_0010_0001 }
    LongName_RightTriangleEqual = 290, // { group2Bits:0, group1Bits:0, enum:290, 0b1_0010_0010 }
    LongName_Xor = 291, // { group2Bits:0, group1Bits:0, enum:291, 0b1_0010_0011 }
    LongName_Nand = 292, // { group2Bits:0, group1Bits:0, enum:292, 0b1_0010_0100 }
    LongName_Nor = 293, // { group2Bits:0, group1Bits:0, enum:293, 0b1_0010_0101 }
    LongName_Wedge = 294, // { group2Bits:0, group1Bits:0, enum:294, 0b1_0010_0110 }
    LongName_Vee = 295, // { group2Bits:0, group1Bits:0, enum:295, 0b1_0010_0111 }
    LongName_Intersection = 296, // { group2Bits:0, group1Bits:0, enum:296, 0b1_0010_1000 }
    LongName_Union = 297, // { group2Bits:0, group1Bits:0, enum:297, 0b1_0010_1001 }
    LongName_Diamond = 298, // { group2Bits:0, group1Bits:0, enum:298, 0b1_0010_1010 }
    LongName_Star = 299, // { group2Bits:0, group1Bits:0, enum:299, 0b1_0010_1011 }
    LongName_LessEqualGreater = 300, // { group2Bits:0, group1Bits:0, enum:300, 0b1_0010_1100 }
    LongName_GreaterEqualLess = 301, // { group2Bits:0, group1Bits:0, enum:301, 0b1_0010_1101 }
    LongName_NotPrecedesSlantEqual = 302, // { group2Bits:0, group1Bits:0, enum:302, 0b1_0010_1110 }
    LongName_NotSucceedsSlantEqual = 303, // { group2Bits:0, group1Bits:0, enum:303, 0b1_0010_1111 }
    LongName_NotSquareSubsetEqual = 304, // { group2Bits:0, group1Bits:0, enum:304, 0b1_0011_0000 }
    LongName_NotSquareSupersetEqual = 305, // { group2Bits:0, group1Bits:0, enum:305, 0b1_0011_0001 }
    LongName_NotPrecedesTilde = 306, // { group2Bits:0, group1Bits:0, enum:306, 0b1_0011_0010 }
    LongName_NotSucceedsTilde = 307, // { group2Bits:0, group1Bits:0, enum:307, 0b1_0011_0011 }
    LongName_NotLeftTriangle = 308, // { group2Bits:0, group1Bits:0, enum:308, 0b1_0011_0100 }
    LongName_NotRightTriangle = 309, // { group2Bits:0, group1Bits:0, enum:309, 0b1_0011_0101 }
    LongName_NotLeftTriangleEqual = 310, // { group2Bits:0, group1Bits:0, enum:310, 0b1_0011_0110 }
    LongName_NotRightTriangleEqual = 311, // { group2Bits:0, group1Bits:0, enum:311, 0b1_0011_0111 }
    LongName_LeftCeiling = 824, // { group2Bits:0, group1Bits:512, enum:312, 0b1_0011_1000 }
    LongName_RightCeiling = 1337, // { group2Bits:0, group1Bits:1024, enum:313, 0b1_0011_1001 }
    LongName_LeftFloor = 826, // { group2Bits:0, group1Bits:512, enum:314, 0b1_0011_1010 }
    LongName_RightFloor = 1339, // { group2Bits:0, group1Bits:1024, enum:315, 0b1_0011_1011 }
    LongName_Cap = 316, // { group2Bits:0, group1Bits:0, enum:316, 0b1_0011_1100 }
    LongName_Cup = 317, // { group2Bits:0, group1Bits:0, enum:317, 0b1_0011_1101 }
    LongName_LeftAngleBracket = 830, // { group2Bits:0, group1Bits:512, enum:318, 0b1_0011_1110 }
    LongName_RightAngleBracket = 1343, // { group2Bits:0, group1Bits:1024, enum:319, 0b1_0011_1111 }
    LongName_Perpendicular = 320, // { group2Bits:0, group1Bits:0, enum:320, 0b1_0100_0000 }
    LongName_LongLeftArrow = 321, // { group2Bits:0, group1Bits:0, enum:321, 0b1_0100_0001 }
    LongName_LongRightArrow = 322, // { group2Bits:0, group1Bits:0, enum:322, 0b1_0100_0010 }
    LongName_LongLeftRightArrow = 323, // { group2Bits:0, group1Bits:0, enum:323, 0b1_0100_0011 }
    LongName_DoubleLongLeftArrow = 324, // { group2Bits:0, group1Bits:0, enum:324, 0b1_0100_0100 }
    LongName_DoubleLongRightArrow = 325, // { group2Bits:0, group1Bits:0, enum:325, 0b1_0100_0101 }
    LongName_DoubleLongLeftRightArrow = 326, // { group2Bits:0, group1Bits:0, enum:326, 0b1_0100_0110 }
    LongName_UpArrowBar = 327, // { group2Bits:0, group1Bits:0, enum:327, 0b1_0100_0111 }
    LongName_DownArrowBar = 328, // { group2Bits:0, group1Bits:0, enum:328, 0b1_0100_1000 }
    LongName_LeftRightVector = 329, // { group2Bits:0, group1Bits:0, enum:329, 0b1_0100_1001 }
    LongName_RightUpDownVector = 330, // { group2Bits:0, group1Bits:0, enum:330, 0b1_0100_1010 }
    LongName_DownLeftRightVector = 331, // { group2Bits:0, group1Bits:0, enum:331, 0b1_0100_1011 }
    LongName_LeftUpDownVector = 332, // { group2Bits:0, group1Bits:0, enum:332, 0b1_0100_1100 }
    LongName_LeftVectorBar = 333, // { group2Bits:0, group1Bits:0, enum:333, 0b1_0100_1101 }
    LongName_RightVectorBar = 334, // { group2Bits:0, group1Bits:0, enum:334, 0b1_0100_1110 }
    LongName_RightUpVectorBar = 335, // { group2Bits:0, group1Bits:0, enum:335, 0b1_0100_1111 }
    LongName_RightDownVectorBar = 336, // { group2Bits:0, group1Bits:0, enum:336, 0b1_0101_0000 }
    LongName_DownLeftVectorBar = 337, // { group2Bits:0, group1Bits:0, enum:337, 0b1_0101_0001 }
    LongName_DownRightVectorBar = 338, // { group2Bits:0, group1Bits:0, enum:338, 0b1_0101_0010 }
    LongName_LeftUpVectorBar = 339, // { group2Bits:0, group1Bits:0, enum:339, 0b1_0101_0011 }
    LongName_LeftDownVectorBar = 340, // { group2Bits:0, group1Bits:0, enum:340, 0b1_0101_0100 }
    LongName_LeftTeeVector = 341, // { group2Bits:0, group1Bits:0, enum:341, 0b1_0101_0101 }
    LongName_RightTeeVector = 342, // { group2Bits:0, group1Bits:0, enum:342, 0b1_0101_0110 }
    LongName_RightUpTeeVector = 343, // { group2Bits:0, group1Bits:0, enum:343, 0b1_0101_0111 }
    LongName_RightDownTeeVector = 344, // { group2Bits:0, group1Bits:0, enum:344, 0b1_0101_1000 }
    LongName_DownLeftTeeVector = 345, // { group2Bits:0, group1Bits:0, enum:345, 0b1_0101_1001 }
    LongName_DownRightTeeVector = 346, // { group2Bits:0, group1Bits:0, enum:346, 0b1_0101_1010 }
    LongName_LeftUpTeeVector = 347, // { group2Bits:0, group1Bits:0, enum:347, 0b1_0101_1011 }
    LongName_LeftDownTeeVector = 348, // { group2Bits:0, group1Bits:0, enum:348, 0b1_0101_1100 }
    LongName_UpEquilibrium = 349, // { group2Bits:0, group1Bits:0, enum:349, 0b1_0101_1101 }
    LongName_ReverseUpEquilibrium = 350, // { group2Bits:0, group1Bits:0, enum:350, 0b1_0101_1110 }
    LongName_RoundImplies = 351, // { group2Bits:0, group1Bits:0, enum:351, 0b1_0101_1111 }
    LongName_LeftTriangleBar = 352, // { group2Bits:0, group1Bits:0, enum:352, 0b1_0110_0000 }
    LongName_RightTriangleBar = 353, // { group2Bits:0, group1Bits:0, enum:353, 0b1_0110_0001 }
    LongName_Equivalent = 354, // { group2Bits:0, group1Bits:0, enum:354, 0b1_0110_0010 }
    LongName_LessSlantEqual = 355, // { group2Bits:0, group1Bits:0, enum:355, 0b1_0110_0011 }
    LongName_GreaterSlantEqual = 356, // { group2Bits:0, group1Bits:0, enum:356, 0b1_0110_0100 }
    LongName_NestedLessLess = 357, // { group2Bits:0, group1Bits:0, enum:357, 0b1_0110_0101 }
    LongName_NestedGreaterGreater = 358, // { group2Bits:0, group1Bits:0, enum:358, 0b1_0110_0110 }
    LongName_PrecedesEqual = 359, // { group2Bits:0, group1Bits:0, enum:359, 0b1_0110_0111 }
    LongName_SucceedsEqual = 360, // { group2Bits:0, group1Bits:0, enum:360, 0b1_0110_1000 }
    LongName_DoubleLeftTee = 361, // { group2Bits:0, group1Bits:0, enum:361, 0b1_0110_1001 }
    LongName_LeftDoubleBracket = 362, // { group2Bits:0, group1Bits:0, enum:362, 0b1_0110_1010 }
    LongName_RightDoubleBracket = 1387, // { group2Bits:0, group1Bits:1024, enum:363, 0b1_0110_1011 }
    LongName_LeftAssociation = 876, // { group2Bits:0, group1Bits:512, enum:364, 0b1_0110_1100 }
    LongName_RightAssociation = 1389, // { group2Bits:0, group1Bits:1024, enum:365, 0b1_0110_1101 }
    LongName_TwoWayRule = 366, // { group2Bits:0, group1Bits:0, enum:366, 0b1_0110_1110 }
    LongName_Piecewise = 879, // { group2Bits:0, group1Bits:512, enum:367, 0b1_0110_1111 }
    LongName_ImplicitPlus = 368, // { group2Bits:0, group1Bits:0, enum:368, 0b1_0111_0000 }
    LongName_AutoLeftMatch = 369, // { group2Bits:0, group1Bits:0, enum:369, 0b1_0111_0001 }
    LongName_AutoRightMatch = 370, // { group2Bits:0, group1Bits:0, enum:370, 0b1_0111_0010 }
    LongName_InvisiblePrefixScriptBase = 883, // { group2Bits:0, group1Bits:512, enum:371, 0b1_0111_0011 }
    LongName_InvisiblePostfixScriptBase = 372, // { group2Bits:0, group1Bits:0, enum:372, 0b1_0111_0100 }
    LongName_Transpose = 373, // { group2Bits:0, group1Bits:0, enum:373, 0b1_0111_0101 }
    LongName_Conjugate = 374, // { group2Bits:0, group1Bits:0, enum:374, 0b1_0111_0110 }
    LongName_ConjugateTranspose = 375, // { group2Bits:0, group1Bits:0, enum:375, 0b1_0111_0111 }
    LongName_HermitianConjugate = 376, // { group2Bits:0, group1Bits:0, enum:376, 0b1_0111_1000 }
    LongName_VerticalBar = 377, // { group2Bits:0, group1Bits:0, enum:377, 0b1_0111_1001 }
    LongName_NotVerticalBar = 378, // { group2Bits:0, group1Bits:0, enum:378, 0b1_0111_1010 }
    LongName_Distributed = 379, // { group2Bits:0, group1Bits:0, enum:379, 0b1_0111_1011 }
    LongName_Conditioned = 380, // { group2Bits:0, group1Bits:0, enum:380, 0b1_0111_1100 }
    LongName_UndirectedEdge = 381, // { group2Bits:0, group1Bits:0, enum:381, 0b1_0111_1101 }
    LongName_DirectedEdge = 382, // { group2Bits:0, group1Bits:0, enum:382, 0b1_0111_1110 }
    LongName_ContinuedFractionK = 895, // { group2Bits:0, group1Bits:512, enum:383, 0b1_0111_1111 }
    LongName_TensorProduct = 384, // { group2Bits:0, group1Bits:0, enum:384, 0b1_1000_0000 }
    LongName_TensorWedge = 385, // { group2Bits:0, group1Bits:0, enum:385, 0b1_1000_0001 }
    LongName_ProbabilityPr = 898, // { group2Bits:0, group1Bits:512, enum:386, 0b1_1000_0010 }
    LongName_ExpectationE = 899, // { group2Bits:0, group1Bits:512, enum:387, 0b1_1000_0011 }
    LongName_PermutationProduct = 388, // { group2Bits:0, group1Bits:0, enum:388, 0b1_1000_0100 }
    LongName_NotEqualTilde = 389, // { group2Bits:0, group1Bits:0, enum:389, 0b1_1000_0101 }
    LongName_NotHumpEqual = 390, // { group2Bits:0, group1Bits:0, enum:390, 0b1_1000_0110 }
    LongName_NotHumpDownHump = 391, // { group2Bits:0, group1Bits:0, enum:391, 0b1_1000_0111 }
    LongName_NotLeftTriangleBar = 392, // { group2Bits:0, group1Bits:0, enum:392, 0b1_1000_1000 }
    LongName_NotRightTriangleBar = 393, // { group2Bits:0, group1Bits:0, enum:393, 0b1_1000_1001 }
    LongName_NotLessLess = 394, // { group2Bits:0, group1Bits:0, enum:394, 0b1_1000_1010 }
    LongName_NotNestedLessLess = 395, // { group2Bits:0, group1Bits:0, enum:395, 0b1_1000_1011 }
    LongName_NotLessSlantEqual = 396, // { group2Bits:0, group1Bits:0, enum:396, 0b1_1000_1100 }
    LongName_NotGreaterGreater = 397, // { group2Bits:0, group1Bits:0, enum:397, 0b1_1000_1101 }
    LongName_NotNestedGreaterGreater = 398, // { group2Bits:0, group1Bits:0, enum:398, 0b1_1000_1110 }
    LongName_NotGreaterSlantEqual = 399, // { group2Bits:0, group1Bits:0, enum:399, 0b1_1000_1111 }
    LongName_NotPrecedesEqual = 400, // { group2Bits:0, group1Bits:0, enum:400, 0b1_1001_0000 }
    LongName_NotSucceedsEqual = 401, // { group2Bits:0, group1Bits:0, enum:401, 0b1_1001_0001 }
    LongName_NotSquareSubset = 402, // { group2Bits:0, group1Bits:0, enum:402, 0b1_1001_0010 }
    LongName_NotSquareSuperset = 403, // { group2Bits:0, group1Bits:0, enum:403, 0b1_1001_0011 }
    LongName_Equal = 404, // { group2Bits:0, group1Bits:0, enum:404, 0b1_1001_0100 }
    LongName_VerticalSeparator = 405, // { group2Bits:0, group1Bits:0, enum:405, 0b1_1001_0101 }
    LongName_VectorGreater = 406, // { group2Bits:0, group1Bits:0, enum:406, 0b1_1001_0110 }
    LongName_VectorGreaterEqual = 407, // { group2Bits:0, group1Bits:0, enum:407, 0b1_1001_0111 }
    LongName_VectorLess = 408, // { group2Bits:0, group1Bits:0, enum:408, 0b1_1001_1000 }
    LongName_VectorLessEqual = 409, // { group2Bits:0, group1Bits:0, enum:409, 0b1_1001_1001 }
    LongName_Limit = 410, // { group2Bits:0, group1Bits:0, enum:410, 0b1_1001_1010 }
    LongName_MaxLimit = 411, // { group2Bits:0, group1Bits:0, enum:411, 0b1_1001_1011 }
    LongName_MinLimit = 412, // { group2Bits:0, group1Bits:0, enum:412, 0b1_1001_1100 }
    LongName_Cross = 413, // { group2Bits:0, group1Bits:0, enum:413, 0b1_1001_1101 }
    LongName_Function = 414, // { group2Bits:0, group1Bits:0, enum:414, 0b1_1001_1110 }
    LongName_Xnor = 415, // { group2Bits:0, group1Bits:0, enum:415, 0b1_1001_1111 }
    LongName_DiscreteShift = 416, // { group2Bits:0, group1Bits:0, enum:416, 0b1_1010_0000 }
    LongName_DifferenceDelta = 417, // { group2Bits:0, group1Bits:0, enum:417, 0b1_1010_0001 }
    LongName_DiscreteRatio = 418, // { group2Bits:0, group1Bits:0, enum:418, 0b1_1010_0010 }
    LongName_RuleDelayed = 419, // { group2Bits:0, group1Bits:0, enum:419, 0b1_1010_0011 }
    LongName_Square = 932, // { group2Bits:0, group1Bits:512, enum:420, 0b1_1010_0100 }
    LongName_Rule = 421, // { group2Bits:0, group1Bits:0, enum:421, 0b1_1010_0101 }
    LongName_Implies = 422, // { group2Bits:0, group1Bits:0, enum:422, 0b1_1010_0110 }
    LongName_ShortRightArrow = 423, // { group2Bits:0, group1Bits:0, enum:423, 0b1_1010_0111 }
    LongName_ShortLeftArrow = 424, // { group2Bits:0, group1Bits:0, enum:424, 0b1_1010_1000 }
    LongName_ShortUpArrow = 425, // { group2Bits:0, group1Bits:0, enum:425, 0b1_1010_1001 }
    LongName_ShortDownArrow = 426, // { group2Bits:0, group1Bits:0, enum:426, 0b1_1010_1010 }
    LongName_Application = 427, // { group2Bits:0, group1Bits:0, enum:427, 0b1_1010_1011 }
    LongName_LeftBracketingBar = 940, // { group2Bits:0, group1Bits:512, enum:428, 0b1_1010_1100 }
    LongName_RightBracketingBar = 1453, // { group2Bits:0, group1Bits:1024, enum:429, 0b1_1010_1101 }
    LongName_LeftDoubleBracketingBar = 942, // { group2Bits:0, group1Bits:512, enum:430, 0b1_1010_1110 }
    LongName_RightDoubleBracketingBar = 1455, // { group2Bits:0, group1Bits:1024, enum:431, 0b1_1010_1111 }
    LongName_CapitalDifferentialD = 944, // { group2Bits:0, group1Bits:512, enum:432, 0b1_1011_0000 }
    LongName_DifferentialD = 945, // { group2Bits:0, group1Bits:512, enum:433, 0b1_1011_0001 }
    LongName_InvisibleComma = 434, // { group2Bits:0, group1Bits:0, enum:434, 0b1_1011_0010 }
    LongName_InvisibleApplication = 435, // { group2Bits:0, group1Bits:0, enum:435, 0b1_1011_0011 }
    LongName_LongEqual = 436, // { group2Bits:0, group1Bits:0, enum:436, 0b1_1011_0100 }
    Count = 437, // { group2Bits:0, group1Bits:0, enum:437, 0b1_1011_0101 }
}

//
// AUTO GENERATED FILE
// DO NOT MODIFY
//

use crate::symbol_registration as st;

//
// TokenKind::Integer must be 0x4 to allow setting the 0b1 bit to convert to TokenKind::REAL, and 0b10 bit to convert to TokenKind::Rational
//
const _: () = assert!(TokenKind::Integer.value() == 0x4, "Check your assumptions");
const _: () = assert!(TokenKind::Real.value() == 0x5, "Check your assumptions");
const _: () = assert!(TokenKind::Rational.value() == 0x6, "Check your assumptions");

//
// TokenKind::InternalNewline must be 0x8 to allow setting the 0b100 bit to convert to TokenKind::ToplevelNewline
//
const _: () = assert!(TokenKind::InternalNewline.value() == 0b1000, "Check your assumptions");
const _: () = assert!(TokenKind::ToplevelNewline.value() == 0b1100, "Check your assumptions");
//const _: () = assert!(TokenKind::Error_First.value() == 0x10, "Check your assumptions");

//
// TokenKind::Error_Unterminated_First must be 0x1c to allow checking 0b0_0001_11xx for isUnterminated
//
const _: () = assert!(TokenKind::Error_Unterminated_First.value() == 0x1c, "Check your assumptions");
const _: () = assert!(TokenKind::Error_Unterminated_End.value() == 0x20, "Check your assumptions");


#[allow(dead_code)]
pub fn TokenToSymbol(token: TokenKind) -> Symbol {
    use TokenKind::*;
    match token {
        Unknown => return st::Token_Unknown,
        EndOfFile => return st::EndOfFile,
        Symbol => return st::Symbol,
        String => return st::String,
        Integer => return st::Integer,
        Real => return st::Real,
        Rational => return st::Rational,
        LinearSyntaxBlob => return st::Token_LinearSyntaxBlob,
        InternalNewline => return st::Token_Newline,
        Comment => return st::Token_Comment,
        Whitespace => return st::Whitespace,
        Buffer1 => return st::Token_Buffer1,
        ToplevelNewline => return st::Token_Newline,
        Buffer2 => return st::Token_Buffer2,
        Buffer3 => return st::Token_Buffer3,
        Buffer4 => return st::Token_Buffer4,
        Error_ExpectedEqual => return st::Token_Error_ExpectedEqual,
        Error_Number => return st::Token_Error_Number,
        Error_UnhandledCharacter => return st::Token_Error_UnhandledCharacter,
        Error_ExpectedLetterlike => return st::Token_Error_ExpectedLetterlike,
        Error_Aborted => return st::Token_Error_Aborted,
        Error_ExpectedOperand => return st::Token_Error_ExpectedOperand,
        Error_ExpectedTag => return st::Token_Error_ExpectedTag,
        Error_ExpectedFile => return st::Token_Error_ExpectedFile,
        Error_UnexpectedCloser => return st::Token_Error_UnexpectedCloser,
        Error_PrefixImplicitNull => return st::Token_Error_PrefixImplicitNull,
        Error_InfixImplicitNull => return st::Token_Error_InfixImplicitNull,
        Error_UnsafeCharacterEncoding => return st::Token_Error_UnsafeCharacterEncoding,
        Error_UnterminatedComment => return st::Token_Error_UnterminatedComment,
        Error_UnterminatedString => return st::Token_Error_UnterminatedString,
        Error_UnterminatedFileString => return st::Token_Error_UnterminatedFileString,
        Error_UnterminatedLinearSyntaxBlob => return st::Token_Error_UnterminatedLinearSyntaxBlob,
        Error_UnsupportedToken => return st::Token_Error_UnsupportedToken,
        Error_UnexpectedCommentCloser => return st::Token_Error_UnexpectedCommentCloser,
        Error_End => return st::Token_Error_End,
        Dot => return st::Token_Dot,
        Colon => return st::Token_Colon,
        OpenParen => return st::Token_OpenParen,
        CloseParen => return st::Token_CloseParen,
        OpenSquare => return st::Token_OpenSquare,
        CloseSquare => return st::Token_CloseSquare,
        Comma => return st::Token_Comma,
        OpenCurly => return st::Token_OpenCurly,
        CloseCurly => return st::Token_CloseCurly,
        Equal => return st::Token_Equal,
        Bang => return st::Token_Bang,
        Under => return st::Token_Under,
        Less => return st::Token_Less,
        Greater => return st::Token_Greater,
        Minus => return st::Token_Minus,
        Bar => return st::Token_Bar,
        Semi => return st::Token_Semi,
        Hash => return st::Token_Hash,
        Amp => return st::Token_Amp,
        Slash => return st::Token_Slash,
        At => return st::Token_At,
        Plus => return st::Token_Plus,
        Tilde => return st::Token_Tilde,
        Star => return st::Token_Star,
        Caret => return st::Token_Caret,
        SingleQuote => return st::Token_SingleQuote,
        Percent => return st::Token_Percent,
        Question => return st::Token_Question,
        DotDot => return st::Token_DotDot,
        ColonColon => return st::Token_ColonColon,
        ColonEqual => return st::Token_ColonEqual,
        ColonGreater => return st::Token_ColonGreater,
        EqualEqual => return st::Token_EqualEqual,
        UnderUnder => return st::Token_UnderUnder,
        UnderDot => return st::Token_UnderDot,
        LessBar => return st::Token_LessBar,
        LessLess => return st::Token_LessLess,
        LessGreater => return st::Token_LessGreater,
        LessEqual => return st::Token_LessEqual,
        GreaterGreater => return st::Token_GreaterGreater,
        GreaterEqual => return st::Token_GreaterEqual,
        MinusGreater => return st::Token_MinusGreater,
        MinusMinus => return st::Token_MinusMinus,
        MinusEqual => return st::Token_MinusEqual,
        BarBar => return st::Token_BarBar,
        BarGreater => return st::Token_BarGreater,
        SemiSemi => return st::Token_SemiSemi,
        AmpAmp => return st::Token_AmpAmp,
        SlashAt => return st::Token_SlashAt,
        SlashSemi => return st::Token_SlashSemi,
        SlashDot => return st::Token_SlashDot,
        SlashSlash => return st::Token_SlashSlash,
        SlashColon => return st::Token_SlashColon,
        SlashEqual => return st::Token_SlashEqual,
        SlashStar => return st::Token_SlashStar,
        AtAt => return st::Token_AtAt,
        AtStar => return st::Token_AtStar,
        PlusPlus => return st::Token_PlusPlus,
        PlusEqual => return st::Token_PlusEqual,
        TildeTilde => return st::Token_TildeTilde,
        StarEqual => return st::Token_StarEqual,
        StarStar => return st::Token_StarStar,
        CaretEqual => return st::Token_CaretEqual,
        HashHash => return st::Token_HashHash,
        BangEqual => return st::Token_BangEqual,
        BangBang => return st::Token_BangBang,
        QuestionQuestion => return st::Token_QuestionQuestion,
        DotDotDot => return st::Token_DotDotDot,
        EqualEqualEqual => return st::Token_EqualEqualEqual,
        EqualBangEqual => return st::Token_EqualBangEqual,
        UnderUnderUnder => return st::Token_UnderUnderUnder,
        SlashSlashDot => return st::Token_SlashSlashDot,
        AtAtAt => return st::Token_AtAtAt,
        LessMinusGreater => return st::Token_LessMinusGreater,
        SlashSlashAt => return st::Token_SlashSlashAt,
        CaretColonEqual => return st::Token_CaretColonEqual,
        GreaterGreaterGreater => return st::Token_GreaterGreaterGreater,
        BarMinusGreater => return st::Token_BarMinusGreater,
        SlashSlashEqual => return st::Token_SlashSlashEqual,
        ColonColonOpenSquare => return st::Token_ColonColonOpenSquare,
        PercentPercent => return st::Token_PercentPercent,
        LinearSyntax_Bang => return st::Token_LinearSyntax_Bang,
        LinearSyntax_CloseParen => return st::Token_LinearSyntax_CloseParen,
        LinearSyntax_At => return st::Token_LinearSyntax_At,
        LinearSyntax_Amp => return st::Token_LinearSyntax_Amp,
        LinearSyntax_Star => return st::Token_LinearSyntax_Star,
        LinearSyntax_Under => return st::Token_LinearSyntax_Under,
        LinearSyntax_Caret => return st::Token_LinearSyntax_Caret,
        LinearSyntax_Space => return st::Token_LinearSyntax_Space,
        LinearSyntax_Percent => return st::Token_LinearSyntax_Percent,
        LinearSyntax_Plus => return st::Token_LinearSyntax_Plus,
        LinearSyntax_Slash => return st::Token_LinearSyntax_Slash,
        LinearSyntax_BackTick => return st::Token_LinearSyntax_BackTick,
        Fake_ImplicitTimes => return st::Token_Fake_ImplicitTimes,
        Fake_ImplicitNull => return st::Token_Fake_ImplicitNull,
        Fake_ImplicitOne => return st::Token_Fake_ImplicitOne,
        Fake_ImplicitAll => return st::Token_Fake_ImplicitAll,
        Boxes_OpenParenStar => return st::Token_Boxes_OpenParenStar,
        Boxes_StarCloseParen => return st::Token_Boxes_StarCloseParen,
        Boxes_MultiSingleQuote => return st::Token_Boxes_MultiSingleQuote,
        Boxes_MultiWhitespace => return st::Token_Boxes_MultiWhitespace,
        LongName_Not => return st::Token_LongName_Not,
        LongName_PlusMinus => return st::Token_LongName_PlusMinus,
        LongName_CenterDot => return st::Token_LongName_CenterDot,
        LongName_Times => return st::Token_LongName_Times,
        LongName_Divide => return st::Token_LongName_Divide,
        LongName_OpenCurlyQuote => return st::Token_LongName_OpenCurlyQuote,
        LongName_CloseCurlyQuote => return st::Token_LongName_CloseCurlyQuote,
        LongName_OpenCurlyDoubleQuote => return st::Token_LongName_OpenCurlyDoubleQuote,
        LongName_CloseCurlyDoubleQuote => return st::Token_LongName_CloseCurlyDoubleQuote,
        LongName_InvisibleTimes => return st::Token_LongName_InvisibleTimes,
        LongName_LeftArrow => return st::Token_LongName_LeftArrow,
        LongName_UpArrow => return st::Token_LongName_UpArrow,
        LongName_RightArrow => return st::Token_LongName_RightArrow,
        LongName_DownArrow => return st::Token_LongName_DownArrow,
        LongName_LeftRightArrow => return st::Token_LongName_LeftRightArrow,
        LongName_UpDownArrow => return st::Token_LongName_UpDownArrow,
        LongName_UpperLeftArrow => return st::Token_LongName_UpperLeftArrow,
        LongName_UpperRightArrow => return st::Token_LongName_UpperRightArrow,
        LongName_LowerRightArrow => return st::Token_LongName_LowerRightArrow,
        LongName_LowerLeftArrow => return st::Token_LongName_LowerLeftArrow,
        LongName_LeftTeeArrow => return st::Token_LongName_LeftTeeArrow,
        LongName_UpTeeArrow => return st::Token_LongName_UpTeeArrow,
        LongName_RightTeeArrow => return st::Token_LongName_RightTeeArrow,
        LongName_DownTeeArrow => return st::Token_LongName_DownTeeArrow,
        LongName_LeftVector => return st::Token_LongName_LeftVector,
        LongName_DownLeftVector => return st::Token_LongName_DownLeftVector,
        LongName_RightUpVector => return st::Token_LongName_RightUpVector,
        LongName_LeftUpVector => return st::Token_LongName_LeftUpVector,
        LongName_RightVector => return st::Token_LongName_RightVector,
        LongName_DownRightVector => return st::Token_LongName_DownRightVector,
        LongName_RightDownVector => return st::Token_LongName_RightDownVector,
        LongName_LeftDownVector => return st::Token_LongName_LeftDownVector,
        LongName_RightArrowLeftArrow => return st::Token_LongName_RightArrowLeftArrow,
        LongName_UpArrowDownArrow => return st::Token_LongName_UpArrowDownArrow,
        LongName_LeftArrowRightArrow => return st::Token_LongName_LeftArrowRightArrow,
        LongName_ReverseEquilibrium => return st::Token_LongName_ReverseEquilibrium,
        LongName_Equilibrium => return st::Token_LongName_Equilibrium,
        LongName_DoubleLeftArrow => return st::Token_LongName_DoubleLeftArrow,
        LongName_DoubleUpArrow => return st::Token_LongName_DoubleUpArrow,
        LongName_DoubleRightArrow => return st::Token_LongName_DoubleRightArrow,
        LongName_DoubleDownArrow => return st::Token_LongName_DoubleDownArrow,
        LongName_DoubleLeftRightArrow => return st::Token_LongName_DoubleLeftRightArrow,
        LongName_DoubleUpDownArrow => return st::Token_LongName_DoubleUpDownArrow,
        LongName_LeftArrowBar => return st::Token_LongName_LeftArrowBar,
        LongName_RightArrowBar => return st::Token_LongName_RightArrowBar,
        LongName_DownArrowUpArrow => return st::Token_LongName_DownArrowUpArrow,
        LongName_ForAll => return st::Token_LongName_ForAll,
        LongName_PartialD => return st::Token_LongName_PartialD,
        LongName_Exists => return st::Token_LongName_Exists,
        LongName_NotExists => return st::Token_LongName_NotExists,
        LongName_Del => return st::Token_LongName_Del,
        LongName_Element => return st::Token_LongName_Element,
        LongName_NotElement => return st::Token_LongName_NotElement,
        LongName_ReverseElement => return st::Token_LongName_ReverseElement,
        LongName_NotReverseElement => return st::Token_LongName_NotReverseElement,
        LongName_SuchThat => return st::Token_LongName_SuchThat,
        LongName_Product => return st::Token_LongName_Product,
        LongName_Coproduct => return st::Token_LongName_Coproduct,
        LongName_Sum => return st::Token_LongName_Sum,
        LongName_Minus => return st::Token_LongName_Minus,
        LongName_MinusPlus => return st::Token_LongName_MinusPlus,
        LongName_DivisionSlash => return st::Token_LongName_DivisionSlash,
        LongName_Backslash => return st::Token_LongName_Backslash,
        LongName_SmallCircle => return st::Token_LongName_SmallCircle,
        LongName_Sqrt => return st::Token_LongName_Sqrt,
        LongName_CubeRoot => return st::Token_LongName_CubeRoot,
        LongName_Proportional => return st::Token_LongName_Proportional,
        LongName_Divides => return st::Token_LongName_Divides,
        LongName_DoubleVerticalBar => return st::Token_LongName_DoubleVerticalBar,
        LongName_NotDoubleVerticalBar => return st::Token_LongName_NotDoubleVerticalBar,
        LongName_And => return st::Token_LongName_And,
        LongName_Or => return st::Token_LongName_Or,
        LongName_Integral => return st::Token_LongName_Integral,
        LongName_ContourIntegral => return st::Token_LongName_ContourIntegral,
        LongName_DoubleContourIntegral => return st::Token_LongName_DoubleContourIntegral,
        LongName_ClockwiseContourIntegral => return st::Token_LongName_ClockwiseContourIntegral,
        LongName_CounterClockwiseContourIntegral => return st::Token_LongName_CounterClockwiseContourIntegral,
        LongName_Therefore => return st::Token_LongName_Therefore,
        LongName_Because => return st::Token_LongName_Because,
        LongName_Colon => return st::Token_LongName_Colon,
        LongName_Proportion => return st::Token_LongName_Proportion,
        LongName_Tilde => return st::Token_LongName_Tilde,
        LongName_VerticalTilde => return st::Token_LongName_VerticalTilde,
        LongName_NotTilde => return st::Token_LongName_NotTilde,
        LongName_EqualTilde => return st::Token_LongName_EqualTilde,
        LongName_TildeEqual => return st::Token_LongName_TildeEqual,
        LongName_NotTildeEqual => return st::Token_LongName_NotTildeEqual,
        LongName_TildeFullEqual => return st::Token_LongName_TildeFullEqual,
        LongName_NotTildeFullEqual => return st::Token_LongName_NotTildeFullEqual,
        LongName_TildeTilde => return st::Token_LongName_TildeTilde,
        LongName_NotTildeTilde => return st::Token_LongName_NotTildeTilde,
        LongName_CupCap => return st::Token_LongName_CupCap,
        LongName_HumpDownHump => return st::Token_LongName_HumpDownHump,
        LongName_HumpEqual => return st::Token_LongName_HumpEqual,
        LongName_DotEqual => return st::Token_LongName_DotEqual,
        LongName_NotEqual => return st::Token_LongName_NotEqual,
        LongName_Congruent => return st::Token_LongName_Congruent,
        LongName_NotCongruent => return st::Token_LongName_NotCongruent,
        LongName_LessEqual => return st::Token_LongName_LessEqual,
        LongName_GreaterEqual => return st::Token_LongName_GreaterEqual,
        LongName_LessFullEqual => return st::Token_LongName_LessFullEqual,
        LongName_GreaterFullEqual => return st::Token_LongName_GreaterFullEqual,
        LongName_NotLessFullEqual => return st::Token_LongName_NotLessFullEqual,
        LongName_NotGreaterFullEqual => return st::Token_LongName_NotGreaterFullEqual,
        LongName_LessLess => return st::Token_LongName_LessLess,
        LongName_GreaterGreater => return st::Token_LongName_GreaterGreater,
        LongName_NotCupCap => return st::Token_LongName_NotCupCap,
        LongName_NotLess => return st::Token_LongName_NotLess,
        LongName_NotGreater => return st::Token_LongName_NotGreater,
        LongName_NotLessEqual => return st::Token_LongName_NotLessEqual,
        LongName_NotGreaterEqual => return st::Token_LongName_NotGreaterEqual,
        LongName_LessTilde => return st::Token_LongName_LessTilde,
        LongName_GreaterTilde => return st::Token_LongName_GreaterTilde,
        LongName_NotLessTilde => return st::Token_LongName_NotLessTilde,
        LongName_NotGreaterTilde => return st::Token_LongName_NotGreaterTilde,
        LongName_LessGreater => return st::Token_LongName_LessGreater,
        LongName_GreaterLess => return st::Token_LongName_GreaterLess,
        LongName_NotLessGreater => return st::Token_LongName_NotLessGreater,
        LongName_NotGreaterLess => return st::Token_LongName_NotGreaterLess,
        LongName_Precedes => return st::Token_LongName_Precedes,
        LongName_Succeeds => return st::Token_LongName_Succeeds,
        LongName_PrecedesSlantEqual => return st::Token_LongName_PrecedesSlantEqual,
        LongName_SucceedsSlantEqual => return st::Token_LongName_SucceedsSlantEqual,
        LongName_PrecedesTilde => return st::Token_LongName_PrecedesTilde,
        LongName_SucceedsTilde => return st::Token_LongName_SucceedsTilde,
        LongName_NotPrecedes => return st::Token_LongName_NotPrecedes,
        LongName_NotSucceeds => return st::Token_LongName_NotSucceeds,
        LongName_Subset => return st::Token_LongName_Subset,
        LongName_Superset => return st::Token_LongName_Superset,
        LongName_NotSubset => return st::Token_LongName_NotSubset,
        LongName_NotSuperset => return st::Token_LongName_NotSuperset,
        LongName_SubsetEqual => return st::Token_LongName_SubsetEqual,
        LongName_SupersetEqual => return st::Token_LongName_SupersetEqual,
        LongName_NotSubsetEqual => return st::Token_LongName_NotSubsetEqual,
        LongName_NotSupersetEqual => return st::Token_LongName_NotSupersetEqual,
        LongName_UnionPlus => return st::Token_LongName_UnionPlus,
        LongName_SquareSubset => return st::Token_LongName_SquareSubset,
        LongName_SquareSuperset => return st::Token_LongName_SquareSuperset,
        LongName_SquareSubsetEqual => return st::Token_LongName_SquareSubsetEqual,
        LongName_SquareSupersetEqual => return st::Token_LongName_SquareSupersetEqual,
        LongName_SquareIntersection => return st::Token_LongName_SquareIntersection,
        LongName_SquareUnion => return st::Token_LongName_SquareUnion,
        LongName_CirclePlus => return st::Token_LongName_CirclePlus,
        LongName_CircleMinus => return st::Token_LongName_CircleMinus,
        LongName_CircleTimes => return st::Token_LongName_CircleTimes,
        LongName_CircleDot => return st::Token_LongName_CircleDot,
        LongName_RightTee => return st::Token_LongName_RightTee,
        LongName_LeftTee => return st::Token_LongName_LeftTee,
        LongName_DownTee => return st::Token_LongName_DownTee,
        LongName_UpTee => return st::Token_LongName_UpTee,
        LongName_DoubleRightTee => return st::Token_LongName_DoubleRightTee,
        LongName_LeftTriangle => return st::Token_LongName_LeftTriangle,
        LongName_RightTriangle => return st::Token_LongName_RightTriangle,
        LongName_LeftTriangleEqual => return st::Token_LongName_LeftTriangleEqual,
        LongName_RightTriangleEqual => return st::Token_LongName_RightTriangleEqual,
        LongName_Xor => return st::Token_LongName_Xor,
        LongName_Nand => return st::Token_LongName_Nand,
        LongName_Nor => return st::Token_LongName_Nor,
        LongName_Wedge => return st::Token_LongName_Wedge,
        LongName_Vee => return st::Token_LongName_Vee,
        LongName_Intersection => return st::Token_LongName_Intersection,
        LongName_Union => return st::Token_LongName_Union,
        LongName_Diamond => return st::Token_LongName_Diamond,
        LongName_Star => return st::Token_LongName_Star,
        LongName_LessEqualGreater => return st::Token_LongName_LessEqualGreater,
        LongName_GreaterEqualLess => return st::Token_LongName_GreaterEqualLess,
        LongName_NotPrecedesSlantEqual => return st::Token_LongName_NotPrecedesSlantEqual,
        LongName_NotSucceedsSlantEqual => return st::Token_LongName_NotSucceedsSlantEqual,
        LongName_NotSquareSubsetEqual => return st::Token_LongName_NotSquareSubsetEqual,
        LongName_NotSquareSupersetEqual => return st::Token_LongName_NotSquareSupersetEqual,
        LongName_NotPrecedesTilde => return st::Token_LongName_NotPrecedesTilde,
        LongName_NotSucceedsTilde => return st::Token_LongName_NotSucceedsTilde,
        LongName_NotLeftTriangle => return st::Token_LongName_NotLeftTriangle,
        LongName_NotRightTriangle => return st::Token_LongName_NotRightTriangle,
        LongName_NotLeftTriangleEqual => return st::Token_LongName_NotLeftTriangleEqual,
        LongName_NotRightTriangleEqual => return st::Token_LongName_NotRightTriangleEqual,
        LongName_LeftCeiling => return st::Token_LongName_LeftCeiling,
        LongName_RightCeiling => return st::Token_LongName_RightCeiling,
        LongName_LeftFloor => return st::Token_LongName_LeftFloor,
        LongName_RightFloor => return st::Token_LongName_RightFloor,
        LongName_Cap => return st::Token_LongName_Cap,
        LongName_Cup => return st::Token_LongName_Cup,
        LongName_LeftAngleBracket => return st::Token_LongName_LeftAngleBracket,
        LongName_RightAngleBracket => return st::Token_LongName_RightAngleBracket,
        LongName_Perpendicular => return st::Token_LongName_Perpendicular,
        LongName_LongLeftArrow => return st::Token_LongName_LongLeftArrow,
        LongName_LongRightArrow => return st::Token_LongName_LongRightArrow,
        LongName_LongLeftRightArrow => return st::Token_LongName_LongLeftRightArrow,
        LongName_DoubleLongLeftArrow => return st::Token_LongName_DoubleLongLeftArrow,
        LongName_DoubleLongRightArrow => return st::Token_LongName_DoubleLongRightArrow,
        LongName_DoubleLongLeftRightArrow => return st::Token_LongName_DoubleLongLeftRightArrow,
        LongName_UpArrowBar => return st::Token_LongName_UpArrowBar,
        LongName_DownArrowBar => return st::Token_LongName_DownArrowBar,
        LongName_LeftRightVector => return st::Token_LongName_LeftRightVector,
        LongName_RightUpDownVector => return st::Token_LongName_RightUpDownVector,
        LongName_DownLeftRightVector => return st::Token_LongName_DownLeftRightVector,
        LongName_LeftUpDownVector => return st::Token_LongName_LeftUpDownVector,
        LongName_LeftVectorBar => return st::Token_LongName_LeftVectorBar,
        LongName_RightVectorBar => return st::Token_LongName_RightVectorBar,
        LongName_RightUpVectorBar => return st::Token_LongName_RightUpVectorBar,
        LongName_RightDownVectorBar => return st::Token_LongName_RightDownVectorBar,
        LongName_DownLeftVectorBar => return st::Token_LongName_DownLeftVectorBar,
        LongName_DownRightVectorBar => return st::Token_LongName_DownRightVectorBar,
        LongName_LeftUpVectorBar => return st::Token_LongName_LeftUpVectorBar,
        LongName_LeftDownVectorBar => return st::Token_LongName_LeftDownVectorBar,
        LongName_LeftTeeVector => return st::Token_LongName_LeftTeeVector,
        LongName_RightTeeVector => return st::Token_LongName_RightTeeVector,
        LongName_RightUpTeeVector => return st::Token_LongName_RightUpTeeVector,
        LongName_RightDownTeeVector => return st::Token_LongName_RightDownTeeVector,
        LongName_DownLeftTeeVector => return st::Token_LongName_DownLeftTeeVector,
        LongName_DownRightTeeVector => return st::Token_LongName_DownRightTeeVector,
        LongName_LeftUpTeeVector => return st::Token_LongName_LeftUpTeeVector,
        LongName_LeftDownTeeVector => return st::Token_LongName_LeftDownTeeVector,
        LongName_UpEquilibrium => return st::Token_LongName_UpEquilibrium,
        LongName_ReverseUpEquilibrium => return st::Token_LongName_ReverseUpEquilibrium,
        LongName_RoundImplies => return st::Token_LongName_RoundImplies,
        LongName_LeftTriangleBar => return st::Token_LongName_LeftTriangleBar,
        LongName_RightTriangleBar => return st::Token_LongName_RightTriangleBar,
        LongName_Equivalent => return st::Token_LongName_Equivalent,
        LongName_LessSlantEqual => return st::Token_LongName_LessSlantEqual,
        LongName_GreaterSlantEqual => return st::Token_LongName_GreaterSlantEqual,
        LongName_NestedLessLess => return st::Token_LongName_NestedLessLess,
        LongName_NestedGreaterGreater => return st::Token_LongName_NestedGreaterGreater,
        LongName_PrecedesEqual => return st::Token_LongName_PrecedesEqual,
        LongName_SucceedsEqual => return st::Token_LongName_SucceedsEqual,
        LongName_DoubleLeftTee => return st::Token_LongName_DoubleLeftTee,
        LongName_LeftDoubleBracket => return st::Token_LongName_LeftDoubleBracket,
        LongName_RightDoubleBracket => return st::Token_LongName_RightDoubleBracket,
        LongName_LeftAssociation => return st::Token_LongName_LeftAssociation,
        LongName_RightAssociation => return st::Token_LongName_RightAssociation,
        LongName_TwoWayRule => return st::Token_LongName_TwoWayRule,
        LongName_Piecewise => return st::Token_LongName_Piecewise,
        LongName_ImplicitPlus => return st::Token_LongName_ImplicitPlus,
        LongName_AutoLeftMatch => return st::Token_LongName_AutoLeftMatch,
        LongName_AutoRightMatch => return st::Token_LongName_AutoRightMatch,
        LongName_InvisiblePrefixScriptBase => return st::Token_LongName_InvisiblePrefixScriptBase,
        LongName_InvisiblePostfixScriptBase => return st::Token_LongName_InvisiblePostfixScriptBase,
        LongName_Transpose => return st::Token_LongName_Transpose,
        LongName_Conjugate => return st::Token_LongName_Conjugate,
        LongName_ConjugateTranspose => return st::Token_LongName_ConjugateTranspose,
        LongName_HermitianConjugate => return st::Token_LongName_HermitianConjugate,
        LongName_VerticalBar => return st::Token_LongName_VerticalBar,
        LongName_NotVerticalBar => return st::Token_LongName_NotVerticalBar,
        LongName_Distributed => return st::Token_LongName_Distributed,
        LongName_Conditioned => return st::Token_LongName_Conditioned,
        LongName_UndirectedEdge => return st::Token_LongName_UndirectedEdge,
        LongName_DirectedEdge => return st::Token_LongName_DirectedEdge,
        LongName_ContinuedFractionK => return st::Token_LongName_ContinuedFractionK,
        LongName_TensorProduct => return st::Token_LongName_TensorProduct,
        LongName_TensorWedge => return st::Token_LongName_TensorWedge,
        LongName_ProbabilityPr => return st::Token_LongName_ProbabilityPr,
        LongName_ExpectationE => return st::Token_LongName_ExpectationE,
        LongName_PermutationProduct => return st::Token_LongName_PermutationProduct,
        LongName_NotEqualTilde => return st::Token_LongName_NotEqualTilde,
        LongName_NotHumpEqual => return st::Token_LongName_NotHumpEqual,
        LongName_NotHumpDownHump => return st::Token_LongName_NotHumpDownHump,
        LongName_NotLeftTriangleBar => return st::Token_LongName_NotLeftTriangleBar,
        LongName_NotRightTriangleBar => return st::Token_LongName_NotRightTriangleBar,
        LongName_NotLessLess => return st::Token_LongName_NotLessLess,
        LongName_NotNestedLessLess => return st::Token_LongName_NotNestedLessLess,
        LongName_NotLessSlantEqual => return st::Token_LongName_NotLessSlantEqual,
        LongName_NotGreaterGreater => return st::Token_LongName_NotGreaterGreater,
        LongName_NotNestedGreaterGreater => return st::Token_LongName_NotNestedGreaterGreater,
        LongName_NotGreaterSlantEqual => return st::Token_LongName_NotGreaterSlantEqual,
        LongName_NotPrecedesEqual => return st::Token_LongName_NotPrecedesEqual,
        LongName_NotSucceedsEqual => return st::Token_LongName_NotSucceedsEqual,
        LongName_NotSquareSubset => return st::Token_LongName_NotSquareSubset,
        LongName_NotSquareSuperset => return st::Token_LongName_NotSquareSuperset,
        LongName_Equal => return st::Token_LongName_Equal,
        LongName_VerticalSeparator => return st::Token_LongName_VerticalSeparator,
        LongName_VectorGreater => return st::Token_LongName_VectorGreater,
        LongName_VectorGreaterEqual => return st::Token_LongName_VectorGreaterEqual,
        LongName_VectorLess => return st::Token_LongName_VectorLess,
        LongName_VectorLessEqual => return st::Token_LongName_VectorLessEqual,
        LongName_Limit => return st::Token_LongName_Limit,
        LongName_MaxLimit => return st::Token_LongName_MaxLimit,
        LongName_MinLimit => return st::Token_LongName_MinLimit,
        LongName_Cross => return st::Token_LongName_Cross,
        LongName_Function => return st::Token_LongName_Function,
        LongName_Xnor => return st::Token_LongName_Xnor,
        LongName_DiscreteShift => return st::Token_LongName_DiscreteShift,
        LongName_DifferenceDelta => return st::Token_LongName_DifferenceDelta,
        LongName_DiscreteRatio => return st::Token_LongName_DiscreteRatio,
        LongName_RuleDelayed => return st::Token_LongName_RuleDelayed,
        LongName_Square => return st::Token_LongName_Square,
        LongName_Rule => return st::Token_LongName_Rule,
        LongName_Implies => return st::Token_LongName_Implies,
        LongName_ShortRightArrow => return st::Token_LongName_ShortRightArrow,
        LongName_ShortLeftArrow => return st::Token_LongName_ShortLeftArrow,
        LongName_ShortUpArrow => return st::Token_LongName_ShortUpArrow,
        LongName_ShortDownArrow => return st::Token_LongName_ShortDownArrow,
        LongName_Application => return st::Token_LongName_Application,
        LongName_LeftBracketingBar => return st::Token_LongName_LeftBracketingBar,
        LongName_RightBracketingBar => return st::Token_LongName_RightBracketingBar,
        LongName_LeftDoubleBracketingBar => return st::Token_LongName_LeftDoubleBracketingBar,
        LongName_RightDoubleBracketingBar => return st::Token_LongName_RightDoubleBracketingBar,
        LongName_CapitalDifferentialD => return st::Token_LongName_CapitalDifferentialD,
        LongName_DifferentialD => return st::Token_LongName_DifferentialD,
        LongName_InvisibleComma => return st::Token_LongName_InvisibleComma,
        LongName_InvisibleApplication => return st::Token_LongName_InvisibleApplication,
        LongName_LongEqual => return st::Token_LongName_LongEqual,
        Count => return st::Token_Count,
        _ => panic!("Unhandled token type"),
    }
}

pub fn SymbolToToken(symbol: SymbolRef) -> Option<TokenKind> {
    use TokenKind::*;
    let token = match symbol {
        st::Token_Unknown => Unknown,
        st::EndOfFile => EndOfFile,
        st::Symbol => Symbol,
        st::String => String,
        st::Integer => Integer,
        st::Real => Real,
        st::Rational => Rational,
        st::Token_LinearSyntaxBlob => LinearSyntaxBlob,
        st::Token_Newline => InternalNewline,
        st::Token_Comment => Comment,
        st::Whitespace => Whitespace,
        st::Token_Buffer1 => Buffer1,
        st::Token_Newline => ToplevelNewline,
        st::Token_Buffer2 => Buffer2,
        st::Token_Buffer3 => Buffer3,
        st::Token_Buffer4 => Buffer4,
        st::Token_Error_ExpectedEqual => Error_ExpectedEqual,
        st::Token_Error_Number => Error_Number,
        st::Token_Error_UnhandledCharacter => Error_UnhandledCharacter,
        st::Token_Error_ExpectedLetterlike => Error_ExpectedLetterlike,
        st::Token_Error_Aborted => Error_Aborted,
        st::Token_Error_ExpectedOperand => Error_ExpectedOperand,
        st::Token_Error_ExpectedTag => Error_ExpectedTag,
        st::Token_Error_ExpectedFile => Error_ExpectedFile,
        st::Token_Error_UnexpectedCloser => Error_UnexpectedCloser,
        st::Token_Error_PrefixImplicitNull => Error_PrefixImplicitNull,
        st::Token_Error_InfixImplicitNull => Error_InfixImplicitNull,
        st::Token_Error_UnsafeCharacterEncoding => Error_UnsafeCharacterEncoding,
        st::Token_Error_UnterminatedComment => Error_UnterminatedComment,
        st::Token_Error_UnterminatedString => Error_UnterminatedString,
        st::Token_Error_UnterminatedFileString => Error_UnterminatedFileString,
        st::Token_Error_UnterminatedLinearSyntaxBlob => Error_UnterminatedLinearSyntaxBlob,
        st::Token_Error_UnsupportedToken => Error_UnsupportedToken,
        st::Token_Error_UnexpectedCommentCloser => Error_UnexpectedCommentCloser,
        st::Token_Error_End => Error_End,
        st::Token_Dot => Dot,
        st::Token_Colon => Colon,
        st::Token_OpenParen => OpenParen,
        st::Token_CloseParen => CloseParen,
        st::Token_OpenSquare => OpenSquare,
        st::Token_CloseSquare => CloseSquare,
        st::Token_Comma => Comma,
        st::Token_OpenCurly => OpenCurly,
        st::Token_CloseCurly => CloseCurly,
        st::Token_Equal => Equal,
        st::Token_Bang => Bang,
        st::Token_Under => Under,
        st::Token_Less => Less,
        st::Token_Greater => Greater,
        st::Token_Minus => Minus,
        st::Token_Bar => Bar,
        st::Token_Semi => Semi,
        st::Token_Hash => Hash,
        st::Token_Amp => Amp,
        st::Token_Slash => Slash,
        st::Token_At => At,
        st::Token_Plus => Plus,
        st::Token_Tilde => Tilde,
        st::Token_Star => Star,
        st::Token_Caret => Caret,
        st::Token_SingleQuote => SingleQuote,
        st::Token_Percent => Percent,
        st::Token_Question => Question,
        st::Token_DotDot => DotDot,
        st::Token_ColonColon => ColonColon,
        st::Token_ColonEqual => ColonEqual,
        st::Token_ColonGreater => ColonGreater,
        st::Token_EqualEqual => EqualEqual,
        st::Token_UnderUnder => UnderUnder,
        st::Token_UnderDot => UnderDot,
        st::Token_LessBar => LessBar,
        st::Token_LessLess => LessLess,
        st::Token_LessGreater => LessGreater,
        st::Token_LessEqual => LessEqual,
        st::Token_GreaterGreater => GreaterGreater,
        st::Token_GreaterEqual => GreaterEqual,
        st::Token_MinusGreater => MinusGreater,
        st::Token_MinusMinus => MinusMinus,
        st::Token_MinusEqual => MinusEqual,
        st::Token_BarBar => BarBar,
        st::Token_BarGreater => BarGreater,
        st::Token_SemiSemi => SemiSemi,
        st::Token_AmpAmp => AmpAmp,
        st::Token_SlashAt => SlashAt,
        st::Token_SlashSemi => SlashSemi,
        st::Token_SlashDot => SlashDot,
        st::Token_SlashSlash => SlashSlash,
        st::Token_SlashColon => SlashColon,
        st::Token_SlashEqual => SlashEqual,
        st::Token_SlashStar => SlashStar,
        st::Token_AtAt => AtAt,
        st::Token_AtStar => AtStar,
        st::Token_PlusPlus => PlusPlus,
        st::Token_PlusEqual => PlusEqual,
        st::Token_TildeTilde => TildeTilde,
        st::Token_StarEqual => StarEqual,
        st::Token_StarStar => StarStar,
        st::Token_CaretEqual => CaretEqual,
        st::Token_HashHash => HashHash,
        st::Token_BangEqual => BangEqual,
        st::Token_BangBang => BangBang,
        st::Token_QuestionQuestion => QuestionQuestion,
        st::Token_DotDotDot => DotDotDot,
        st::Token_EqualEqualEqual => EqualEqualEqual,
        st::Token_EqualBangEqual => EqualBangEqual,
        st::Token_UnderUnderUnder => UnderUnderUnder,
        st::Token_SlashSlashDot => SlashSlashDot,
        st::Token_AtAtAt => AtAtAt,
        st::Token_LessMinusGreater => LessMinusGreater,
        st::Token_SlashSlashAt => SlashSlashAt,
        st::Token_CaretColonEqual => CaretColonEqual,
        st::Token_GreaterGreaterGreater => GreaterGreaterGreater,
        st::Token_BarMinusGreater => BarMinusGreater,
        st::Token_SlashSlashEqual => SlashSlashEqual,
        st::Token_ColonColonOpenSquare => ColonColonOpenSquare,
        st::Token_PercentPercent => PercentPercent,
        st::Token_LinearSyntax_Bang => LinearSyntax_Bang,
        st::Token_LinearSyntax_CloseParen => LinearSyntax_CloseParen,
        st::Token_LinearSyntax_At => LinearSyntax_At,
        st::Token_LinearSyntax_Amp => LinearSyntax_Amp,
        st::Token_LinearSyntax_Star => LinearSyntax_Star,
        st::Token_LinearSyntax_Under => LinearSyntax_Under,
        st::Token_LinearSyntax_Caret => LinearSyntax_Caret,
        st::Token_LinearSyntax_Space => LinearSyntax_Space,
        st::Token_LinearSyntax_Percent => LinearSyntax_Percent,
        st::Token_LinearSyntax_Plus => LinearSyntax_Plus,
        st::Token_LinearSyntax_Slash => LinearSyntax_Slash,
        st::Token_LinearSyntax_BackTick => LinearSyntax_BackTick,
        st::Token_Fake_ImplicitTimes => Fake_ImplicitTimes,
        st::Token_Fake_ImplicitNull => Fake_ImplicitNull,
        st::Token_Fake_ImplicitOne => Fake_ImplicitOne,
        st::Token_Fake_ImplicitAll => Fake_ImplicitAll,
        st::Token_Boxes_OpenParenStar => Boxes_OpenParenStar,
        st::Token_Boxes_StarCloseParen => Boxes_StarCloseParen,
        st::Token_Boxes_MultiSingleQuote => Boxes_MultiSingleQuote,
        st::Token_Boxes_MultiWhitespace => Boxes_MultiWhitespace,
        st::Token_LongName_Not => LongName_Not,
        st::Token_LongName_PlusMinus => LongName_PlusMinus,
        st::Token_LongName_CenterDot => LongName_CenterDot,
        st::Token_LongName_Times => LongName_Times,
        st::Token_LongName_Divide => LongName_Divide,
        st::Token_LongName_OpenCurlyQuote => LongName_OpenCurlyQuote,
        st::Token_LongName_CloseCurlyQuote => LongName_CloseCurlyQuote,
        st::Token_LongName_OpenCurlyDoubleQuote => LongName_OpenCurlyDoubleQuote,
        st::Token_LongName_CloseCurlyDoubleQuote => LongName_CloseCurlyDoubleQuote,
        st::Token_LongName_InvisibleTimes => LongName_InvisibleTimes,
        st::Token_LongName_LeftArrow => LongName_LeftArrow,
        st::Token_LongName_UpArrow => LongName_UpArrow,
        st::Token_LongName_RightArrow => LongName_RightArrow,
        st::Token_LongName_DownArrow => LongName_DownArrow,
        st::Token_LongName_LeftRightArrow => LongName_LeftRightArrow,
        st::Token_LongName_UpDownArrow => LongName_UpDownArrow,
        st::Token_LongName_UpperLeftArrow => LongName_UpperLeftArrow,
        st::Token_LongName_UpperRightArrow => LongName_UpperRightArrow,
        st::Token_LongName_LowerRightArrow => LongName_LowerRightArrow,
        st::Token_LongName_LowerLeftArrow => LongName_LowerLeftArrow,
        st::Token_LongName_LeftTeeArrow => LongName_LeftTeeArrow,
        st::Token_LongName_UpTeeArrow => LongName_UpTeeArrow,
        st::Token_LongName_RightTeeArrow => LongName_RightTeeArrow,
        st::Token_LongName_DownTeeArrow => LongName_DownTeeArrow,
        st::Token_LongName_LeftVector => LongName_LeftVector,
        st::Token_LongName_DownLeftVector => LongName_DownLeftVector,
        st::Token_LongName_RightUpVector => LongName_RightUpVector,
        st::Token_LongName_LeftUpVector => LongName_LeftUpVector,
        st::Token_LongName_RightVector => LongName_RightVector,
        st::Token_LongName_DownRightVector => LongName_DownRightVector,
        st::Token_LongName_RightDownVector => LongName_RightDownVector,
        st::Token_LongName_LeftDownVector => LongName_LeftDownVector,
        st::Token_LongName_RightArrowLeftArrow => LongName_RightArrowLeftArrow,
        st::Token_LongName_UpArrowDownArrow => LongName_UpArrowDownArrow,
        st::Token_LongName_LeftArrowRightArrow => LongName_LeftArrowRightArrow,
        st::Token_LongName_ReverseEquilibrium => LongName_ReverseEquilibrium,
        st::Token_LongName_Equilibrium => LongName_Equilibrium,
        st::Token_LongName_DoubleLeftArrow => LongName_DoubleLeftArrow,
        st::Token_LongName_DoubleUpArrow => LongName_DoubleUpArrow,
        st::Token_LongName_DoubleRightArrow => LongName_DoubleRightArrow,
        st::Token_LongName_DoubleDownArrow => LongName_DoubleDownArrow,
        st::Token_LongName_DoubleLeftRightArrow => LongName_DoubleLeftRightArrow,
        st::Token_LongName_DoubleUpDownArrow => LongName_DoubleUpDownArrow,
        st::Token_LongName_LeftArrowBar => LongName_LeftArrowBar,
        st::Token_LongName_RightArrowBar => LongName_RightArrowBar,
        st::Token_LongName_DownArrowUpArrow => LongName_DownArrowUpArrow,
        st::Token_LongName_ForAll => LongName_ForAll,
        st::Token_LongName_PartialD => LongName_PartialD,
        st::Token_LongName_Exists => LongName_Exists,
        st::Token_LongName_NotExists => LongName_NotExists,
        st::Token_LongName_Del => LongName_Del,
        st::Token_LongName_Element => LongName_Element,
        st::Token_LongName_NotElement => LongName_NotElement,
        st::Token_LongName_ReverseElement => LongName_ReverseElement,
        st::Token_LongName_NotReverseElement => LongName_NotReverseElement,
        st::Token_LongName_SuchThat => LongName_SuchThat,
        st::Token_LongName_Product => LongName_Product,
        st::Token_LongName_Coproduct => LongName_Coproduct,
        st::Token_LongName_Sum => LongName_Sum,
        st::Token_LongName_Minus => LongName_Minus,
        st::Token_LongName_MinusPlus => LongName_MinusPlus,
        st::Token_LongName_DivisionSlash => LongName_DivisionSlash,
        st::Token_LongName_Backslash => LongName_Backslash,
        st::Token_LongName_SmallCircle => LongName_SmallCircle,
        st::Token_LongName_Sqrt => LongName_Sqrt,
        st::Token_LongName_CubeRoot => LongName_CubeRoot,
        st::Token_LongName_Proportional => LongName_Proportional,
        st::Token_LongName_Divides => LongName_Divides,
        st::Token_LongName_DoubleVerticalBar => LongName_DoubleVerticalBar,
        st::Token_LongName_NotDoubleVerticalBar => LongName_NotDoubleVerticalBar,
        st::Token_LongName_And => LongName_And,
        st::Token_LongName_Or => LongName_Or,
        st::Token_LongName_Integral => LongName_Integral,
        st::Token_LongName_ContourIntegral => LongName_ContourIntegral,
        st::Token_LongName_DoubleContourIntegral => LongName_DoubleContourIntegral,
        st::Token_LongName_ClockwiseContourIntegral => LongName_ClockwiseContourIntegral,
        st::Token_LongName_CounterClockwiseContourIntegral => LongName_CounterClockwiseContourIntegral,
        st::Token_LongName_Therefore => LongName_Therefore,
        st::Token_LongName_Because => LongName_Because,
        st::Token_LongName_Colon => LongName_Colon,
        st::Token_LongName_Proportion => LongName_Proportion,
        st::Token_LongName_Tilde => LongName_Tilde,
        st::Token_LongName_VerticalTilde => LongName_VerticalTilde,
        st::Token_LongName_NotTilde => LongName_NotTilde,
        st::Token_LongName_EqualTilde => LongName_EqualTilde,
        st::Token_LongName_TildeEqual => LongName_TildeEqual,
        st::Token_LongName_NotTildeEqual => LongName_NotTildeEqual,
        st::Token_LongName_TildeFullEqual => LongName_TildeFullEqual,
        st::Token_LongName_NotTildeFullEqual => LongName_NotTildeFullEqual,
        st::Token_LongName_TildeTilde => LongName_TildeTilde,
        st::Token_LongName_NotTildeTilde => LongName_NotTildeTilde,
        st::Token_LongName_CupCap => LongName_CupCap,
        st::Token_LongName_HumpDownHump => LongName_HumpDownHump,
        st::Token_LongName_HumpEqual => LongName_HumpEqual,
        st::Token_LongName_DotEqual => LongName_DotEqual,
        st::Token_LongName_NotEqual => LongName_NotEqual,
        st::Token_LongName_Congruent => LongName_Congruent,
        st::Token_LongName_NotCongruent => LongName_NotCongruent,
        st::Token_LongName_LessEqual => LongName_LessEqual,
        st::Token_LongName_GreaterEqual => LongName_GreaterEqual,
        st::Token_LongName_LessFullEqual => LongName_LessFullEqual,
        st::Token_LongName_GreaterFullEqual => LongName_GreaterFullEqual,
        st::Token_LongName_NotLessFullEqual => LongName_NotLessFullEqual,
        st::Token_LongName_NotGreaterFullEqual => LongName_NotGreaterFullEqual,
        st::Token_LongName_LessLess => LongName_LessLess,
        st::Token_LongName_GreaterGreater => LongName_GreaterGreater,
        st::Token_LongName_NotCupCap => LongName_NotCupCap,
        st::Token_LongName_NotLess => LongName_NotLess,
        st::Token_LongName_NotGreater => LongName_NotGreater,
        st::Token_LongName_NotLessEqual => LongName_NotLessEqual,
        st::Token_LongName_NotGreaterEqual => LongName_NotGreaterEqual,
        st::Token_LongName_LessTilde => LongName_LessTilde,
        st::Token_LongName_GreaterTilde => LongName_GreaterTilde,
        st::Token_LongName_NotLessTilde => LongName_NotLessTilde,
        st::Token_LongName_NotGreaterTilde => LongName_NotGreaterTilde,
        st::Token_LongName_LessGreater => LongName_LessGreater,
        st::Token_LongName_GreaterLess => LongName_GreaterLess,
        st::Token_LongName_NotLessGreater => LongName_NotLessGreater,
        st::Token_LongName_NotGreaterLess => LongName_NotGreaterLess,
        st::Token_LongName_Precedes => LongName_Precedes,
        st::Token_LongName_Succeeds => LongName_Succeeds,
        st::Token_LongName_PrecedesSlantEqual => LongName_PrecedesSlantEqual,
        st::Token_LongName_SucceedsSlantEqual => LongName_SucceedsSlantEqual,
        st::Token_LongName_PrecedesTilde => LongName_PrecedesTilde,
        st::Token_LongName_SucceedsTilde => LongName_SucceedsTilde,
        st::Token_LongName_NotPrecedes => LongName_NotPrecedes,
        st::Token_LongName_NotSucceeds => LongName_NotSucceeds,
        st::Token_LongName_Subset => LongName_Subset,
        st::Token_LongName_Superset => LongName_Superset,
        st::Token_LongName_NotSubset => LongName_NotSubset,
        st::Token_LongName_NotSuperset => LongName_NotSuperset,
        st::Token_LongName_SubsetEqual => LongName_SubsetEqual,
        st::Token_LongName_SupersetEqual => LongName_SupersetEqual,
        st::Token_LongName_NotSubsetEqual => LongName_NotSubsetEqual,
        st::Token_LongName_NotSupersetEqual => LongName_NotSupersetEqual,
        st::Token_LongName_UnionPlus => LongName_UnionPlus,
        st::Token_LongName_SquareSubset => LongName_SquareSubset,
        st::Token_LongName_SquareSuperset => LongName_SquareSuperset,
        st::Token_LongName_SquareSubsetEqual => LongName_SquareSubsetEqual,
        st::Token_LongName_SquareSupersetEqual => LongName_SquareSupersetEqual,
        st::Token_LongName_SquareIntersection => LongName_SquareIntersection,
        st::Token_LongName_SquareUnion => LongName_SquareUnion,
        st::Token_LongName_CirclePlus => LongName_CirclePlus,
        st::Token_LongName_CircleMinus => LongName_CircleMinus,
        st::Token_LongName_CircleTimes => LongName_CircleTimes,
        st::Token_LongName_CircleDot => LongName_CircleDot,
        st::Token_LongName_RightTee => LongName_RightTee,
        st::Token_LongName_LeftTee => LongName_LeftTee,
        st::Token_LongName_DownTee => LongName_DownTee,
        st::Token_LongName_UpTee => LongName_UpTee,
        st::Token_LongName_DoubleRightTee => LongName_DoubleRightTee,
        st::Token_LongName_LeftTriangle => LongName_LeftTriangle,
        st::Token_LongName_RightTriangle => LongName_RightTriangle,
        st::Token_LongName_LeftTriangleEqual => LongName_LeftTriangleEqual,
        st::Token_LongName_RightTriangleEqual => LongName_RightTriangleEqual,
        st::Token_LongName_Xor => LongName_Xor,
        st::Token_LongName_Nand => LongName_Nand,
        st::Token_LongName_Nor => LongName_Nor,
        st::Token_LongName_Wedge => LongName_Wedge,
        st::Token_LongName_Vee => LongName_Vee,
        st::Token_LongName_Intersection => LongName_Intersection,
        st::Token_LongName_Union => LongName_Union,
        st::Token_LongName_Diamond => LongName_Diamond,
        st::Token_LongName_Star => LongName_Star,
        st::Token_LongName_LessEqualGreater => LongName_LessEqualGreater,
        st::Token_LongName_GreaterEqualLess => LongName_GreaterEqualLess,
        st::Token_LongName_NotPrecedesSlantEqual => LongName_NotPrecedesSlantEqual,
        st::Token_LongName_NotSucceedsSlantEqual => LongName_NotSucceedsSlantEqual,
        st::Token_LongName_NotSquareSubsetEqual => LongName_NotSquareSubsetEqual,
        st::Token_LongName_NotSquareSupersetEqual => LongName_NotSquareSupersetEqual,
        st::Token_LongName_NotPrecedesTilde => LongName_NotPrecedesTilde,
        st::Token_LongName_NotSucceedsTilde => LongName_NotSucceedsTilde,
        st::Token_LongName_NotLeftTriangle => LongName_NotLeftTriangle,
        st::Token_LongName_NotRightTriangle => LongName_NotRightTriangle,
        st::Token_LongName_NotLeftTriangleEqual => LongName_NotLeftTriangleEqual,
        st::Token_LongName_NotRightTriangleEqual => LongName_NotRightTriangleEqual,
        st::Token_LongName_LeftCeiling => LongName_LeftCeiling,
        st::Token_LongName_RightCeiling => LongName_RightCeiling,
        st::Token_LongName_LeftFloor => LongName_LeftFloor,
        st::Token_LongName_RightFloor => LongName_RightFloor,
        st::Token_LongName_Cap => LongName_Cap,
        st::Token_LongName_Cup => LongName_Cup,
        st::Token_LongName_LeftAngleBracket => LongName_LeftAngleBracket,
        st::Token_LongName_RightAngleBracket => LongName_RightAngleBracket,
        st::Token_LongName_Perpendicular => LongName_Perpendicular,
        st::Token_LongName_LongLeftArrow => LongName_LongLeftArrow,
        st::Token_LongName_LongRightArrow => LongName_LongRightArrow,
        st::Token_LongName_LongLeftRightArrow => LongName_LongLeftRightArrow,
        st::Token_LongName_DoubleLongLeftArrow => LongName_DoubleLongLeftArrow,
        st::Token_LongName_DoubleLongRightArrow => LongName_DoubleLongRightArrow,
        st::Token_LongName_DoubleLongLeftRightArrow => LongName_DoubleLongLeftRightArrow,
        st::Token_LongName_UpArrowBar => LongName_UpArrowBar,
        st::Token_LongName_DownArrowBar => LongName_DownArrowBar,
        st::Token_LongName_LeftRightVector => LongName_LeftRightVector,
        st::Token_LongName_RightUpDownVector => LongName_RightUpDownVector,
        st::Token_LongName_DownLeftRightVector => LongName_DownLeftRightVector,
        st::Token_LongName_LeftUpDownVector => LongName_LeftUpDownVector,
        st::Token_LongName_LeftVectorBar => LongName_LeftVectorBar,
        st::Token_LongName_RightVectorBar => LongName_RightVectorBar,
        st::Token_LongName_RightUpVectorBar => LongName_RightUpVectorBar,
        st::Token_LongName_RightDownVectorBar => LongName_RightDownVectorBar,
        st::Token_LongName_DownLeftVectorBar => LongName_DownLeftVectorBar,
        st::Token_LongName_DownRightVectorBar => LongName_DownRightVectorBar,
        st::Token_LongName_LeftUpVectorBar => LongName_LeftUpVectorBar,
        st::Token_LongName_LeftDownVectorBar => LongName_LeftDownVectorBar,
        st::Token_LongName_LeftTeeVector => LongName_LeftTeeVector,
        st::Token_LongName_RightTeeVector => LongName_RightTeeVector,
        st::Token_LongName_RightUpTeeVector => LongName_RightUpTeeVector,
        st::Token_LongName_RightDownTeeVector => LongName_RightDownTeeVector,
        st::Token_LongName_DownLeftTeeVector => LongName_DownLeftTeeVector,
        st::Token_LongName_DownRightTeeVector => LongName_DownRightTeeVector,
        st::Token_LongName_LeftUpTeeVector => LongName_LeftUpTeeVector,
        st::Token_LongName_LeftDownTeeVector => LongName_LeftDownTeeVector,
        st::Token_LongName_UpEquilibrium => LongName_UpEquilibrium,
        st::Token_LongName_ReverseUpEquilibrium => LongName_ReverseUpEquilibrium,
        st::Token_LongName_RoundImplies => LongName_RoundImplies,
        st::Token_LongName_LeftTriangleBar => LongName_LeftTriangleBar,
        st::Token_LongName_RightTriangleBar => LongName_RightTriangleBar,
        st::Token_LongName_Equivalent => LongName_Equivalent,
        st::Token_LongName_LessSlantEqual => LongName_LessSlantEqual,
        st::Token_LongName_GreaterSlantEqual => LongName_GreaterSlantEqual,
        st::Token_LongName_NestedLessLess => LongName_NestedLessLess,
        st::Token_LongName_NestedGreaterGreater => LongName_NestedGreaterGreater,
        st::Token_LongName_PrecedesEqual => LongName_PrecedesEqual,
        st::Token_LongName_SucceedsEqual => LongName_SucceedsEqual,
        st::Token_LongName_DoubleLeftTee => LongName_DoubleLeftTee,
        st::Token_LongName_LeftDoubleBracket => LongName_LeftDoubleBracket,
        st::Token_LongName_RightDoubleBracket => LongName_RightDoubleBracket,
        st::Token_LongName_LeftAssociation => LongName_LeftAssociation,
        st::Token_LongName_RightAssociation => LongName_RightAssociation,
        st::Token_LongName_TwoWayRule => LongName_TwoWayRule,
        st::Token_LongName_Piecewise => LongName_Piecewise,
        st::Token_LongName_ImplicitPlus => LongName_ImplicitPlus,
        st::Token_LongName_AutoLeftMatch => LongName_AutoLeftMatch,
        st::Token_LongName_AutoRightMatch => LongName_AutoRightMatch,
        st::Token_LongName_InvisiblePrefixScriptBase => LongName_InvisiblePrefixScriptBase,
        st::Token_LongName_InvisiblePostfixScriptBase => LongName_InvisiblePostfixScriptBase,
        st::Token_LongName_Transpose => LongName_Transpose,
        st::Token_LongName_Conjugate => LongName_Conjugate,
        st::Token_LongName_ConjugateTranspose => LongName_ConjugateTranspose,
        st::Token_LongName_HermitianConjugate => LongName_HermitianConjugate,
        st::Token_LongName_VerticalBar => LongName_VerticalBar,
        st::Token_LongName_NotVerticalBar => LongName_NotVerticalBar,
        st::Token_LongName_Distributed => LongName_Distributed,
        st::Token_LongName_Conditioned => LongName_Conditioned,
        st::Token_LongName_UndirectedEdge => LongName_UndirectedEdge,
        st::Token_LongName_DirectedEdge => LongName_DirectedEdge,
        st::Token_LongName_ContinuedFractionK => LongName_ContinuedFractionK,
        st::Token_LongName_TensorProduct => LongName_TensorProduct,
        st::Token_LongName_TensorWedge => LongName_TensorWedge,
        st::Token_LongName_ProbabilityPr => LongName_ProbabilityPr,
        st::Token_LongName_ExpectationE => LongName_ExpectationE,
        st::Token_LongName_PermutationProduct => LongName_PermutationProduct,
        st::Token_LongName_NotEqualTilde => LongName_NotEqualTilde,
        st::Token_LongName_NotHumpEqual => LongName_NotHumpEqual,
        st::Token_LongName_NotHumpDownHump => LongName_NotHumpDownHump,
        st::Token_LongName_NotLeftTriangleBar => LongName_NotLeftTriangleBar,
        st::Token_LongName_NotRightTriangleBar => LongName_NotRightTriangleBar,
        st::Token_LongName_NotLessLess => LongName_NotLessLess,
        st::Token_LongName_NotNestedLessLess => LongName_NotNestedLessLess,
        st::Token_LongName_NotLessSlantEqual => LongName_NotLessSlantEqual,
        st::Token_LongName_NotGreaterGreater => LongName_NotGreaterGreater,
        st::Token_LongName_NotNestedGreaterGreater => LongName_NotNestedGreaterGreater,
        st::Token_LongName_NotGreaterSlantEqual => LongName_NotGreaterSlantEqual,
        st::Token_LongName_NotPrecedesEqual => LongName_NotPrecedesEqual,
        st::Token_LongName_NotSucceedsEqual => LongName_NotSucceedsEqual,
        st::Token_LongName_NotSquareSubset => LongName_NotSquareSubset,
        st::Token_LongName_NotSquareSuperset => LongName_NotSquareSuperset,
        st::Token_LongName_Equal => LongName_Equal,
        st::Token_LongName_VerticalSeparator => LongName_VerticalSeparator,
        st::Token_LongName_VectorGreater => LongName_VectorGreater,
        st::Token_LongName_VectorGreaterEqual => LongName_VectorGreaterEqual,
        st::Token_LongName_VectorLess => LongName_VectorLess,
        st::Token_LongName_VectorLessEqual => LongName_VectorLessEqual,
        st::Token_LongName_Limit => LongName_Limit,
        st::Token_LongName_MaxLimit => LongName_MaxLimit,
        st::Token_LongName_MinLimit => LongName_MinLimit,
        st::Token_LongName_Cross => LongName_Cross,
        st::Token_LongName_Function => LongName_Function,
        st::Token_LongName_Xnor => LongName_Xnor,
        st::Token_LongName_DiscreteShift => LongName_DiscreteShift,
        st::Token_LongName_DifferenceDelta => LongName_DifferenceDelta,
        st::Token_LongName_DiscreteRatio => LongName_DiscreteRatio,
        st::Token_LongName_RuleDelayed => LongName_RuleDelayed,
        st::Token_LongName_Square => LongName_Square,
        st::Token_LongName_Rule => LongName_Rule,
        st::Token_LongName_Implies => LongName_Implies,
        st::Token_LongName_ShortRightArrow => LongName_ShortRightArrow,
        st::Token_LongName_ShortLeftArrow => LongName_ShortLeftArrow,
        st::Token_LongName_ShortUpArrow => LongName_ShortUpArrow,
        st::Token_LongName_ShortDownArrow => LongName_ShortDownArrow,
        st::Token_LongName_Application => LongName_Application,
        st::Token_LongName_LeftBracketingBar => LongName_LeftBracketingBar,
        st::Token_LongName_RightBracketingBar => LongName_RightBracketingBar,
        st::Token_LongName_LeftDoubleBracketingBar => LongName_LeftDoubleBracketingBar,
        st::Token_LongName_RightDoubleBracketingBar => LongName_RightDoubleBracketingBar,
        st::Token_LongName_CapitalDifferentialD => LongName_CapitalDifferentialD,
        st::Token_LongName_DifferentialD => LongName_DifferentialD,
        st::Token_LongName_InvisibleComma => LongName_InvisibleComma,
        st::Token_LongName_InvisibleApplication => LongName_InvisibleApplication,
        st::Token_LongName_LongEqual => LongName_LongEqual,
        st::Token_Count => Count,
        _ => return None,
    };

    Some(token)
}
