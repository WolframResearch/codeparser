
//
// AUTO GENERATED FILE
// DO NOT MODIFY
//

use crate::symbol::Symbol;

//
// All token enums
//

#[allow(non_camel_case_types)]
#[rustfmt::skip]
#[derive(num_enum::TryFromPrimitive)]
#[derive(Debug, Copy, Clone, PartialEq)]
#[repr(u16)]
pub enum TokenEnum {
    TOKEN_UNKNOWN = 0, // { group2Bits:0, group1Bits:0, enum:0, 0b0_0000_0000 }
    TOKEN_ENDOFFILE = 2049, // { group2Bits:2048, group1Bits:0, enum:1, 0b0_0000_0001 }
    TOKEN_SYMBOL = 514, // { group2Bits:0, group1Bits:512, enum:2, 0b0_0000_0010 }
    TOKEN_STRING = 515, // { group2Bits:0, group1Bits:512, enum:3, 0b0_0000_0011 }
    TOKEN_INTEGER = 516, // { group2Bits:0, group1Bits:512, enum:4, 0b0_0000_0100 }
    TOKEN_REAL = 517, // { group2Bits:0, group1Bits:512, enum:5, 0b0_0000_0101 }
    TOKEN_RATIONAL = 518, // { group2Bits:0, group1Bits:512, enum:6, 0b0_0000_0110 }
    TOKEN_LINEARSYNTAXBLOB = 519, // { group2Bits:0, group1Bits:512, enum:7, 0b0_0000_0111 }
    TOKEN_INTERNALNEWLINE = 8, // { group2Bits:0, group1Bits:0, enum:8, 0b0_0000_1000 }
    TOKEN_COMMENT = 9, // { group2Bits:0, group1Bits:0, enum:9, 0b0_0000_1001 }
    TOKEN_WHITESPACE = 10, // { group2Bits:0, group1Bits:0, enum:10, 0b0_0000_1010 }
    TOKEN_BUFFER1 = 11, // { group2Bits:0, group1Bits:0, enum:11, 0b0_0000_1011 }
    TOKEN_TOPLEVELNEWLINE = 12, // { group2Bits:0, group1Bits:0, enum:12, 0b0_0000_1100 }
    TOKEN_BUFFER2 = 13, // { group2Bits:0, group1Bits:0, enum:13, 0b0_0000_1101 }
    TOKEN_BUFFER3 = 14, // { group2Bits:0, group1Bits:0, enum:14, 0b0_0000_1110 }
    TOKEN_BUFFER4 = 15, // { group2Bits:0, group1Bits:0, enum:15, 0b0_0000_1111 }
    TOKEN_ERROR_EXPECTEDEQUAL = 1552, // { group2Bits:0, group1Bits:1536, enum:16, 0b0_0001_0000 }
    TOKEN_ERROR_NUMBER = 1553, // { group2Bits:0, group1Bits:1536, enum:17, 0b0_0001_0001 }
    TOKEN_ERROR_UNHANDLEDCHARACTER = 1554, // { group2Bits:0, group1Bits:1536, enum:18, 0b0_0001_0010 }
    TOKEN_ERROR_EXPECTEDLETTERLIKE = 1555, // { group2Bits:0, group1Bits:1536, enum:19, 0b0_0001_0011 }
    TOKEN_ERROR_ABORTED = 3604, // { group2Bits:2048, group1Bits:1536, enum:20, 0b0_0001_0100 }
    TOKEN_ERROR_EXPECTEDOPERAND = 3605, // { group2Bits:2048, group1Bits:1536, enum:21, 0b0_0001_0101 }
    TOKEN_ERROR_EXPECTEDTAG = 3606, // { group2Bits:2048, group1Bits:1536, enum:22, 0b0_0001_0110 }
    TOKEN_ERROR_EXPECTEDFILE = 3607, // { group2Bits:2048, group1Bits:1536, enum:23, 0b0_0001_0111 }
    TOKEN_ERROR_UNEXPECTEDCLOSER = 1560, // { group2Bits:0, group1Bits:1536, enum:24, 0b0_0001_1000 }
    TOKEN_ERROR_PREFIXIMPLICITNULL = 3609, // { group2Bits:2048, group1Bits:1536, enum:25, 0b0_0001_1001 }
    TOKEN_ERROR_INFIXIMPLICITNULL = 3610, // { group2Bits:2048, group1Bits:1536, enum:26, 0b0_0001_1010 }
    TOKEN_ERROR_UNSAFECHARACTERENCODING = 1563, // { group2Bits:0, group1Bits:1536, enum:27, 0b0_0001_1011 }
    TOKEN_ERROR_UNTERMINATEDCOMMENT = 1564, // { group2Bits:0, group1Bits:1536, enum:28, 0b0_0001_1100 }
    TOKEN_ERROR_UNTERMINATED_FIRST = 28, // { group2Bits:0, group1Bits:0, enum:28, 0b0_0001_1100 }
    TOKEN_ERROR_UNTERMINATEDSTRING = 1565, // { group2Bits:0, group1Bits:1536, enum:29, 0b0_0001_1101 }
    TOKEN_ERROR_UNTERMINATEDFILESTRING = 1566, // { group2Bits:0, group1Bits:1536, enum:30, 0b0_0001_1110 }
    TOKEN_ERROR_UNTERMINATEDLINEARSYNTAXBLOB = 1567, // { group2Bits:0, group1Bits:1536, enum:31, 0b0_0001_1111 }
    TOKEN_ERROR_UNSUPPORTEDTOKEN = 1568, // { group2Bits:0, group1Bits:1536, enum:32, 0b0_0010_0000 }
    TOKEN_ERROR_UNTERMINATED_END = 32, // { group2Bits:0, group1Bits:0, enum:32, 0b0_0010_0000 }
    TOKEN_ERROR_UNEXPECTEDCOMMENTCLOSER = 1569, // { group2Bits:0, group1Bits:1536, enum:33, 0b0_0010_0001 }
    TOKEN_ERROR_END = 1570, // { group2Bits:0, group1Bits:1536, enum:34, 0b0_0010_0010 }
    TOKEN_DOT = 35, // { group2Bits:0, group1Bits:0, enum:35, 0b0_0010_0011 }
    TOKEN_COLON = 36, // { group2Bits:0, group1Bits:0, enum:36, 0b0_0010_0100 }
    TOKEN_OPENPAREN = 549, // { group2Bits:0, group1Bits:512, enum:37, 0b0_0010_0101 }
    TOKEN_CLOSEPAREN = 1062, // { group2Bits:0, group1Bits:1024, enum:38, 0b0_0010_0110 }
    TOKEN_OPENSQUARE = 39, // { group2Bits:0, group1Bits:0, enum:39, 0b0_0010_0111 }
    TOKEN_CLOSESQUARE = 1064, // { group2Bits:0, group1Bits:1024, enum:40, 0b0_0010_1000 }
    TOKEN_COMMA = 41, // { group2Bits:0, group1Bits:0, enum:41, 0b0_0010_1001 }
    TOKEN_OPENCURLY = 554, // { group2Bits:0, group1Bits:512, enum:42, 0b0_0010_1010 }
    TOKEN_CLOSECURLY = 1067, // { group2Bits:0, group1Bits:1024, enum:43, 0b0_0010_1011 }
    TOKEN_EQUAL = 44, // { group2Bits:0, group1Bits:0, enum:44, 0b0_0010_1100 }
    TOKEN_BANG = 557, // { group2Bits:0, group1Bits:512, enum:45, 0b0_0010_1101 }
    TOKEN_UNDER = 558, // { group2Bits:0, group1Bits:512, enum:46, 0b0_0010_1110 }
    TOKEN_LESS = 47, // { group2Bits:0, group1Bits:0, enum:47, 0b0_0010_1111 }
    TOKEN_GREATER = 48, // { group2Bits:0, group1Bits:0, enum:48, 0b0_0011_0000 }
    TOKEN_MINUS = 561, // { group2Bits:0, group1Bits:512, enum:49, 0b0_0011_0001 }
    TOKEN_BAR = 50, // { group2Bits:0, group1Bits:0, enum:50, 0b0_0011_0010 }
    TOKEN_SEMI = 51, // { group2Bits:0, group1Bits:0, enum:51, 0b0_0011_0011 }
    TOKEN_HASH = 564, // { group2Bits:0, group1Bits:512, enum:52, 0b0_0011_0100 }
    TOKEN_AMP = 53, // { group2Bits:0, group1Bits:0, enum:53, 0b0_0011_0101 }
    TOKEN_SLASH = 54, // { group2Bits:0, group1Bits:0, enum:54, 0b0_0011_0110 }
    TOKEN_AT = 55, // { group2Bits:0, group1Bits:0, enum:55, 0b0_0011_0111 }
    TOKEN_PLUS = 568, // { group2Bits:0, group1Bits:512, enum:56, 0b0_0011_1000 }
    TOKEN_TILDE = 57, // { group2Bits:0, group1Bits:0, enum:57, 0b0_0011_1001 }
    TOKEN_STAR = 58, // { group2Bits:0, group1Bits:0, enum:58, 0b0_0011_1010 }
    TOKEN_CARET = 59, // { group2Bits:0, group1Bits:0, enum:59, 0b0_0011_1011 }
    TOKEN_SINGLEQUOTE = 60, // { group2Bits:0, group1Bits:0, enum:60, 0b0_0011_1100 }
    TOKEN_PERCENT = 573, // { group2Bits:0, group1Bits:512, enum:61, 0b0_0011_1101 }
    TOKEN_QUESTION = 62, // { group2Bits:0, group1Bits:0, enum:62, 0b0_0011_1110 }
    TOKEN_DOTDOT = 63, // { group2Bits:0, group1Bits:0, enum:63, 0b0_0011_1111 }
    TOKEN_COLONCOLON = 64, // { group2Bits:0, group1Bits:0, enum:64, 0b0_0100_0000 }
    TOKEN_COLONEQUAL = 65, // { group2Bits:0, group1Bits:0, enum:65, 0b0_0100_0001 }
    TOKEN_COLONGREATER = 66, // { group2Bits:0, group1Bits:0, enum:66, 0b0_0100_0010 }
    TOKEN_EQUALEQUAL = 67, // { group2Bits:0, group1Bits:0, enum:67, 0b0_0100_0011 }
    TOKEN_UNDERUNDER = 580, // { group2Bits:0, group1Bits:512, enum:68, 0b0_0100_0100 }
    TOKEN_UNDERDOT = 581, // { group2Bits:0, group1Bits:512, enum:69, 0b0_0100_0101 }
    TOKEN_LESSBAR = 582, // { group2Bits:0, group1Bits:512, enum:70, 0b0_0100_0110 }
    TOKEN_LESSLESS = 583, // { group2Bits:0, group1Bits:512, enum:71, 0b0_0100_0111 }
    TOKEN_LESSGREATER = 72, // { group2Bits:0, group1Bits:0, enum:72, 0b0_0100_1000 }
    TOKEN_LESSEQUAL = 73, // { group2Bits:0, group1Bits:0, enum:73, 0b0_0100_1001 }
    TOKEN_GREATERGREATER = 74, // { group2Bits:0, group1Bits:0, enum:74, 0b0_0100_1010 }
    TOKEN_GREATEREQUAL = 75, // { group2Bits:0, group1Bits:0, enum:75, 0b0_0100_1011 }
    TOKEN_MINUSGREATER = 76, // { group2Bits:0, group1Bits:0, enum:76, 0b0_0100_1100 }
    TOKEN_MINUSMINUS = 589, // { group2Bits:0, group1Bits:512, enum:77, 0b0_0100_1101 }
    TOKEN_MINUSEQUAL = 78, // { group2Bits:0, group1Bits:0, enum:78, 0b0_0100_1110 }
    TOKEN_BARBAR = 79, // { group2Bits:0, group1Bits:0, enum:79, 0b0_0100_1111 }
    TOKEN_BARGREATER = 1104, // { group2Bits:0, group1Bits:1024, enum:80, 0b0_0101_0000 }
    TOKEN_SEMISEMI = 593, // { group2Bits:0, group1Bits:512, enum:81, 0b0_0101_0001 }
    TOKEN_AMPAMP = 82, // { group2Bits:0, group1Bits:0, enum:82, 0b0_0101_0010 }
    TOKEN_SLASHAT = 83, // { group2Bits:0, group1Bits:0, enum:83, 0b0_0101_0011 }
    TOKEN_SLASHSEMI = 84, // { group2Bits:0, group1Bits:0, enum:84, 0b0_0101_0100 }
    TOKEN_SLASHDOT = 85, // { group2Bits:0, group1Bits:0, enum:85, 0b0_0101_0101 }
    TOKEN_SLASHSLASH = 86, // { group2Bits:0, group1Bits:0, enum:86, 0b0_0101_0110 }
    TOKEN_SLASHCOLON = 87, // { group2Bits:0, group1Bits:0, enum:87, 0b0_0101_0111 }
    TOKEN_SLASHEQUAL = 88, // { group2Bits:0, group1Bits:0, enum:88, 0b0_0101_1000 }
    TOKEN_SLASHSTAR = 89, // { group2Bits:0, group1Bits:0, enum:89, 0b0_0101_1001 }
    TOKEN_ATAT = 90, // { group2Bits:0, group1Bits:0, enum:90, 0b0_0101_1010 }
    TOKEN_ATSTAR = 91, // { group2Bits:0, group1Bits:0, enum:91, 0b0_0101_1011 }
    TOKEN_PLUSPLUS = 604, // { group2Bits:0, group1Bits:512, enum:92, 0b0_0101_1100 }
    TOKEN_PLUSEQUAL = 93, // { group2Bits:0, group1Bits:0, enum:93, 0b0_0101_1101 }
    TOKEN_TILDETILDE = 94, // { group2Bits:0, group1Bits:0, enum:94, 0b0_0101_1110 }
    TOKEN_STAREQUAL = 95, // { group2Bits:0, group1Bits:0, enum:95, 0b0_0101_1111 }
    TOKEN_STARSTAR = 96, // { group2Bits:0, group1Bits:0, enum:96, 0b0_0110_0000 }
    TOKEN_CARETEQUAL = 97, // { group2Bits:0, group1Bits:0, enum:97, 0b0_0110_0001 }
    TOKEN_HASHHASH = 610, // { group2Bits:0, group1Bits:512, enum:98, 0b0_0110_0010 }
    TOKEN_BANGEQUAL = 99, // { group2Bits:0, group1Bits:0, enum:99, 0b0_0110_0011 }
    TOKEN_BANGBANG = 612, // { group2Bits:0, group1Bits:512, enum:100, 0b0_0110_0100 }
    TOKEN_QUESTIONQUESTION = 101, // { group2Bits:0, group1Bits:0, enum:101, 0b0_0110_0101 }
    TOKEN_DOTDOTDOT = 102, // { group2Bits:0, group1Bits:0, enum:102, 0b0_0110_0110 }
    TOKEN_EQUALEQUALEQUAL = 103, // { group2Bits:0, group1Bits:0, enum:103, 0b0_0110_0111 }
    TOKEN_EQUALBANGEQUAL = 104, // { group2Bits:0, group1Bits:0, enum:104, 0b0_0110_1000 }
    TOKEN_UNDERUNDERUNDER = 617, // { group2Bits:0, group1Bits:512, enum:105, 0b0_0110_1001 }
    TOKEN_SLASHSLASHDOT = 106, // { group2Bits:0, group1Bits:0, enum:106, 0b0_0110_1010 }
    TOKEN_ATATAT = 107, // { group2Bits:0, group1Bits:0, enum:107, 0b0_0110_1011 }
    TOKEN_LESSMINUSGREATER = 108, // { group2Bits:0, group1Bits:0, enum:108, 0b0_0110_1100 }
    TOKEN_SLASHSLASHAT = 109, // { group2Bits:0, group1Bits:0, enum:109, 0b0_0110_1101 }
    TOKEN_CARETCOLONEQUAL = 110, // { group2Bits:0, group1Bits:0, enum:110, 0b0_0110_1110 }
    TOKEN_GREATERGREATERGREATER = 111, // { group2Bits:0, group1Bits:0, enum:111, 0b0_0110_1111 }
    TOKEN_BARMINUSGREATER = 112, // { group2Bits:0, group1Bits:0, enum:112, 0b0_0111_0000 }
    TOKEN_SLASHSLASHEQUAL = 113, // { group2Bits:0, group1Bits:0, enum:113, 0b0_0111_0001 }
    TOKEN_COLONCOLONOPENSQUARE = 114, // { group2Bits:0, group1Bits:0, enum:114, 0b0_0111_0010 }
    TOKEN_PERCENTPERCENT = 627, // { group2Bits:0, group1Bits:512, enum:115, 0b0_0111_0011 }
    TOKEN_LINEARSYNTAX_BANG = 628, // { group2Bits:0, group1Bits:512, enum:116, 0b0_0111_0100 }
    TOKEN_LINEARSYNTAX_CLOSEPAREN = 117, // { group2Bits:0, group1Bits:0, enum:117, 0b0_0111_0101 }
    TOKEN_LINEARSYNTAX_AT = 118, // { group2Bits:0, group1Bits:0, enum:118, 0b0_0111_0110 }
    TOKEN_LINEARSYNTAX_AMP = 119, // { group2Bits:0, group1Bits:0, enum:119, 0b0_0111_0111 }
    TOKEN_LINEARSYNTAX_STAR = 120, // { group2Bits:0, group1Bits:0, enum:120, 0b0_0111_1000 }
    TOKEN_LINEARSYNTAX_UNDER = 121, // { group2Bits:0, group1Bits:0, enum:121, 0b0_0111_1001 }
    TOKEN_LINEARSYNTAX_CARET = 122, // { group2Bits:0, group1Bits:0, enum:122, 0b0_0111_1010 }
    TOKEN_LINEARSYNTAX_SPACE = 123, // { group2Bits:0, group1Bits:0, enum:123, 0b0_0111_1011 }
    TOKEN_LINEARSYNTAX_PERCENT = 124, // { group2Bits:0, group1Bits:0, enum:124, 0b0_0111_1100 }
    TOKEN_LINEARSYNTAX_PLUS = 125, // { group2Bits:0, group1Bits:0, enum:125, 0b0_0111_1101 }
    TOKEN_LINEARSYNTAX_SLASH = 126, // { group2Bits:0, group1Bits:0, enum:126, 0b0_0111_1110 }
    TOKEN_LINEARSYNTAX_BACKTICK = 127, // { group2Bits:0, group1Bits:0, enum:127, 0b0_0111_1111 }
    TOKEN_FAKE_IMPLICITTIMES = 2176, // { group2Bits:2048, group1Bits:0, enum:128, 0b0_1000_0000 }
    TOKEN_FAKE_IMPLICITNULL = 2177, // { group2Bits:2048, group1Bits:0, enum:129, 0b0_1000_0001 }
    TOKEN_FAKE_IMPLICITONE = 2178, // { group2Bits:2048, group1Bits:0, enum:130, 0b0_1000_0010 }
    TOKEN_FAKE_IMPLICITALL = 2179, // { group2Bits:2048, group1Bits:0, enum:131, 0b0_1000_0011 }
    TOKEN_BOXES_OPENPARENSTAR = 132, // { group2Bits:0, group1Bits:0, enum:132, 0b0_1000_0100 }
    TOKEN_BOXES_STARCLOSEPAREN = 133, // { group2Bits:0, group1Bits:0, enum:133, 0b0_1000_0101 }
    TOKEN_BOXES_MULTISINGLEQUOTE = 134, // { group2Bits:0, group1Bits:0, enum:134, 0b0_1000_0110 }
    TOKEN_BOXES_MULTIWHITESPACE = 135, // { group2Bits:0, group1Bits:0, enum:135, 0b0_1000_0111 }
    TOKEN_LONGNAME_NOT = 648, // { group2Bits:0, group1Bits:512, enum:136, 0b0_1000_1000 }
    TOKEN_LONGNAME_PLUSMINUS = 649, // { group2Bits:0, group1Bits:512, enum:137, 0b0_1000_1001 }
    TOKEN_LONGNAME_CENTERDOT = 138, // { group2Bits:0, group1Bits:0, enum:138, 0b0_1000_1010 }
    TOKEN_LONGNAME_TIMES = 139, // { group2Bits:0, group1Bits:0, enum:139, 0b0_1000_1011 }
    TOKEN_LONGNAME_DIVIDE = 140, // { group2Bits:0, group1Bits:0, enum:140, 0b0_1000_1100 }
    TOKEN_LONGNAME_OPENCURLYQUOTE = 653, // { group2Bits:0, group1Bits:512, enum:141, 0b0_1000_1101 }
    TOKEN_LONGNAME_CLOSECURLYQUOTE = 1166, // { group2Bits:0, group1Bits:1024, enum:142, 0b0_1000_1110 }
    TOKEN_LONGNAME_OPENCURLYDOUBLEQUOTE = 655, // { group2Bits:0, group1Bits:512, enum:143, 0b0_1000_1111 }
    TOKEN_LONGNAME_CLOSECURLYDOUBLEQUOTE = 1168, // { group2Bits:0, group1Bits:1024, enum:144, 0b0_1001_0000 }
    TOKEN_LONGNAME_INVISIBLETIMES = 145, // { group2Bits:0, group1Bits:0, enum:145, 0b0_1001_0001 }
    TOKEN_LONGNAME_LEFTARROW = 146, // { group2Bits:0, group1Bits:0, enum:146, 0b0_1001_0010 }
    TOKEN_LONGNAME_UPARROW = 147, // { group2Bits:0, group1Bits:0, enum:147, 0b0_1001_0011 }
    TOKEN_LONGNAME_RIGHTARROW = 148, // { group2Bits:0, group1Bits:0, enum:148, 0b0_1001_0100 }
    TOKEN_LONGNAME_DOWNARROW = 149, // { group2Bits:0, group1Bits:0, enum:149, 0b0_1001_0101 }
    TOKEN_LONGNAME_LEFTRIGHTARROW = 150, // { group2Bits:0, group1Bits:0, enum:150, 0b0_1001_0110 }
    TOKEN_LONGNAME_UPDOWNARROW = 151, // { group2Bits:0, group1Bits:0, enum:151, 0b0_1001_0111 }
    TOKEN_LONGNAME_UPPERLEFTARROW = 152, // { group2Bits:0, group1Bits:0, enum:152, 0b0_1001_1000 }
    TOKEN_LONGNAME_UPPERRIGHTARROW = 153, // { group2Bits:0, group1Bits:0, enum:153, 0b0_1001_1001 }
    TOKEN_LONGNAME_LOWERRIGHTARROW = 154, // { group2Bits:0, group1Bits:0, enum:154, 0b0_1001_1010 }
    TOKEN_LONGNAME_LOWERLEFTARROW = 155, // { group2Bits:0, group1Bits:0, enum:155, 0b0_1001_1011 }
    TOKEN_LONGNAME_LEFTTEEARROW = 156, // { group2Bits:0, group1Bits:0, enum:156, 0b0_1001_1100 }
    TOKEN_LONGNAME_UPTEEARROW = 157, // { group2Bits:0, group1Bits:0, enum:157, 0b0_1001_1101 }
    TOKEN_LONGNAME_RIGHTTEEARROW = 158, // { group2Bits:0, group1Bits:0, enum:158, 0b0_1001_1110 }
    TOKEN_LONGNAME_DOWNTEEARROW = 159, // { group2Bits:0, group1Bits:0, enum:159, 0b0_1001_1111 }
    TOKEN_LONGNAME_LEFTVECTOR = 160, // { group2Bits:0, group1Bits:0, enum:160, 0b0_1010_0000 }
    TOKEN_LONGNAME_DOWNLEFTVECTOR = 161, // { group2Bits:0, group1Bits:0, enum:161, 0b0_1010_0001 }
    TOKEN_LONGNAME_RIGHTUPVECTOR = 162, // { group2Bits:0, group1Bits:0, enum:162, 0b0_1010_0010 }
    TOKEN_LONGNAME_LEFTUPVECTOR = 163, // { group2Bits:0, group1Bits:0, enum:163, 0b0_1010_0011 }
    TOKEN_LONGNAME_RIGHTVECTOR = 164, // { group2Bits:0, group1Bits:0, enum:164, 0b0_1010_0100 }
    TOKEN_LONGNAME_DOWNRIGHTVECTOR = 165, // { group2Bits:0, group1Bits:0, enum:165, 0b0_1010_0101 }
    TOKEN_LONGNAME_RIGHTDOWNVECTOR = 166, // { group2Bits:0, group1Bits:0, enum:166, 0b0_1010_0110 }
    TOKEN_LONGNAME_LEFTDOWNVECTOR = 167, // { group2Bits:0, group1Bits:0, enum:167, 0b0_1010_0111 }
    TOKEN_LONGNAME_RIGHTARROWLEFTARROW = 168, // { group2Bits:0, group1Bits:0, enum:168, 0b0_1010_1000 }
    TOKEN_LONGNAME_UPARROWDOWNARROW = 169, // { group2Bits:0, group1Bits:0, enum:169, 0b0_1010_1001 }
    TOKEN_LONGNAME_LEFTARROWRIGHTARROW = 170, // { group2Bits:0, group1Bits:0, enum:170, 0b0_1010_1010 }
    TOKEN_LONGNAME_REVERSEEQUILIBRIUM = 171, // { group2Bits:0, group1Bits:0, enum:171, 0b0_1010_1011 }
    TOKEN_LONGNAME_EQUILIBRIUM = 172, // { group2Bits:0, group1Bits:0, enum:172, 0b0_1010_1100 }
    TOKEN_LONGNAME_DOUBLELEFTARROW = 173, // { group2Bits:0, group1Bits:0, enum:173, 0b0_1010_1101 }
    TOKEN_LONGNAME_DOUBLEUPARROW = 174, // { group2Bits:0, group1Bits:0, enum:174, 0b0_1010_1110 }
    TOKEN_LONGNAME_DOUBLERIGHTARROW = 175, // { group2Bits:0, group1Bits:0, enum:175, 0b0_1010_1111 }
    TOKEN_LONGNAME_DOUBLEDOWNARROW = 176, // { group2Bits:0, group1Bits:0, enum:176, 0b0_1011_0000 }
    TOKEN_LONGNAME_DOUBLELEFTRIGHTARROW = 177, // { group2Bits:0, group1Bits:0, enum:177, 0b0_1011_0001 }
    TOKEN_LONGNAME_DOUBLEUPDOWNARROW = 178, // { group2Bits:0, group1Bits:0, enum:178, 0b0_1011_0010 }
    TOKEN_LONGNAME_LEFTARROWBAR = 179, // { group2Bits:0, group1Bits:0, enum:179, 0b0_1011_0011 }
    TOKEN_LONGNAME_RIGHTARROWBAR = 180, // { group2Bits:0, group1Bits:0, enum:180, 0b0_1011_0100 }
    TOKEN_LONGNAME_DOWNARROWUPARROW = 181, // { group2Bits:0, group1Bits:0, enum:181, 0b0_1011_0101 }
    TOKEN_LONGNAME_FORALL = 694, // { group2Bits:0, group1Bits:512, enum:182, 0b0_1011_0110 }
    TOKEN_LONGNAME_PARTIALD = 183, // { group2Bits:0, group1Bits:0, enum:183, 0b0_1011_0111 }
    TOKEN_LONGNAME_EXISTS = 696, // { group2Bits:0, group1Bits:512, enum:184, 0b0_1011_1000 }
    TOKEN_LONGNAME_NOTEXISTS = 697, // { group2Bits:0, group1Bits:512, enum:185, 0b0_1011_1001 }
    TOKEN_LONGNAME_LAPLACIAN = 186, // { group2Bits:0, group1Bits:0, enum:186, 0b0_1011_1010 }
    TOKEN_LONGNAME_DEL = 699, // { group2Bits:0, group1Bits:512, enum:187, 0b0_1011_1011 }
    TOKEN_LONGNAME_ELEMENT = 188, // { group2Bits:0, group1Bits:0, enum:188, 0b0_1011_1100 }
    TOKEN_LONGNAME_NOTELEMENT = 189, // { group2Bits:0, group1Bits:0, enum:189, 0b0_1011_1101 }
    TOKEN_LONGNAME_REVERSEELEMENT = 190, // { group2Bits:0, group1Bits:0, enum:190, 0b0_1011_1110 }
    TOKEN_LONGNAME_NOTREVERSEELEMENT = 191, // { group2Bits:0, group1Bits:0, enum:191, 0b0_1011_1111 }
    TOKEN_LONGNAME_SUCHTHAT = 192, // { group2Bits:0, group1Bits:0, enum:192, 0b0_1100_0000 }
    TOKEN_LONGNAME_PRODUCT = 705, // { group2Bits:0, group1Bits:512, enum:193, 0b0_1100_0001 }
    TOKEN_LONGNAME_COPRODUCT = 706, // { group2Bits:0, group1Bits:512, enum:194, 0b0_1100_0010 }
    TOKEN_LONGNAME_SUM = 707, // { group2Bits:0, group1Bits:512, enum:195, 0b0_1100_0011 }
    TOKEN_LONGNAME_MINUS = 708, // { group2Bits:0, group1Bits:512, enum:196, 0b0_1100_0100 }
    TOKEN_LONGNAME_MINUSPLUS = 709, // { group2Bits:0, group1Bits:512, enum:197, 0b0_1100_0101 }
    TOKEN_LONGNAME_DIVISIONSLASH = 198, // { group2Bits:0, group1Bits:0, enum:198, 0b0_1100_0110 }
    TOKEN_LONGNAME_BACKSLASH = 199, // { group2Bits:0, group1Bits:0, enum:199, 0b0_1100_0111 }
    TOKEN_LONGNAME_SMALLCIRCLE = 200, // { group2Bits:0, group1Bits:0, enum:200, 0b0_1100_1000 }
    TOKEN_LONGNAME_SQRT = 713, // { group2Bits:0, group1Bits:512, enum:201, 0b0_1100_1001 }
    TOKEN_LONGNAME_CUBEROOT = 714, // { group2Bits:0, group1Bits:512, enum:202, 0b0_1100_1010 }
    TOKEN_LONGNAME_PROPORTIONAL = 203, // { group2Bits:0, group1Bits:0, enum:203, 0b0_1100_1011 }
    TOKEN_LONGNAME_DIVIDES = 204, // { group2Bits:0, group1Bits:0, enum:204, 0b0_1100_1100 }
    TOKEN_LONGNAME_DOUBLEVERTICALBAR = 205, // { group2Bits:0, group1Bits:0, enum:205, 0b0_1100_1101 }
    TOKEN_LONGNAME_NOTDOUBLEVERTICALBAR = 206, // { group2Bits:0, group1Bits:0, enum:206, 0b0_1100_1110 }
    TOKEN_LONGNAME_AND = 207, // { group2Bits:0, group1Bits:0, enum:207, 0b0_1100_1111 }
    TOKEN_LONGNAME_OR = 208, // { group2Bits:0, group1Bits:0, enum:208, 0b0_1101_0000 }
    TOKEN_LONGNAME_INTEGRAL = 721, // { group2Bits:0, group1Bits:512, enum:209, 0b0_1101_0001 }
    TOKEN_LONGNAME_CONTOURINTEGRAL = 722, // { group2Bits:0, group1Bits:512, enum:210, 0b0_1101_0010 }
    TOKEN_LONGNAME_DOUBLECONTOURINTEGRAL = 723, // { group2Bits:0, group1Bits:512, enum:211, 0b0_1101_0011 }
    TOKEN_LONGNAME_CLOCKWISECONTOURINTEGRAL = 724, // { group2Bits:0, group1Bits:512, enum:212, 0b0_1101_0100 }
    TOKEN_LONGNAME_COUNTERCLOCKWISECONTOURINTEGRAL = 725, // { group2Bits:0, group1Bits:512, enum:213, 0b0_1101_0101 }
    TOKEN_LONGNAME_THEREFORE = 214, // { group2Bits:0, group1Bits:0, enum:214, 0b0_1101_0110 }
    TOKEN_LONGNAME_BECAUSE = 215, // { group2Bits:0, group1Bits:0, enum:215, 0b0_1101_0111 }
    TOKEN_LONGNAME_COLON = 216, // { group2Bits:0, group1Bits:0, enum:216, 0b0_1101_1000 }
    TOKEN_LONGNAME_PROPORTION = 217, // { group2Bits:0, group1Bits:0, enum:217, 0b0_1101_1001 }
    TOKEN_LONGNAME_TILDE = 218, // { group2Bits:0, group1Bits:0, enum:218, 0b0_1101_1010 }
    TOKEN_LONGNAME_VERTICALTILDE = 219, // { group2Bits:0, group1Bits:0, enum:219, 0b0_1101_1011 }
    TOKEN_LONGNAME_NOTTILDE = 220, // { group2Bits:0, group1Bits:0, enum:220, 0b0_1101_1100 }
    TOKEN_LONGNAME_EQUALTILDE = 221, // { group2Bits:0, group1Bits:0, enum:221, 0b0_1101_1101 }
    TOKEN_LONGNAME_TILDEEQUAL = 222, // { group2Bits:0, group1Bits:0, enum:222, 0b0_1101_1110 }
    TOKEN_LONGNAME_NOTTILDEEQUAL = 223, // { group2Bits:0, group1Bits:0, enum:223, 0b0_1101_1111 }
    TOKEN_LONGNAME_TILDEFULLEQUAL = 224, // { group2Bits:0, group1Bits:0, enum:224, 0b0_1110_0000 }
    TOKEN_LONGNAME_NOTTILDEFULLEQUAL = 225, // { group2Bits:0, group1Bits:0, enum:225, 0b0_1110_0001 }
    TOKEN_LONGNAME_TILDETILDE = 226, // { group2Bits:0, group1Bits:0, enum:226, 0b0_1110_0010 }
    TOKEN_LONGNAME_NOTTILDETILDE = 227, // { group2Bits:0, group1Bits:0, enum:227, 0b0_1110_0011 }
    TOKEN_LONGNAME_CUPCAP = 228, // { group2Bits:0, group1Bits:0, enum:228, 0b0_1110_0100 }
    TOKEN_LONGNAME_HUMPDOWNHUMP = 229, // { group2Bits:0, group1Bits:0, enum:229, 0b0_1110_0101 }
    TOKEN_LONGNAME_HUMPEQUAL = 230, // { group2Bits:0, group1Bits:0, enum:230, 0b0_1110_0110 }
    TOKEN_LONGNAME_DOTEQUAL = 231, // { group2Bits:0, group1Bits:0, enum:231, 0b0_1110_0111 }
    TOKEN_LONGNAME_NOTEQUAL = 232, // { group2Bits:0, group1Bits:0, enum:232, 0b0_1110_1000 }
    TOKEN_LONGNAME_CONGRUENT = 233, // { group2Bits:0, group1Bits:0, enum:233, 0b0_1110_1001 }
    TOKEN_LONGNAME_NOTCONGRUENT = 234, // { group2Bits:0, group1Bits:0, enum:234, 0b0_1110_1010 }
    TOKEN_LONGNAME_LESSEQUAL = 235, // { group2Bits:0, group1Bits:0, enum:235, 0b0_1110_1011 }
    TOKEN_LONGNAME_GREATEREQUAL = 236, // { group2Bits:0, group1Bits:0, enum:236, 0b0_1110_1100 }
    TOKEN_LONGNAME_LESSFULLEQUAL = 237, // { group2Bits:0, group1Bits:0, enum:237, 0b0_1110_1101 }
    TOKEN_LONGNAME_GREATERFULLEQUAL = 238, // { group2Bits:0, group1Bits:0, enum:238, 0b0_1110_1110 }
    TOKEN_LONGNAME_NOTLESSFULLEQUAL = 239, // { group2Bits:0, group1Bits:0, enum:239, 0b0_1110_1111 }
    TOKEN_LONGNAME_NOTGREATERFULLEQUAL = 240, // { group2Bits:0, group1Bits:0, enum:240, 0b0_1111_0000 }
    TOKEN_LONGNAME_LESSLESS = 241, // { group2Bits:0, group1Bits:0, enum:241, 0b0_1111_0001 }
    TOKEN_LONGNAME_GREATERGREATER = 242, // { group2Bits:0, group1Bits:0, enum:242, 0b0_1111_0010 }
    TOKEN_LONGNAME_NOTCUPCAP = 243, // { group2Bits:0, group1Bits:0, enum:243, 0b0_1111_0011 }
    TOKEN_LONGNAME_NOTLESS = 244, // { group2Bits:0, group1Bits:0, enum:244, 0b0_1111_0100 }
    TOKEN_LONGNAME_NOTGREATER = 245, // { group2Bits:0, group1Bits:0, enum:245, 0b0_1111_0101 }
    TOKEN_LONGNAME_NOTLESSEQUAL = 246, // { group2Bits:0, group1Bits:0, enum:246, 0b0_1111_0110 }
    TOKEN_LONGNAME_NOTGREATEREQUAL = 247, // { group2Bits:0, group1Bits:0, enum:247, 0b0_1111_0111 }
    TOKEN_LONGNAME_LESSTILDE = 248, // { group2Bits:0, group1Bits:0, enum:248, 0b0_1111_1000 }
    TOKEN_LONGNAME_GREATERTILDE = 249, // { group2Bits:0, group1Bits:0, enum:249, 0b0_1111_1001 }
    TOKEN_LONGNAME_NOTLESSTILDE = 250, // { group2Bits:0, group1Bits:0, enum:250, 0b0_1111_1010 }
    TOKEN_LONGNAME_NOTGREATERTILDE = 251, // { group2Bits:0, group1Bits:0, enum:251, 0b0_1111_1011 }
    TOKEN_LONGNAME_LESSGREATER = 252, // { group2Bits:0, group1Bits:0, enum:252, 0b0_1111_1100 }
    TOKEN_LONGNAME_GREATERLESS = 253, // { group2Bits:0, group1Bits:0, enum:253, 0b0_1111_1101 }
    TOKEN_LONGNAME_NOTLESSGREATER = 254, // { group2Bits:0, group1Bits:0, enum:254, 0b0_1111_1110 }
    TOKEN_LONGNAME_NOTGREATERLESS = 255, // { group2Bits:0, group1Bits:0, enum:255, 0b0_1111_1111 }
    TOKEN_LONGNAME_PRECEDES = 256, // { group2Bits:0, group1Bits:0, enum:256, 0b1_0000_0000 }
    TOKEN_LONGNAME_SUCCEEDS = 257, // { group2Bits:0, group1Bits:0, enum:257, 0b1_0000_0001 }
    TOKEN_LONGNAME_PRECEDESSLANTEQUAL = 258, // { group2Bits:0, group1Bits:0, enum:258, 0b1_0000_0010 }
    TOKEN_LONGNAME_SUCCEEDSSLANTEQUAL = 259, // { group2Bits:0, group1Bits:0, enum:259, 0b1_0000_0011 }
    TOKEN_LONGNAME_PRECEDESTILDE = 260, // { group2Bits:0, group1Bits:0, enum:260, 0b1_0000_0100 }
    TOKEN_LONGNAME_SUCCEEDSTILDE = 261, // { group2Bits:0, group1Bits:0, enum:261, 0b1_0000_0101 }
    TOKEN_LONGNAME_NOTPRECEDES = 262, // { group2Bits:0, group1Bits:0, enum:262, 0b1_0000_0110 }
    TOKEN_LONGNAME_NOTSUCCEEDS = 263, // { group2Bits:0, group1Bits:0, enum:263, 0b1_0000_0111 }
    TOKEN_LONGNAME_SUBSET = 264, // { group2Bits:0, group1Bits:0, enum:264, 0b1_0000_1000 }
    TOKEN_LONGNAME_SUPERSET = 265, // { group2Bits:0, group1Bits:0, enum:265, 0b1_0000_1001 }
    TOKEN_LONGNAME_NOTSUBSET = 266, // { group2Bits:0, group1Bits:0, enum:266, 0b1_0000_1010 }
    TOKEN_LONGNAME_NOTSUPERSET = 267, // { group2Bits:0, group1Bits:0, enum:267, 0b1_0000_1011 }
    TOKEN_LONGNAME_SUBSETEQUAL = 268, // { group2Bits:0, group1Bits:0, enum:268, 0b1_0000_1100 }
    TOKEN_LONGNAME_SUPERSETEQUAL = 269, // { group2Bits:0, group1Bits:0, enum:269, 0b1_0000_1101 }
    TOKEN_LONGNAME_NOTSUBSETEQUAL = 270, // { group2Bits:0, group1Bits:0, enum:270, 0b1_0000_1110 }
    TOKEN_LONGNAME_NOTSUPERSETEQUAL = 271, // { group2Bits:0, group1Bits:0, enum:271, 0b1_0000_1111 }
    TOKEN_LONGNAME_UNIONPLUS = 272, // { group2Bits:0, group1Bits:0, enum:272, 0b1_0001_0000 }
    TOKEN_LONGNAME_SQUARESUBSET = 273, // { group2Bits:0, group1Bits:0, enum:273, 0b1_0001_0001 }
    TOKEN_LONGNAME_SQUARESUPERSET = 274, // { group2Bits:0, group1Bits:0, enum:274, 0b1_0001_0010 }
    TOKEN_LONGNAME_SQUARESUBSETEQUAL = 275, // { group2Bits:0, group1Bits:0, enum:275, 0b1_0001_0011 }
    TOKEN_LONGNAME_SQUARESUPERSETEQUAL = 276, // { group2Bits:0, group1Bits:0, enum:276, 0b1_0001_0100 }
    TOKEN_LONGNAME_SQUAREINTERSECTION = 277, // { group2Bits:0, group1Bits:0, enum:277, 0b1_0001_0101 }
    TOKEN_LONGNAME_SQUAREUNION = 278, // { group2Bits:0, group1Bits:0, enum:278, 0b1_0001_0110 }
    TOKEN_LONGNAME_CIRCLEPLUS = 279, // { group2Bits:0, group1Bits:0, enum:279, 0b1_0001_0111 }
    TOKEN_LONGNAME_CIRCLEMINUS = 280, // { group2Bits:0, group1Bits:0, enum:280, 0b1_0001_1000 }
    TOKEN_LONGNAME_CIRCLETIMES = 793, // { group2Bits:0, group1Bits:512, enum:281, 0b1_0001_1001 }
    TOKEN_LONGNAME_CIRCLEDOT = 282, // { group2Bits:0, group1Bits:0, enum:282, 0b1_0001_1010 }
    TOKEN_LONGNAME_RIGHTTEE = 283, // { group2Bits:0, group1Bits:0, enum:283, 0b1_0001_1011 }
    TOKEN_LONGNAME_LEFTTEE = 284, // { group2Bits:0, group1Bits:0, enum:284, 0b1_0001_1100 }
    TOKEN_LONGNAME_DOWNTEE = 285, // { group2Bits:0, group1Bits:0, enum:285, 0b1_0001_1101 }
    TOKEN_LONGNAME_UPTEE = 286, // { group2Bits:0, group1Bits:0, enum:286, 0b1_0001_1110 }
    TOKEN_LONGNAME_DOUBLERIGHTTEE = 287, // { group2Bits:0, group1Bits:0, enum:287, 0b1_0001_1111 }
    TOKEN_LONGNAME_LEFTTRIANGLE = 288, // { group2Bits:0, group1Bits:0, enum:288, 0b1_0010_0000 }
    TOKEN_LONGNAME_RIGHTTRIANGLE = 289, // { group2Bits:0, group1Bits:0, enum:289, 0b1_0010_0001 }
    TOKEN_LONGNAME_LEFTTRIANGLEEQUAL = 290, // { group2Bits:0, group1Bits:0, enum:290, 0b1_0010_0010 }
    TOKEN_LONGNAME_RIGHTTRIANGLEEQUAL = 291, // { group2Bits:0, group1Bits:0, enum:291, 0b1_0010_0011 }
    TOKEN_LONGNAME_XOR = 292, // { group2Bits:0, group1Bits:0, enum:292, 0b1_0010_0100 }
    TOKEN_LONGNAME_NAND = 293, // { group2Bits:0, group1Bits:0, enum:293, 0b1_0010_0101 }
    TOKEN_LONGNAME_NOR = 294, // { group2Bits:0, group1Bits:0, enum:294, 0b1_0010_0110 }
    TOKEN_LONGNAME_WEDGE = 295, // { group2Bits:0, group1Bits:0, enum:295, 0b1_0010_0111 }
    TOKEN_LONGNAME_VEE = 296, // { group2Bits:0, group1Bits:0, enum:296, 0b1_0010_1000 }
    TOKEN_LONGNAME_INTERSECTION = 297, // { group2Bits:0, group1Bits:0, enum:297, 0b1_0010_1001 }
    TOKEN_LONGNAME_UNION = 298, // { group2Bits:0, group1Bits:0, enum:298, 0b1_0010_1010 }
    TOKEN_LONGNAME_DIAMOND = 299, // { group2Bits:0, group1Bits:0, enum:299, 0b1_0010_1011 }
    TOKEN_LONGNAME_STAR = 300, // { group2Bits:0, group1Bits:0, enum:300, 0b1_0010_1100 }
    TOKEN_LONGNAME_LESSEQUALGREATER = 301, // { group2Bits:0, group1Bits:0, enum:301, 0b1_0010_1101 }
    TOKEN_LONGNAME_GREATEREQUALLESS = 302, // { group2Bits:0, group1Bits:0, enum:302, 0b1_0010_1110 }
    TOKEN_LONGNAME_NOTPRECEDESSLANTEQUAL = 303, // { group2Bits:0, group1Bits:0, enum:303, 0b1_0010_1111 }
    TOKEN_LONGNAME_NOTSUCCEEDSSLANTEQUAL = 304, // { group2Bits:0, group1Bits:0, enum:304, 0b1_0011_0000 }
    TOKEN_LONGNAME_NOTSQUARESUBSETEQUAL = 305, // { group2Bits:0, group1Bits:0, enum:305, 0b1_0011_0001 }
    TOKEN_LONGNAME_NOTSQUARESUPERSETEQUAL = 306, // { group2Bits:0, group1Bits:0, enum:306, 0b1_0011_0010 }
    TOKEN_LONGNAME_NOTPRECEDESTILDE = 307, // { group2Bits:0, group1Bits:0, enum:307, 0b1_0011_0011 }
    TOKEN_LONGNAME_NOTSUCCEEDSTILDE = 308, // { group2Bits:0, group1Bits:0, enum:308, 0b1_0011_0100 }
    TOKEN_LONGNAME_NOTLEFTTRIANGLE = 309, // { group2Bits:0, group1Bits:0, enum:309, 0b1_0011_0101 }
    TOKEN_LONGNAME_NOTRIGHTTRIANGLE = 310, // { group2Bits:0, group1Bits:0, enum:310, 0b1_0011_0110 }
    TOKEN_LONGNAME_NOTLEFTTRIANGLEEQUAL = 311, // { group2Bits:0, group1Bits:0, enum:311, 0b1_0011_0111 }
    TOKEN_LONGNAME_NOTRIGHTTRIANGLEEQUAL = 312, // { group2Bits:0, group1Bits:0, enum:312, 0b1_0011_1000 }
    TOKEN_LONGNAME_LEFTCEILING = 825, // { group2Bits:0, group1Bits:512, enum:313, 0b1_0011_1001 }
    TOKEN_LONGNAME_RIGHTCEILING = 1338, // { group2Bits:0, group1Bits:1024, enum:314, 0b1_0011_1010 }
    TOKEN_LONGNAME_LEFTFLOOR = 827, // { group2Bits:0, group1Bits:512, enum:315, 0b1_0011_1011 }
    TOKEN_LONGNAME_RIGHTFLOOR = 1340, // { group2Bits:0, group1Bits:1024, enum:316, 0b1_0011_1100 }
    TOKEN_LONGNAME_CAP = 317, // { group2Bits:0, group1Bits:0, enum:317, 0b1_0011_1101 }
    TOKEN_LONGNAME_CUP = 318, // { group2Bits:0, group1Bits:0, enum:318, 0b1_0011_1110 }
    TOKEN_LONGNAME_LEFTANGLEBRACKET = 831, // { group2Bits:0, group1Bits:512, enum:319, 0b1_0011_1111 }
    TOKEN_LONGNAME_RIGHTANGLEBRACKET = 1344, // { group2Bits:0, group1Bits:1024, enum:320, 0b1_0100_0000 }
    TOKEN_LONGNAME_PERPENDICULAR = 321, // { group2Bits:0, group1Bits:0, enum:321, 0b1_0100_0001 }
    TOKEN_LONGNAME_LONGLEFTARROW = 322, // { group2Bits:0, group1Bits:0, enum:322, 0b1_0100_0010 }
    TOKEN_LONGNAME_LONGRIGHTARROW = 323, // { group2Bits:0, group1Bits:0, enum:323, 0b1_0100_0011 }
    TOKEN_LONGNAME_LONGLEFTRIGHTARROW = 324, // { group2Bits:0, group1Bits:0, enum:324, 0b1_0100_0100 }
    TOKEN_LONGNAME_DOUBLELONGLEFTARROW = 325, // { group2Bits:0, group1Bits:0, enum:325, 0b1_0100_0101 }
    TOKEN_LONGNAME_DOUBLELONGRIGHTARROW = 326, // { group2Bits:0, group1Bits:0, enum:326, 0b1_0100_0110 }
    TOKEN_LONGNAME_DOUBLELONGLEFTRIGHTARROW = 327, // { group2Bits:0, group1Bits:0, enum:327, 0b1_0100_0111 }
    TOKEN_LONGNAME_UPARROWBAR = 328, // { group2Bits:0, group1Bits:0, enum:328, 0b1_0100_1000 }
    TOKEN_LONGNAME_DOWNARROWBAR = 329, // { group2Bits:0, group1Bits:0, enum:329, 0b1_0100_1001 }
    TOKEN_LONGNAME_LEFTRIGHTVECTOR = 330, // { group2Bits:0, group1Bits:0, enum:330, 0b1_0100_1010 }
    TOKEN_LONGNAME_RIGHTUPDOWNVECTOR = 331, // { group2Bits:0, group1Bits:0, enum:331, 0b1_0100_1011 }
    TOKEN_LONGNAME_DOWNLEFTRIGHTVECTOR = 332, // { group2Bits:0, group1Bits:0, enum:332, 0b1_0100_1100 }
    TOKEN_LONGNAME_LEFTUPDOWNVECTOR = 333, // { group2Bits:0, group1Bits:0, enum:333, 0b1_0100_1101 }
    TOKEN_LONGNAME_LEFTVECTORBAR = 334, // { group2Bits:0, group1Bits:0, enum:334, 0b1_0100_1110 }
    TOKEN_LONGNAME_RIGHTVECTORBAR = 335, // { group2Bits:0, group1Bits:0, enum:335, 0b1_0100_1111 }
    TOKEN_LONGNAME_RIGHTUPVECTORBAR = 336, // { group2Bits:0, group1Bits:0, enum:336, 0b1_0101_0000 }
    TOKEN_LONGNAME_RIGHTDOWNVECTORBAR = 337, // { group2Bits:0, group1Bits:0, enum:337, 0b1_0101_0001 }
    TOKEN_LONGNAME_DOWNLEFTVECTORBAR = 338, // { group2Bits:0, group1Bits:0, enum:338, 0b1_0101_0010 }
    TOKEN_LONGNAME_DOWNRIGHTVECTORBAR = 339, // { group2Bits:0, group1Bits:0, enum:339, 0b1_0101_0011 }
    TOKEN_LONGNAME_LEFTUPVECTORBAR = 340, // { group2Bits:0, group1Bits:0, enum:340, 0b1_0101_0100 }
    TOKEN_LONGNAME_LEFTDOWNVECTORBAR = 341, // { group2Bits:0, group1Bits:0, enum:341, 0b1_0101_0101 }
    TOKEN_LONGNAME_LEFTTEEVECTOR = 342, // { group2Bits:0, group1Bits:0, enum:342, 0b1_0101_0110 }
    TOKEN_LONGNAME_RIGHTTEEVECTOR = 343, // { group2Bits:0, group1Bits:0, enum:343, 0b1_0101_0111 }
    TOKEN_LONGNAME_RIGHTUPTEEVECTOR = 344, // { group2Bits:0, group1Bits:0, enum:344, 0b1_0101_1000 }
    TOKEN_LONGNAME_RIGHTDOWNTEEVECTOR = 345, // { group2Bits:0, group1Bits:0, enum:345, 0b1_0101_1001 }
    TOKEN_LONGNAME_DOWNLEFTTEEVECTOR = 346, // { group2Bits:0, group1Bits:0, enum:346, 0b1_0101_1010 }
    TOKEN_LONGNAME_DOWNRIGHTTEEVECTOR = 347, // { group2Bits:0, group1Bits:0, enum:347, 0b1_0101_1011 }
    TOKEN_LONGNAME_LEFTUPTEEVECTOR = 348, // { group2Bits:0, group1Bits:0, enum:348, 0b1_0101_1100 }
    TOKEN_LONGNAME_LEFTDOWNTEEVECTOR = 349, // { group2Bits:0, group1Bits:0, enum:349, 0b1_0101_1101 }
    TOKEN_LONGNAME_UPEQUILIBRIUM = 350, // { group2Bits:0, group1Bits:0, enum:350, 0b1_0101_1110 }
    TOKEN_LONGNAME_REVERSEUPEQUILIBRIUM = 351, // { group2Bits:0, group1Bits:0, enum:351, 0b1_0101_1111 }
    TOKEN_LONGNAME_ROUNDIMPLIES = 352, // { group2Bits:0, group1Bits:0, enum:352, 0b1_0110_0000 }
    TOKEN_LONGNAME_LEFTTRIANGLEBAR = 353, // { group2Bits:0, group1Bits:0, enum:353, 0b1_0110_0001 }
    TOKEN_LONGNAME_RIGHTTRIANGLEBAR = 354, // { group2Bits:0, group1Bits:0, enum:354, 0b1_0110_0010 }
    TOKEN_LONGNAME_EQUIVALENT = 355, // { group2Bits:0, group1Bits:0, enum:355, 0b1_0110_0011 }
    TOKEN_LONGNAME_LESSSLANTEQUAL = 356, // { group2Bits:0, group1Bits:0, enum:356, 0b1_0110_0100 }
    TOKEN_LONGNAME_GREATERSLANTEQUAL = 357, // { group2Bits:0, group1Bits:0, enum:357, 0b1_0110_0101 }
    TOKEN_LONGNAME_NESTEDLESSLESS = 358, // { group2Bits:0, group1Bits:0, enum:358, 0b1_0110_0110 }
    TOKEN_LONGNAME_NESTEDGREATERGREATER = 359, // { group2Bits:0, group1Bits:0, enum:359, 0b1_0110_0111 }
    TOKEN_LONGNAME_PRECEDESEQUAL = 360, // { group2Bits:0, group1Bits:0, enum:360, 0b1_0110_1000 }
    TOKEN_LONGNAME_SUCCEEDSEQUAL = 361, // { group2Bits:0, group1Bits:0, enum:361, 0b1_0110_1001 }
    TOKEN_LONGNAME_DOUBLELEFTTEE = 362, // { group2Bits:0, group1Bits:0, enum:362, 0b1_0110_1010 }
    TOKEN_LONGNAME_LEFTDOUBLEBRACKET = 363, // { group2Bits:0, group1Bits:0, enum:363, 0b1_0110_1011 }
    TOKEN_LONGNAME_RIGHTDOUBLEBRACKET = 1388, // { group2Bits:0, group1Bits:1024, enum:364, 0b1_0110_1100 }
    TOKEN_LONGNAME_LEFTASSOCIATION = 877, // { group2Bits:0, group1Bits:512, enum:365, 0b1_0110_1101 }
    TOKEN_LONGNAME_RIGHTASSOCIATION = 1390, // { group2Bits:0, group1Bits:1024, enum:366, 0b1_0110_1110 }
    TOKEN_LONGNAME_TWOWAYRULE = 367, // { group2Bits:0, group1Bits:0, enum:367, 0b1_0110_1111 }
    TOKEN_LONGNAME_PIECEWISE = 880, // { group2Bits:0, group1Bits:512, enum:368, 0b1_0111_0000 }
    TOKEN_LONGNAME_IMPLICITPLUS = 369, // { group2Bits:0, group1Bits:0, enum:369, 0b1_0111_0001 }
    TOKEN_LONGNAME_AUTOLEFTMATCH = 370, // { group2Bits:0, group1Bits:0, enum:370, 0b1_0111_0010 }
    TOKEN_LONGNAME_AUTORIGHTMATCH = 371, // { group2Bits:0, group1Bits:0, enum:371, 0b1_0111_0011 }
    TOKEN_LONGNAME_INVISIBLEPREFIXSCRIPTBASE = 884, // { group2Bits:0, group1Bits:512, enum:372, 0b1_0111_0100 }
    TOKEN_LONGNAME_INVISIBLEPOSTFIXSCRIPTBASE = 373, // { group2Bits:0, group1Bits:0, enum:373, 0b1_0111_0101 }
    TOKEN_LONGNAME_TRANSPOSE = 374, // { group2Bits:0, group1Bits:0, enum:374, 0b1_0111_0110 }
    TOKEN_LONGNAME_CONJUGATE = 375, // { group2Bits:0, group1Bits:0, enum:375, 0b1_0111_0111 }
    TOKEN_LONGNAME_CONJUGATETRANSPOSE = 376, // { group2Bits:0, group1Bits:0, enum:376, 0b1_0111_1000 }
    TOKEN_LONGNAME_HERMITIANCONJUGATE = 377, // { group2Bits:0, group1Bits:0, enum:377, 0b1_0111_1001 }
    TOKEN_LONGNAME_VERTICALBAR = 378, // { group2Bits:0, group1Bits:0, enum:378, 0b1_0111_1010 }
    TOKEN_LONGNAME_NOTVERTICALBAR = 379, // { group2Bits:0, group1Bits:0, enum:379, 0b1_0111_1011 }
    TOKEN_LONGNAME_DISTRIBUTED = 380, // { group2Bits:0, group1Bits:0, enum:380, 0b1_0111_1100 }
    TOKEN_LONGNAME_CONDITIONED = 381, // { group2Bits:0, group1Bits:0, enum:381, 0b1_0111_1101 }
    TOKEN_LONGNAME_UNDIRECTEDEDGE = 382, // { group2Bits:0, group1Bits:0, enum:382, 0b1_0111_1110 }
    TOKEN_LONGNAME_DIRECTEDEDGE = 383, // { group2Bits:0, group1Bits:0, enum:383, 0b1_0111_1111 }
    TOKEN_LONGNAME_GRADIENT = 384, // { group2Bits:0, group1Bits:0, enum:384, 0b1_1000_0000 }
    TOKEN_LONGNAME_DIVERGENCE = 385, // { group2Bits:0, group1Bits:0, enum:385, 0b1_1000_0001 }
    TOKEN_LONGNAME_CURL = 386, // { group2Bits:0, group1Bits:0, enum:386, 0b1_1000_0010 }
    TOKEN_LONGNAME_CONTINUEDFRACTIONK = 899, // { group2Bits:0, group1Bits:512, enum:387, 0b1_1000_0011 }
    TOKEN_LONGNAME_TENSORPRODUCT = 388, // { group2Bits:0, group1Bits:0, enum:388, 0b1_1000_0100 }
    TOKEN_LONGNAME_TENSORWEDGE = 389, // { group2Bits:0, group1Bits:0, enum:389, 0b1_1000_0101 }
    TOKEN_LONGNAME_PROBABILITYPR = 902, // { group2Bits:0, group1Bits:512, enum:390, 0b1_1000_0110 }
    TOKEN_LONGNAME_EXPECTATIONE = 903, // { group2Bits:0, group1Bits:512, enum:391, 0b1_1000_0111 }
    TOKEN_LONGNAME_PERMUTATIONPRODUCT = 392, // { group2Bits:0, group1Bits:0, enum:392, 0b1_1000_1000 }
    TOKEN_LONGNAME_NOTEQUALTILDE = 393, // { group2Bits:0, group1Bits:0, enum:393, 0b1_1000_1001 }
    TOKEN_LONGNAME_NOTHUMPEQUAL = 394, // { group2Bits:0, group1Bits:0, enum:394, 0b1_1000_1010 }
    TOKEN_LONGNAME_NOTHUMPDOWNHUMP = 395, // { group2Bits:0, group1Bits:0, enum:395, 0b1_1000_1011 }
    TOKEN_LONGNAME_NOTLEFTTRIANGLEBAR = 396, // { group2Bits:0, group1Bits:0, enum:396, 0b1_1000_1100 }
    TOKEN_LONGNAME_NOTRIGHTTRIANGLEBAR = 397, // { group2Bits:0, group1Bits:0, enum:397, 0b1_1000_1101 }
    TOKEN_LONGNAME_NOTLESSLESS = 398, // { group2Bits:0, group1Bits:0, enum:398, 0b1_1000_1110 }
    TOKEN_LONGNAME_NOTNESTEDLESSLESS = 399, // { group2Bits:0, group1Bits:0, enum:399, 0b1_1000_1111 }
    TOKEN_LONGNAME_NOTLESSSLANTEQUAL = 400, // { group2Bits:0, group1Bits:0, enum:400, 0b1_1001_0000 }
    TOKEN_LONGNAME_NOTGREATERGREATER = 401, // { group2Bits:0, group1Bits:0, enum:401, 0b1_1001_0001 }
    TOKEN_LONGNAME_NOTNESTEDGREATERGREATER = 402, // { group2Bits:0, group1Bits:0, enum:402, 0b1_1001_0010 }
    TOKEN_LONGNAME_NOTGREATERSLANTEQUAL = 403, // { group2Bits:0, group1Bits:0, enum:403, 0b1_1001_0011 }
    TOKEN_LONGNAME_NOTPRECEDESEQUAL = 404, // { group2Bits:0, group1Bits:0, enum:404, 0b1_1001_0100 }
    TOKEN_LONGNAME_NOTSUCCEEDSEQUAL = 405, // { group2Bits:0, group1Bits:0, enum:405, 0b1_1001_0101 }
    TOKEN_LONGNAME_NOTSQUARESUBSET = 406, // { group2Bits:0, group1Bits:0, enum:406, 0b1_1001_0110 }
    TOKEN_LONGNAME_NOTSQUARESUPERSET = 407, // { group2Bits:0, group1Bits:0, enum:407, 0b1_1001_0111 }
    TOKEN_LONGNAME_EQUAL = 408, // { group2Bits:0, group1Bits:0, enum:408, 0b1_1001_1000 }
    TOKEN_LONGNAME_VERTICALSEPARATOR = 409, // { group2Bits:0, group1Bits:0, enum:409, 0b1_1001_1001 }
    TOKEN_LONGNAME_VECTORGREATER = 410, // { group2Bits:0, group1Bits:0, enum:410, 0b1_1001_1010 }
    TOKEN_LONGNAME_VECTORGREATEREQUAL = 411, // { group2Bits:0, group1Bits:0, enum:411, 0b1_1001_1011 }
    TOKEN_LONGNAME_VECTORLESS = 412, // { group2Bits:0, group1Bits:0, enum:412, 0b1_1001_1100 }
    TOKEN_LONGNAME_VECTORLESSEQUAL = 413, // { group2Bits:0, group1Bits:0, enum:413, 0b1_1001_1101 }
    TOKEN_LONGNAME_LIMIT = 414, // { group2Bits:0, group1Bits:0, enum:414, 0b1_1001_1110 }
    TOKEN_LONGNAME_MAXLIMIT = 415, // { group2Bits:0, group1Bits:0, enum:415, 0b1_1001_1111 }
    TOKEN_LONGNAME_MINLIMIT = 416, // { group2Bits:0, group1Bits:0, enum:416, 0b1_1010_0000 }
    TOKEN_LONGNAME_CROSS = 417, // { group2Bits:0, group1Bits:0, enum:417, 0b1_1010_0001 }
    TOKEN_LONGNAME_FUNCTION = 418, // { group2Bits:0, group1Bits:0, enum:418, 0b1_1010_0010 }
    TOKEN_LONGNAME_XNOR = 419, // { group2Bits:0, group1Bits:0, enum:419, 0b1_1010_0011 }
    TOKEN_LONGNAME_DISCRETESHIFT = 420, // { group2Bits:0, group1Bits:0, enum:420, 0b1_1010_0100 }
    TOKEN_LONGNAME_DIFFERENCEDELTA = 421, // { group2Bits:0, group1Bits:0, enum:421, 0b1_1010_0101 }
    TOKEN_LONGNAME_DISCRETERATIO = 422, // { group2Bits:0, group1Bits:0, enum:422, 0b1_1010_0110 }
    TOKEN_LONGNAME_RULEDELAYED = 423, // { group2Bits:0, group1Bits:0, enum:423, 0b1_1010_0111 }
    TOKEN_LONGNAME_SQUARE = 936, // { group2Bits:0, group1Bits:512, enum:424, 0b1_1010_1000 }
    TOKEN_LONGNAME_RULE = 425, // { group2Bits:0, group1Bits:0, enum:425, 0b1_1010_1001 }
    TOKEN_LONGNAME_IMPLIES = 426, // { group2Bits:0, group1Bits:0, enum:426, 0b1_1010_1010 }
    TOKEN_LONGNAME_SHORTRIGHTARROW = 427, // { group2Bits:0, group1Bits:0, enum:427, 0b1_1010_1011 }
    TOKEN_LONGNAME_SHORTLEFTARROW = 428, // { group2Bits:0, group1Bits:0, enum:428, 0b1_1010_1100 }
    TOKEN_LONGNAME_SHORTUPARROW = 429, // { group2Bits:0, group1Bits:0, enum:429, 0b1_1010_1101 }
    TOKEN_LONGNAME_SHORTDOWNARROW = 430, // { group2Bits:0, group1Bits:0, enum:430, 0b1_1010_1110 }
    TOKEN_LONGNAME_APPLICATION = 431, // { group2Bits:0, group1Bits:0, enum:431, 0b1_1010_1111 }
    TOKEN_LONGNAME_LEFTBRACKETINGBAR = 944, // { group2Bits:0, group1Bits:512, enum:432, 0b1_1011_0000 }
    TOKEN_LONGNAME_RIGHTBRACKETINGBAR = 1457, // { group2Bits:0, group1Bits:1024, enum:433, 0b1_1011_0001 }
    TOKEN_LONGNAME_LEFTDOUBLEBRACKETINGBAR = 946, // { group2Bits:0, group1Bits:512, enum:434, 0b1_1011_0010 }
    TOKEN_LONGNAME_RIGHTDOUBLEBRACKETINGBAR = 1459, // { group2Bits:0, group1Bits:1024, enum:435, 0b1_1011_0011 }
    TOKEN_LONGNAME_CAPITALDIFFERENTIALD = 948, // { group2Bits:0, group1Bits:512, enum:436, 0b1_1011_0100 }
    TOKEN_LONGNAME_DIFFERENTIALD = 949, // { group2Bits:0, group1Bits:512, enum:437, 0b1_1011_0101 }
    TOKEN_LONGNAME_INVISIBLECOMMA = 438, // { group2Bits:0, group1Bits:0, enum:438, 0b1_1011_0110 }
    TOKEN_LONGNAME_INVISIBLEAPPLICATION = 439, // { group2Bits:0, group1Bits:0, enum:439, 0b1_1011_0111 }
    TOKEN_LONGNAME_LONGEQUAL = 440, // { group2Bits:0, group1Bits:0, enum:440, 0b1_1011_1000 }
    TOKEN_COUNT = 441, // { group2Bits:0, group1Bits:0, enum:441, 0b1_1011_1001 }
}

//
// AUTO GENERATED FILE
// DO NOT MODIFY
//

use crate::symbol_registration::*;

use self::TokenEnum::*;

//
// TOKEN_INTEGER must be 0x4 to allow setting the 0b1 bit to convert to TOKEN_REAL, and 0b10 bit to convert to TOKEN_RATIONAL
//
const _: () = assert!(TOKEN_INTEGER.value() == 0x4, "Check your assumptions");
const _: () = assert!(TOKEN_REAL.value() == 0x5, "Check your assumptions");
const _: () = assert!(TOKEN_RATIONAL.value() == 0x6, "Check your assumptions");

//
// TOKEN_INTERNALNEWLINE must be 0x8 to allow setting the 0b100 bit to convert to TOKEN_TOPLEVELNEWLINE
//
const _: () = assert!(TOKEN_INTERNALNEWLINE.value() == 0b1000, "Check your assumptions");
const _: () = assert!(TOKEN_TOPLEVELNEWLINE.value() == 0b1100, "Check your assumptions");
//const _: () = assert!(TOKEN_ERROR_FIRST.value() == 0x10, "Check your assumptions");

//
// TOKEN_ERROR_UNTERMINATED_FIRST must be 0x1c to allow checking 0b0_0001_11xx for isUnterminated
//
const _: () = assert!(TOKEN_ERROR_UNTERMINATED_FIRST.value() == 0x1c, "Check your assumptions");
const _: () = assert!(TOKEN_ERROR_UNTERMINATED_END.value() == 0x20, "Check your assumptions");


#[allow(dead_code)]
pub(crate) fn TokenToSymbol(token: TokenEnum) -> Symbol {
match token {
TOKEN_UNKNOWN => return SYMBOL_TOKEN_UNKNOWN,
TOKEN_ENDOFFILE => return SYMBOL_ENDOFFILE,
TOKEN_SYMBOL => return SYMBOL_SYMBOL,
TOKEN_STRING => return SYMBOL_STRING,
TOKEN_INTEGER => return SYMBOL_INTEGER,
TOKEN_REAL => return SYMBOL_REAL,
TOKEN_RATIONAL => return SYMBOL_RATIONAL,
TOKEN_LINEARSYNTAXBLOB => return SYMBOL_TOKEN_LINEARSYNTAXBLOB,
TOKEN_INTERNALNEWLINE => return SYMBOL_TOKEN_NEWLINE,
TOKEN_COMMENT => return SYMBOL_TOKEN_COMMENT,
TOKEN_WHITESPACE => return SYMBOL_WHITESPACE,
TOKEN_BUFFER1 => return SYMBOL_TOKEN_BUFFER1,
TOKEN_TOPLEVELNEWLINE => return SYMBOL_TOKEN_NEWLINE,
TOKEN_BUFFER2 => return SYMBOL_TOKEN_BUFFER2,
TOKEN_BUFFER3 => return SYMBOL_TOKEN_BUFFER3,
TOKEN_BUFFER4 => return SYMBOL_TOKEN_BUFFER4,
TOKEN_ERROR_EXPECTEDEQUAL => return SYMBOL_TOKEN_ERROR_EXPECTEDEQUAL,
TOKEN_ERROR_NUMBER => return SYMBOL_TOKEN_ERROR_NUMBER,
TOKEN_ERROR_UNHANDLEDCHARACTER => return SYMBOL_TOKEN_ERROR_UNHANDLEDCHARACTER,
TOKEN_ERROR_EXPECTEDLETTERLIKE => return SYMBOL_TOKEN_ERROR_EXPECTEDLETTERLIKE,
TOKEN_ERROR_ABORTED => return SYMBOL_TOKEN_ERROR_ABORTED,
TOKEN_ERROR_EXPECTEDOPERAND => return SYMBOL_TOKEN_ERROR_EXPECTEDOPERAND,
TOKEN_ERROR_EXPECTEDTAG => return SYMBOL_TOKEN_ERROR_EXPECTEDTAG,
TOKEN_ERROR_EXPECTEDFILE => return SYMBOL_TOKEN_ERROR_EXPECTEDFILE,
TOKEN_ERROR_UNEXPECTEDCLOSER => return SYMBOL_TOKEN_ERROR_UNEXPECTEDCLOSER,
TOKEN_ERROR_PREFIXIMPLICITNULL => return SYMBOL_TOKEN_ERROR_PREFIXIMPLICITNULL,
TOKEN_ERROR_INFIXIMPLICITNULL => return SYMBOL_TOKEN_ERROR_INFIXIMPLICITNULL,
TOKEN_ERROR_UNSAFECHARACTERENCODING => return SYMBOL_TOKEN_ERROR_UNSAFECHARACTERENCODING,
TOKEN_ERROR_UNTERMINATEDCOMMENT => return SYMBOL_TOKEN_ERROR_UNTERMINATEDCOMMENT,
TOKEN_ERROR_UNTERMINATEDSTRING => return SYMBOL_TOKEN_ERROR_UNTERMINATEDSTRING,
TOKEN_ERROR_UNTERMINATEDFILESTRING => return SYMBOL_TOKEN_ERROR_UNTERMINATEDFILESTRING,
TOKEN_ERROR_UNTERMINATEDLINEARSYNTAXBLOB => return SYMBOL_TOKEN_ERROR_UNTERMINATEDLINEARSYNTAXBLOB,
TOKEN_ERROR_UNSUPPORTEDTOKEN => return SYMBOL_TOKEN_ERROR_UNSUPPORTEDTOKEN,
TOKEN_ERROR_UNEXPECTEDCOMMENTCLOSER => return SYMBOL_TOKEN_ERROR_UNEXPECTEDCOMMENTCLOSER,
TOKEN_ERROR_END => return SYMBOL_TOKEN_ERROR_END,
TOKEN_DOT => return SYMBOL_TOKEN_DOT,
TOKEN_COLON => return SYMBOL_TOKEN_COLON,
TOKEN_OPENPAREN => return SYMBOL_TOKEN_OPENPAREN,
TOKEN_CLOSEPAREN => return SYMBOL_TOKEN_CLOSEPAREN,
TOKEN_OPENSQUARE => return SYMBOL_TOKEN_OPENSQUARE,
TOKEN_CLOSESQUARE => return SYMBOL_TOKEN_CLOSESQUARE,
TOKEN_COMMA => return SYMBOL_TOKEN_COMMA,
TOKEN_OPENCURLY => return SYMBOL_TOKEN_OPENCURLY,
TOKEN_CLOSECURLY => return SYMBOL_TOKEN_CLOSECURLY,
TOKEN_EQUAL => return SYMBOL_TOKEN_EQUAL,
TOKEN_BANG => return SYMBOL_TOKEN_BANG,
TOKEN_UNDER => return SYMBOL_TOKEN_UNDER,
TOKEN_LESS => return SYMBOL_TOKEN_LESS,
TOKEN_GREATER => return SYMBOL_TOKEN_GREATER,
TOKEN_MINUS => return SYMBOL_TOKEN_MINUS,
TOKEN_BAR => return SYMBOL_TOKEN_BAR,
TOKEN_SEMI => return SYMBOL_TOKEN_SEMI,
TOKEN_HASH => return SYMBOL_TOKEN_HASH,
TOKEN_AMP => return SYMBOL_TOKEN_AMP,
TOKEN_SLASH => return SYMBOL_TOKEN_SLASH,
TOKEN_AT => return SYMBOL_TOKEN_AT,
TOKEN_PLUS => return SYMBOL_TOKEN_PLUS,
TOKEN_TILDE => return SYMBOL_TOKEN_TILDE,
TOKEN_STAR => return SYMBOL_TOKEN_STAR,
TOKEN_CARET => return SYMBOL_TOKEN_CARET,
TOKEN_SINGLEQUOTE => return SYMBOL_TOKEN_SINGLEQUOTE,
TOKEN_PERCENT => return SYMBOL_TOKEN_PERCENT,
TOKEN_QUESTION => return SYMBOL_TOKEN_QUESTION,
TOKEN_DOTDOT => return SYMBOL_TOKEN_DOTDOT,
TOKEN_COLONCOLON => return SYMBOL_TOKEN_COLONCOLON,
TOKEN_COLONEQUAL => return SYMBOL_TOKEN_COLONEQUAL,
TOKEN_COLONGREATER => return SYMBOL_TOKEN_COLONGREATER,
TOKEN_EQUALEQUAL => return SYMBOL_TOKEN_EQUALEQUAL,
TOKEN_UNDERUNDER => return SYMBOL_TOKEN_UNDERUNDER,
TOKEN_UNDERDOT => return SYMBOL_TOKEN_UNDERDOT,
TOKEN_LESSBAR => return SYMBOL_TOKEN_LESSBAR,
TOKEN_LESSLESS => return SYMBOL_TOKEN_LESSLESS,
TOKEN_LESSGREATER => return SYMBOL_TOKEN_LESSGREATER,
TOKEN_LESSEQUAL => return SYMBOL_TOKEN_LESSEQUAL,
TOKEN_GREATERGREATER => return SYMBOL_TOKEN_GREATERGREATER,
TOKEN_GREATEREQUAL => return SYMBOL_TOKEN_GREATEREQUAL,
TOKEN_MINUSGREATER => return SYMBOL_TOKEN_MINUSGREATER,
TOKEN_MINUSMINUS => return SYMBOL_TOKEN_MINUSMINUS,
TOKEN_MINUSEQUAL => return SYMBOL_TOKEN_MINUSEQUAL,
TOKEN_BARBAR => return SYMBOL_TOKEN_BARBAR,
TOKEN_BARGREATER => return SYMBOL_TOKEN_BARGREATER,
TOKEN_SEMISEMI => return SYMBOL_TOKEN_SEMISEMI,
TOKEN_AMPAMP => return SYMBOL_TOKEN_AMPAMP,
TOKEN_SLASHAT => return SYMBOL_TOKEN_SLASHAT,
TOKEN_SLASHSEMI => return SYMBOL_TOKEN_SLASHSEMI,
TOKEN_SLASHDOT => return SYMBOL_TOKEN_SLASHDOT,
TOKEN_SLASHSLASH => return SYMBOL_TOKEN_SLASHSLASH,
TOKEN_SLASHCOLON => return SYMBOL_TOKEN_SLASHCOLON,
TOKEN_SLASHEQUAL => return SYMBOL_TOKEN_SLASHEQUAL,
TOKEN_SLASHSTAR => return SYMBOL_TOKEN_SLASHSTAR,
TOKEN_ATAT => return SYMBOL_TOKEN_ATAT,
TOKEN_ATSTAR => return SYMBOL_TOKEN_ATSTAR,
TOKEN_PLUSPLUS => return SYMBOL_TOKEN_PLUSPLUS,
TOKEN_PLUSEQUAL => return SYMBOL_TOKEN_PLUSEQUAL,
TOKEN_TILDETILDE => return SYMBOL_TOKEN_TILDETILDE,
TOKEN_STAREQUAL => return SYMBOL_TOKEN_STAREQUAL,
TOKEN_STARSTAR => return SYMBOL_TOKEN_STARSTAR,
TOKEN_CARETEQUAL => return SYMBOL_TOKEN_CARETEQUAL,
TOKEN_HASHHASH => return SYMBOL_TOKEN_HASHHASH,
TOKEN_BANGEQUAL => return SYMBOL_TOKEN_BANGEQUAL,
TOKEN_BANGBANG => return SYMBOL_TOKEN_BANGBANG,
TOKEN_QUESTIONQUESTION => return SYMBOL_TOKEN_QUESTIONQUESTION,
TOKEN_DOTDOTDOT => return SYMBOL_TOKEN_DOTDOTDOT,
TOKEN_EQUALEQUALEQUAL => return SYMBOL_TOKEN_EQUALEQUALEQUAL,
TOKEN_EQUALBANGEQUAL => return SYMBOL_TOKEN_EQUALBANGEQUAL,
TOKEN_UNDERUNDERUNDER => return SYMBOL_TOKEN_UNDERUNDERUNDER,
TOKEN_SLASHSLASHDOT => return SYMBOL_TOKEN_SLASHSLASHDOT,
TOKEN_ATATAT => return SYMBOL_TOKEN_ATATAT,
TOKEN_LESSMINUSGREATER => return SYMBOL_TOKEN_LESSMINUSGREATER,
TOKEN_SLASHSLASHAT => return SYMBOL_TOKEN_SLASHSLASHAT,
TOKEN_CARETCOLONEQUAL => return SYMBOL_TOKEN_CARETCOLONEQUAL,
TOKEN_GREATERGREATERGREATER => return SYMBOL_TOKEN_GREATERGREATERGREATER,
TOKEN_BARMINUSGREATER => return SYMBOL_TOKEN_BARMINUSGREATER,
TOKEN_SLASHSLASHEQUAL => return SYMBOL_TOKEN_SLASHSLASHEQUAL,
TOKEN_COLONCOLONOPENSQUARE => return SYMBOL_TOKEN_COLONCOLONOPENSQUARE,
TOKEN_PERCENTPERCENT => return SYMBOL_TOKEN_PERCENTPERCENT,
TOKEN_LINEARSYNTAX_BANG => return SYMBOL_TOKEN_LINEARSYNTAX_BANG,
TOKEN_LINEARSYNTAX_CLOSEPAREN => return SYMBOL_TOKEN_LINEARSYNTAX_CLOSEPAREN,
TOKEN_LINEARSYNTAX_AT => return SYMBOL_TOKEN_LINEARSYNTAX_AT,
TOKEN_LINEARSYNTAX_AMP => return SYMBOL_TOKEN_LINEARSYNTAX_AMP,
TOKEN_LINEARSYNTAX_STAR => return SYMBOL_TOKEN_LINEARSYNTAX_STAR,
TOKEN_LINEARSYNTAX_UNDER => return SYMBOL_TOKEN_LINEARSYNTAX_UNDER,
TOKEN_LINEARSYNTAX_CARET => return SYMBOL_TOKEN_LINEARSYNTAX_CARET,
TOKEN_LINEARSYNTAX_SPACE => return SYMBOL_TOKEN_LINEARSYNTAX_SPACE,
TOKEN_LINEARSYNTAX_PERCENT => return SYMBOL_TOKEN_LINEARSYNTAX_PERCENT,
TOKEN_LINEARSYNTAX_PLUS => return SYMBOL_TOKEN_LINEARSYNTAX_PLUS,
TOKEN_LINEARSYNTAX_SLASH => return SYMBOL_TOKEN_LINEARSYNTAX_SLASH,
TOKEN_LINEARSYNTAX_BACKTICK => return SYMBOL_TOKEN_LINEARSYNTAX_BACKTICK,
TOKEN_FAKE_IMPLICITTIMES => return SYMBOL_TOKEN_FAKE_IMPLICITTIMES,
TOKEN_FAKE_IMPLICITNULL => return SYMBOL_TOKEN_FAKE_IMPLICITNULL,
TOKEN_FAKE_IMPLICITONE => return SYMBOL_TOKEN_FAKE_IMPLICITONE,
TOKEN_FAKE_IMPLICITALL => return SYMBOL_TOKEN_FAKE_IMPLICITALL,
TOKEN_BOXES_OPENPARENSTAR => return SYMBOL_TOKEN_BOXES_OPENPARENSTAR,
TOKEN_BOXES_STARCLOSEPAREN => return SYMBOL_TOKEN_BOXES_STARCLOSEPAREN,
TOKEN_BOXES_MULTISINGLEQUOTE => return SYMBOL_TOKEN_BOXES_MULTISINGLEQUOTE,
TOKEN_BOXES_MULTIWHITESPACE => return SYMBOL_TOKEN_BOXES_MULTIWHITESPACE,
TOKEN_LONGNAME_NOT => return SYMBOL_TOKEN_LONGNAME_NOT,
TOKEN_LONGNAME_PLUSMINUS => return SYMBOL_TOKEN_LONGNAME_PLUSMINUS,
TOKEN_LONGNAME_CENTERDOT => return SYMBOL_TOKEN_LONGNAME_CENTERDOT,
TOKEN_LONGNAME_TIMES => return SYMBOL_TOKEN_LONGNAME_TIMES,
TOKEN_LONGNAME_DIVIDE => return SYMBOL_TOKEN_LONGNAME_DIVIDE,
TOKEN_LONGNAME_OPENCURLYQUOTE => return SYMBOL_TOKEN_LONGNAME_OPENCURLYQUOTE,
TOKEN_LONGNAME_CLOSECURLYQUOTE => return SYMBOL_TOKEN_LONGNAME_CLOSECURLYQUOTE,
TOKEN_LONGNAME_OPENCURLYDOUBLEQUOTE => return SYMBOL_TOKEN_LONGNAME_OPENCURLYDOUBLEQUOTE,
TOKEN_LONGNAME_CLOSECURLYDOUBLEQUOTE => return SYMBOL_TOKEN_LONGNAME_CLOSECURLYDOUBLEQUOTE,
TOKEN_LONGNAME_INVISIBLETIMES => return SYMBOL_TOKEN_LONGNAME_INVISIBLETIMES,
TOKEN_LONGNAME_LEFTARROW => return SYMBOL_TOKEN_LONGNAME_LEFTARROW,
TOKEN_LONGNAME_UPARROW => return SYMBOL_TOKEN_LONGNAME_UPARROW,
TOKEN_LONGNAME_RIGHTARROW => return SYMBOL_TOKEN_LONGNAME_RIGHTARROW,
TOKEN_LONGNAME_DOWNARROW => return SYMBOL_TOKEN_LONGNAME_DOWNARROW,
TOKEN_LONGNAME_LEFTRIGHTARROW => return SYMBOL_TOKEN_LONGNAME_LEFTRIGHTARROW,
TOKEN_LONGNAME_UPDOWNARROW => return SYMBOL_TOKEN_LONGNAME_UPDOWNARROW,
TOKEN_LONGNAME_UPPERLEFTARROW => return SYMBOL_TOKEN_LONGNAME_UPPERLEFTARROW,
TOKEN_LONGNAME_UPPERRIGHTARROW => return SYMBOL_TOKEN_LONGNAME_UPPERRIGHTARROW,
TOKEN_LONGNAME_LOWERRIGHTARROW => return SYMBOL_TOKEN_LONGNAME_LOWERRIGHTARROW,
TOKEN_LONGNAME_LOWERLEFTARROW => return SYMBOL_TOKEN_LONGNAME_LOWERLEFTARROW,
TOKEN_LONGNAME_LEFTTEEARROW => return SYMBOL_TOKEN_LONGNAME_LEFTTEEARROW,
TOKEN_LONGNAME_UPTEEARROW => return SYMBOL_TOKEN_LONGNAME_UPTEEARROW,
TOKEN_LONGNAME_RIGHTTEEARROW => return SYMBOL_TOKEN_LONGNAME_RIGHTTEEARROW,
TOKEN_LONGNAME_DOWNTEEARROW => return SYMBOL_TOKEN_LONGNAME_DOWNTEEARROW,
TOKEN_LONGNAME_LEFTVECTOR => return SYMBOL_TOKEN_LONGNAME_LEFTVECTOR,
TOKEN_LONGNAME_DOWNLEFTVECTOR => return SYMBOL_TOKEN_LONGNAME_DOWNLEFTVECTOR,
TOKEN_LONGNAME_RIGHTUPVECTOR => return SYMBOL_TOKEN_LONGNAME_RIGHTUPVECTOR,
TOKEN_LONGNAME_LEFTUPVECTOR => return SYMBOL_TOKEN_LONGNAME_LEFTUPVECTOR,
TOKEN_LONGNAME_RIGHTVECTOR => return SYMBOL_TOKEN_LONGNAME_RIGHTVECTOR,
TOKEN_LONGNAME_DOWNRIGHTVECTOR => return SYMBOL_TOKEN_LONGNAME_DOWNRIGHTVECTOR,
TOKEN_LONGNAME_RIGHTDOWNVECTOR => return SYMBOL_TOKEN_LONGNAME_RIGHTDOWNVECTOR,
TOKEN_LONGNAME_LEFTDOWNVECTOR => return SYMBOL_TOKEN_LONGNAME_LEFTDOWNVECTOR,
TOKEN_LONGNAME_RIGHTARROWLEFTARROW => return SYMBOL_TOKEN_LONGNAME_RIGHTARROWLEFTARROW,
TOKEN_LONGNAME_UPARROWDOWNARROW => return SYMBOL_TOKEN_LONGNAME_UPARROWDOWNARROW,
TOKEN_LONGNAME_LEFTARROWRIGHTARROW => return SYMBOL_TOKEN_LONGNAME_LEFTARROWRIGHTARROW,
TOKEN_LONGNAME_REVERSEEQUILIBRIUM => return SYMBOL_TOKEN_LONGNAME_REVERSEEQUILIBRIUM,
TOKEN_LONGNAME_EQUILIBRIUM => return SYMBOL_TOKEN_LONGNAME_EQUILIBRIUM,
TOKEN_LONGNAME_DOUBLELEFTARROW => return SYMBOL_TOKEN_LONGNAME_DOUBLELEFTARROW,
TOKEN_LONGNAME_DOUBLEUPARROW => return SYMBOL_TOKEN_LONGNAME_DOUBLEUPARROW,
TOKEN_LONGNAME_DOUBLERIGHTARROW => return SYMBOL_TOKEN_LONGNAME_DOUBLERIGHTARROW,
TOKEN_LONGNAME_DOUBLEDOWNARROW => return SYMBOL_TOKEN_LONGNAME_DOUBLEDOWNARROW,
TOKEN_LONGNAME_DOUBLELEFTRIGHTARROW => return SYMBOL_TOKEN_LONGNAME_DOUBLELEFTRIGHTARROW,
TOKEN_LONGNAME_DOUBLEUPDOWNARROW => return SYMBOL_TOKEN_LONGNAME_DOUBLEUPDOWNARROW,
TOKEN_LONGNAME_LEFTARROWBAR => return SYMBOL_TOKEN_LONGNAME_LEFTARROWBAR,
TOKEN_LONGNAME_RIGHTARROWBAR => return SYMBOL_TOKEN_LONGNAME_RIGHTARROWBAR,
TOKEN_LONGNAME_DOWNARROWUPARROW => return SYMBOL_TOKEN_LONGNAME_DOWNARROWUPARROW,
TOKEN_LONGNAME_FORALL => return SYMBOL_TOKEN_LONGNAME_FORALL,
TOKEN_LONGNAME_PARTIALD => return SYMBOL_TOKEN_LONGNAME_PARTIALD,
TOKEN_LONGNAME_EXISTS => return SYMBOL_TOKEN_LONGNAME_EXISTS,
TOKEN_LONGNAME_NOTEXISTS => return SYMBOL_TOKEN_LONGNAME_NOTEXISTS,
TOKEN_LONGNAME_LAPLACIAN => return SYMBOL_TOKEN_LONGNAME_LAPLACIAN,
TOKEN_LONGNAME_DEL => return SYMBOL_TOKEN_LONGNAME_DEL,
TOKEN_LONGNAME_ELEMENT => return SYMBOL_TOKEN_LONGNAME_ELEMENT,
TOKEN_LONGNAME_NOTELEMENT => return SYMBOL_TOKEN_LONGNAME_NOTELEMENT,
TOKEN_LONGNAME_REVERSEELEMENT => return SYMBOL_TOKEN_LONGNAME_REVERSEELEMENT,
TOKEN_LONGNAME_NOTREVERSEELEMENT => return SYMBOL_TOKEN_LONGNAME_NOTREVERSEELEMENT,
TOKEN_LONGNAME_SUCHTHAT => return SYMBOL_TOKEN_LONGNAME_SUCHTHAT,
TOKEN_LONGNAME_PRODUCT => return SYMBOL_TOKEN_LONGNAME_PRODUCT,
TOKEN_LONGNAME_COPRODUCT => return SYMBOL_TOKEN_LONGNAME_COPRODUCT,
TOKEN_LONGNAME_SUM => return SYMBOL_TOKEN_LONGNAME_SUM,
TOKEN_LONGNAME_MINUS => return SYMBOL_TOKEN_LONGNAME_MINUS,
TOKEN_LONGNAME_MINUSPLUS => return SYMBOL_TOKEN_LONGNAME_MINUSPLUS,
TOKEN_LONGNAME_DIVISIONSLASH => return SYMBOL_TOKEN_LONGNAME_DIVISIONSLASH,
TOKEN_LONGNAME_BACKSLASH => return SYMBOL_TOKEN_LONGNAME_BACKSLASH,
TOKEN_LONGNAME_SMALLCIRCLE => return SYMBOL_TOKEN_LONGNAME_SMALLCIRCLE,
TOKEN_LONGNAME_SQRT => return SYMBOL_TOKEN_LONGNAME_SQRT,
TOKEN_LONGNAME_CUBEROOT => return SYMBOL_TOKEN_LONGNAME_CUBEROOT,
TOKEN_LONGNAME_PROPORTIONAL => return SYMBOL_TOKEN_LONGNAME_PROPORTIONAL,
TOKEN_LONGNAME_DIVIDES => return SYMBOL_TOKEN_LONGNAME_DIVIDES,
TOKEN_LONGNAME_DOUBLEVERTICALBAR => return SYMBOL_TOKEN_LONGNAME_DOUBLEVERTICALBAR,
TOKEN_LONGNAME_NOTDOUBLEVERTICALBAR => return SYMBOL_TOKEN_LONGNAME_NOTDOUBLEVERTICALBAR,
TOKEN_LONGNAME_AND => return SYMBOL_TOKEN_LONGNAME_AND,
TOKEN_LONGNAME_OR => return SYMBOL_TOKEN_LONGNAME_OR,
TOKEN_LONGNAME_INTEGRAL => return SYMBOL_TOKEN_LONGNAME_INTEGRAL,
TOKEN_LONGNAME_CONTOURINTEGRAL => return SYMBOL_TOKEN_LONGNAME_CONTOURINTEGRAL,
TOKEN_LONGNAME_DOUBLECONTOURINTEGRAL => return SYMBOL_TOKEN_LONGNAME_DOUBLECONTOURINTEGRAL,
TOKEN_LONGNAME_CLOCKWISECONTOURINTEGRAL => return SYMBOL_TOKEN_LONGNAME_CLOCKWISECONTOURINTEGRAL,
TOKEN_LONGNAME_COUNTERCLOCKWISECONTOURINTEGRAL => return SYMBOL_TOKEN_LONGNAME_COUNTERCLOCKWISECONTOURINTEGRAL,
TOKEN_LONGNAME_THEREFORE => return SYMBOL_TOKEN_LONGNAME_THEREFORE,
TOKEN_LONGNAME_BECAUSE => return SYMBOL_TOKEN_LONGNAME_BECAUSE,
TOKEN_LONGNAME_COLON => return SYMBOL_TOKEN_LONGNAME_COLON,
TOKEN_LONGNAME_PROPORTION => return SYMBOL_TOKEN_LONGNAME_PROPORTION,
TOKEN_LONGNAME_TILDE => return SYMBOL_TOKEN_LONGNAME_TILDE,
TOKEN_LONGNAME_VERTICALTILDE => return SYMBOL_TOKEN_LONGNAME_VERTICALTILDE,
TOKEN_LONGNAME_NOTTILDE => return SYMBOL_TOKEN_LONGNAME_NOTTILDE,
TOKEN_LONGNAME_EQUALTILDE => return SYMBOL_TOKEN_LONGNAME_EQUALTILDE,
TOKEN_LONGNAME_TILDEEQUAL => return SYMBOL_TOKEN_LONGNAME_TILDEEQUAL,
TOKEN_LONGNAME_NOTTILDEEQUAL => return SYMBOL_TOKEN_LONGNAME_NOTTILDEEQUAL,
TOKEN_LONGNAME_TILDEFULLEQUAL => return SYMBOL_TOKEN_LONGNAME_TILDEFULLEQUAL,
TOKEN_LONGNAME_NOTTILDEFULLEQUAL => return SYMBOL_TOKEN_LONGNAME_NOTTILDEFULLEQUAL,
TOKEN_LONGNAME_TILDETILDE => return SYMBOL_TOKEN_LONGNAME_TILDETILDE,
TOKEN_LONGNAME_NOTTILDETILDE => return SYMBOL_TOKEN_LONGNAME_NOTTILDETILDE,
TOKEN_LONGNAME_CUPCAP => return SYMBOL_TOKEN_LONGNAME_CUPCAP,
TOKEN_LONGNAME_HUMPDOWNHUMP => return SYMBOL_TOKEN_LONGNAME_HUMPDOWNHUMP,
TOKEN_LONGNAME_HUMPEQUAL => return SYMBOL_TOKEN_LONGNAME_HUMPEQUAL,
TOKEN_LONGNAME_DOTEQUAL => return SYMBOL_TOKEN_LONGNAME_DOTEQUAL,
TOKEN_LONGNAME_NOTEQUAL => return SYMBOL_TOKEN_LONGNAME_NOTEQUAL,
TOKEN_LONGNAME_CONGRUENT => return SYMBOL_TOKEN_LONGNAME_CONGRUENT,
TOKEN_LONGNAME_NOTCONGRUENT => return SYMBOL_TOKEN_LONGNAME_NOTCONGRUENT,
TOKEN_LONGNAME_LESSEQUAL => return SYMBOL_TOKEN_LONGNAME_LESSEQUAL,
TOKEN_LONGNAME_GREATEREQUAL => return SYMBOL_TOKEN_LONGNAME_GREATEREQUAL,
TOKEN_LONGNAME_LESSFULLEQUAL => return SYMBOL_TOKEN_LONGNAME_LESSFULLEQUAL,
TOKEN_LONGNAME_GREATERFULLEQUAL => return SYMBOL_TOKEN_LONGNAME_GREATERFULLEQUAL,
TOKEN_LONGNAME_NOTLESSFULLEQUAL => return SYMBOL_TOKEN_LONGNAME_NOTLESSFULLEQUAL,
TOKEN_LONGNAME_NOTGREATERFULLEQUAL => return SYMBOL_TOKEN_LONGNAME_NOTGREATERFULLEQUAL,
TOKEN_LONGNAME_LESSLESS => return SYMBOL_TOKEN_LONGNAME_LESSLESS,
TOKEN_LONGNAME_GREATERGREATER => return SYMBOL_TOKEN_LONGNAME_GREATERGREATER,
TOKEN_LONGNAME_NOTCUPCAP => return SYMBOL_TOKEN_LONGNAME_NOTCUPCAP,
TOKEN_LONGNAME_NOTLESS => return SYMBOL_TOKEN_LONGNAME_NOTLESS,
TOKEN_LONGNAME_NOTGREATER => return SYMBOL_TOKEN_LONGNAME_NOTGREATER,
TOKEN_LONGNAME_NOTLESSEQUAL => return SYMBOL_TOKEN_LONGNAME_NOTLESSEQUAL,
TOKEN_LONGNAME_NOTGREATEREQUAL => return SYMBOL_TOKEN_LONGNAME_NOTGREATEREQUAL,
TOKEN_LONGNAME_LESSTILDE => return SYMBOL_TOKEN_LONGNAME_LESSTILDE,
TOKEN_LONGNAME_GREATERTILDE => return SYMBOL_TOKEN_LONGNAME_GREATERTILDE,
TOKEN_LONGNAME_NOTLESSTILDE => return SYMBOL_TOKEN_LONGNAME_NOTLESSTILDE,
TOKEN_LONGNAME_NOTGREATERTILDE => return SYMBOL_TOKEN_LONGNAME_NOTGREATERTILDE,
TOKEN_LONGNAME_LESSGREATER => return SYMBOL_TOKEN_LONGNAME_LESSGREATER,
TOKEN_LONGNAME_GREATERLESS => return SYMBOL_TOKEN_LONGNAME_GREATERLESS,
TOKEN_LONGNAME_NOTLESSGREATER => return SYMBOL_TOKEN_LONGNAME_NOTLESSGREATER,
TOKEN_LONGNAME_NOTGREATERLESS => return SYMBOL_TOKEN_LONGNAME_NOTGREATERLESS,
TOKEN_LONGNAME_PRECEDES => return SYMBOL_TOKEN_LONGNAME_PRECEDES,
TOKEN_LONGNAME_SUCCEEDS => return SYMBOL_TOKEN_LONGNAME_SUCCEEDS,
TOKEN_LONGNAME_PRECEDESSLANTEQUAL => return SYMBOL_TOKEN_LONGNAME_PRECEDESSLANTEQUAL,
TOKEN_LONGNAME_SUCCEEDSSLANTEQUAL => return SYMBOL_TOKEN_LONGNAME_SUCCEEDSSLANTEQUAL,
TOKEN_LONGNAME_PRECEDESTILDE => return SYMBOL_TOKEN_LONGNAME_PRECEDESTILDE,
TOKEN_LONGNAME_SUCCEEDSTILDE => return SYMBOL_TOKEN_LONGNAME_SUCCEEDSTILDE,
TOKEN_LONGNAME_NOTPRECEDES => return SYMBOL_TOKEN_LONGNAME_NOTPRECEDES,
TOKEN_LONGNAME_NOTSUCCEEDS => return SYMBOL_TOKEN_LONGNAME_NOTSUCCEEDS,
TOKEN_LONGNAME_SUBSET => return SYMBOL_TOKEN_LONGNAME_SUBSET,
TOKEN_LONGNAME_SUPERSET => return SYMBOL_TOKEN_LONGNAME_SUPERSET,
TOKEN_LONGNAME_NOTSUBSET => return SYMBOL_TOKEN_LONGNAME_NOTSUBSET,
TOKEN_LONGNAME_NOTSUPERSET => return SYMBOL_TOKEN_LONGNAME_NOTSUPERSET,
TOKEN_LONGNAME_SUBSETEQUAL => return SYMBOL_TOKEN_LONGNAME_SUBSETEQUAL,
TOKEN_LONGNAME_SUPERSETEQUAL => return SYMBOL_TOKEN_LONGNAME_SUPERSETEQUAL,
TOKEN_LONGNAME_NOTSUBSETEQUAL => return SYMBOL_TOKEN_LONGNAME_NOTSUBSETEQUAL,
TOKEN_LONGNAME_NOTSUPERSETEQUAL => return SYMBOL_TOKEN_LONGNAME_NOTSUPERSETEQUAL,
TOKEN_LONGNAME_UNIONPLUS => return SYMBOL_TOKEN_LONGNAME_UNIONPLUS,
TOKEN_LONGNAME_SQUARESUBSET => return SYMBOL_TOKEN_LONGNAME_SQUARESUBSET,
TOKEN_LONGNAME_SQUARESUPERSET => return SYMBOL_TOKEN_LONGNAME_SQUARESUPERSET,
TOKEN_LONGNAME_SQUARESUBSETEQUAL => return SYMBOL_TOKEN_LONGNAME_SQUARESUBSETEQUAL,
TOKEN_LONGNAME_SQUARESUPERSETEQUAL => return SYMBOL_TOKEN_LONGNAME_SQUARESUPERSETEQUAL,
TOKEN_LONGNAME_SQUAREINTERSECTION => return SYMBOL_TOKEN_LONGNAME_SQUAREINTERSECTION,
TOKEN_LONGNAME_SQUAREUNION => return SYMBOL_TOKEN_LONGNAME_SQUAREUNION,
TOKEN_LONGNAME_CIRCLEPLUS => return SYMBOL_TOKEN_LONGNAME_CIRCLEPLUS,
TOKEN_LONGNAME_CIRCLEMINUS => return SYMBOL_TOKEN_LONGNAME_CIRCLEMINUS,
TOKEN_LONGNAME_CIRCLETIMES => return SYMBOL_TOKEN_LONGNAME_CIRCLETIMES,
TOKEN_LONGNAME_CIRCLEDOT => return SYMBOL_TOKEN_LONGNAME_CIRCLEDOT,
TOKEN_LONGNAME_RIGHTTEE => return SYMBOL_TOKEN_LONGNAME_RIGHTTEE,
TOKEN_LONGNAME_LEFTTEE => return SYMBOL_TOKEN_LONGNAME_LEFTTEE,
TOKEN_LONGNAME_DOWNTEE => return SYMBOL_TOKEN_LONGNAME_DOWNTEE,
TOKEN_LONGNAME_UPTEE => return SYMBOL_TOKEN_LONGNAME_UPTEE,
TOKEN_LONGNAME_DOUBLERIGHTTEE => return SYMBOL_TOKEN_LONGNAME_DOUBLERIGHTTEE,
TOKEN_LONGNAME_LEFTTRIANGLE => return SYMBOL_TOKEN_LONGNAME_LEFTTRIANGLE,
TOKEN_LONGNAME_RIGHTTRIANGLE => return SYMBOL_TOKEN_LONGNAME_RIGHTTRIANGLE,
TOKEN_LONGNAME_LEFTTRIANGLEEQUAL => return SYMBOL_TOKEN_LONGNAME_LEFTTRIANGLEEQUAL,
TOKEN_LONGNAME_RIGHTTRIANGLEEQUAL => return SYMBOL_TOKEN_LONGNAME_RIGHTTRIANGLEEQUAL,
TOKEN_LONGNAME_XOR => return SYMBOL_TOKEN_LONGNAME_XOR,
TOKEN_LONGNAME_NAND => return SYMBOL_TOKEN_LONGNAME_NAND,
TOKEN_LONGNAME_NOR => return SYMBOL_TOKEN_LONGNAME_NOR,
TOKEN_LONGNAME_WEDGE => return SYMBOL_TOKEN_LONGNAME_WEDGE,
TOKEN_LONGNAME_VEE => return SYMBOL_TOKEN_LONGNAME_VEE,
TOKEN_LONGNAME_INTERSECTION => return SYMBOL_TOKEN_LONGNAME_INTERSECTION,
TOKEN_LONGNAME_UNION => return SYMBOL_TOKEN_LONGNAME_UNION,
TOKEN_LONGNAME_DIAMOND => return SYMBOL_TOKEN_LONGNAME_DIAMOND,
TOKEN_LONGNAME_STAR => return SYMBOL_TOKEN_LONGNAME_STAR,
TOKEN_LONGNAME_LESSEQUALGREATER => return SYMBOL_TOKEN_LONGNAME_LESSEQUALGREATER,
TOKEN_LONGNAME_GREATEREQUALLESS => return SYMBOL_TOKEN_LONGNAME_GREATEREQUALLESS,
TOKEN_LONGNAME_NOTPRECEDESSLANTEQUAL => return SYMBOL_TOKEN_LONGNAME_NOTPRECEDESSLANTEQUAL,
TOKEN_LONGNAME_NOTSUCCEEDSSLANTEQUAL => return SYMBOL_TOKEN_LONGNAME_NOTSUCCEEDSSLANTEQUAL,
TOKEN_LONGNAME_NOTSQUARESUBSETEQUAL => return SYMBOL_TOKEN_LONGNAME_NOTSQUARESUBSETEQUAL,
TOKEN_LONGNAME_NOTSQUARESUPERSETEQUAL => return SYMBOL_TOKEN_LONGNAME_NOTSQUARESUPERSETEQUAL,
TOKEN_LONGNAME_NOTPRECEDESTILDE => return SYMBOL_TOKEN_LONGNAME_NOTPRECEDESTILDE,
TOKEN_LONGNAME_NOTSUCCEEDSTILDE => return SYMBOL_TOKEN_LONGNAME_NOTSUCCEEDSTILDE,
TOKEN_LONGNAME_NOTLEFTTRIANGLE => return SYMBOL_TOKEN_LONGNAME_NOTLEFTTRIANGLE,
TOKEN_LONGNAME_NOTRIGHTTRIANGLE => return SYMBOL_TOKEN_LONGNAME_NOTRIGHTTRIANGLE,
TOKEN_LONGNAME_NOTLEFTTRIANGLEEQUAL => return SYMBOL_TOKEN_LONGNAME_NOTLEFTTRIANGLEEQUAL,
TOKEN_LONGNAME_NOTRIGHTTRIANGLEEQUAL => return SYMBOL_TOKEN_LONGNAME_NOTRIGHTTRIANGLEEQUAL,
TOKEN_LONGNAME_LEFTCEILING => return SYMBOL_TOKEN_LONGNAME_LEFTCEILING,
TOKEN_LONGNAME_RIGHTCEILING => return SYMBOL_TOKEN_LONGNAME_RIGHTCEILING,
TOKEN_LONGNAME_LEFTFLOOR => return SYMBOL_TOKEN_LONGNAME_LEFTFLOOR,
TOKEN_LONGNAME_RIGHTFLOOR => return SYMBOL_TOKEN_LONGNAME_RIGHTFLOOR,
TOKEN_LONGNAME_CAP => return SYMBOL_TOKEN_LONGNAME_CAP,
TOKEN_LONGNAME_CUP => return SYMBOL_TOKEN_LONGNAME_CUP,
TOKEN_LONGNAME_LEFTANGLEBRACKET => return SYMBOL_TOKEN_LONGNAME_LEFTANGLEBRACKET,
TOKEN_LONGNAME_RIGHTANGLEBRACKET => return SYMBOL_TOKEN_LONGNAME_RIGHTANGLEBRACKET,
TOKEN_LONGNAME_PERPENDICULAR => return SYMBOL_TOKEN_LONGNAME_PERPENDICULAR,
TOKEN_LONGNAME_LONGLEFTARROW => return SYMBOL_TOKEN_LONGNAME_LONGLEFTARROW,
TOKEN_LONGNAME_LONGRIGHTARROW => return SYMBOL_TOKEN_LONGNAME_LONGRIGHTARROW,
TOKEN_LONGNAME_LONGLEFTRIGHTARROW => return SYMBOL_TOKEN_LONGNAME_LONGLEFTRIGHTARROW,
TOKEN_LONGNAME_DOUBLELONGLEFTARROW => return SYMBOL_TOKEN_LONGNAME_DOUBLELONGLEFTARROW,
TOKEN_LONGNAME_DOUBLELONGRIGHTARROW => return SYMBOL_TOKEN_LONGNAME_DOUBLELONGRIGHTARROW,
TOKEN_LONGNAME_DOUBLELONGLEFTRIGHTARROW => return SYMBOL_TOKEN_LONGNAME_DOUBLELONGLEFTRIGHTARROW,
TOKEN_LONGNAME_UPARROWBAR => return SYMBOL_TOKEN_LONGNAME_UPARROWBAR,
TOKEN_LONGNAME_DOWNARROWBAR => return SYMBOL_TOKEN_LONGNAME_DOWNARROWBAR,
TOKEN_LONGNAME_LEFTRIGHTVECTOR => return SYMBOL_TOKEN_LONGNAME_LEFTRIGHTVECTOR,
TOKEN_LONGNAME_RIGHTUPDOWNVECTOR => return SYMBOL_TOKEN_LONGNAME_RIGHTUPDOWNVECTOR,
TOKEN_LONGNAME_DOWNLEFTRIGHTVECTOR => return SYMBOL_TOKEN_LONGNAME_DOWNLEFTRIGHTVECTOR,
TOKEN_LONGNAME_LEFTUPDOWNVECTOR => return SYMBOL_TOKEN_LONGNAME_LEFTUPDOWNVECTOR,
TOKEN_LONGNAME_LEFTVECTORBAR => return SYMBOL_TOKEN_LONGNAME_LEFTVECTORBAR,
TOKEN_LONGNAME_RIGHTVECTORBAR => return SYMBOL_TOKEN_LONGNAME_RIGHTVECTORBAR,
TOKEN_LONGNAME_RIGHTUPVECTORBAR => return SYMBOL_TOKEN_LONGNAME_RIGHTUPVECTORBAR,
TOKEN_LONGNAME_RIGHTDOWNVECTORBAR => return SYMBOL_TOKEN_LONGNAME_RIGHTDOWNVECTORBAR,
TOKEN_LONGNAME_DOWNLEFTVECTORBAR => return SYMBOL_TOKEN_LONGNAME_DOWNLEFTVECTORBAR,
TOKEN_LONGNAME_DOWNRIGHTVECTORBAR => return SYMBOL_TOKEN_LONGNAME_DOWNRIGHTVECTORBAR,
TOKEN_LONGNAME_LEFTUPVECTORBAR => return SYMBOL_TOKEN_LONGNAME_LEFTUPVECTORBAR,
TOKEN_LONGNAME_LEFTDOWNVECTORBAR => return SYMBOL_TOKEN_LONGNAME_LEFTDOWNVECTORBAR,
TOKEN_LONGNAME_LEFTTEEVECTOR => return SYMBOL_TOKEN_LONGNAME_LEFTTEEVECTOR,
TOKEN_LONGNAME_RIGHTTEEVECTOR => return SYMBOL_TOKEN_LONGNAME_RIGHTTEEVECTOR,
TOKEN_LONGNAME_RIGHTUPTEEVECTOR => return SYMBOL_TOKEN_LONGNAME_RIGHTUPTEEVECTOR,
TOKEN_LONGNAME_RIGHTDOWNTEEVECTOR => return SYMBOL_TOKEN_LONGNAME_RIGHTDOWNTEEVECTOR,
TOKEN_LONGNAME_DOWNLEFTTEEVECTOR => return SYMBOL_TOKEN_LONGNAME_DOWNLEFTTEEVECTOR,
TOKEN_LONGNAME_DOWNRIGHTTEEVECTOR => return SYMBOL_TOKEN_LONGNAME_DOWNRIGHTTEEVECTOR,
TOKEN_LONGNAME_LEFTUPTEEVECTOR => return SYMBOL_TOKEN_LONGNAME_LEFTUPTEEVECTOR,
TOKEN_LONGNAME_LEFTDOWNTEEVECTOR => return SYMBOL_TOKEN_LONGNAME_LEFTDOWNTEEVECTOR,
TOKEN_LONGNAME_UPEQUILIBRIUM => return SYMBOL_TOKEN_LONGNAME_UPEQUILIBRIUM,
TOKEN_LONGNAME_REVERSEUPEQUILIBRIUM => return SYMBOL_TOKEN_LONGNAME_REVERSEUPEQUILIBRIUM,
TOKEN_LONGNAME_ROUNDIMPLIES => return SYMBOL_TOKEN_LONGNAME_ROUNDIMPLIES,
TOKEN_LONGNAME_LEFTTRIANGLEBAR => return SYMBOL_TOKEN_LONGNAME_LEFTTRIANGLEBAR,
TOKEN_LONGNAME_RIGHTTRIANGLEBAR => return SYMBOL_TOKEN_LONGNAME_RIGHTTRIANGLEBAR,
TOKEN_LONGNAME_EQUIVALENT => return SYMBOL_TOKEN_LONGNAME_EQUIVALENT,
TOKEN_LONGNAME_LESSSLANTEQUAL => return SYMBOL_TOKEN_LONGNAME_LESSSLANTEQUAL,
TOKEN_LONGNAME_GREATERSLANTEQUAL => return SYMBOL_TOKEN_LONGNAME_GREATERSLANTEQUAL,
TOKEN_LONGNAME_NESTEDLESSLESS => return SYMBOL_TOKEN_LONGNAME_NESTEDLESSLESS,
TOKEN_LONGNAME_NESTEDGREATERGREATER => return SYMBOL_TOKEN_LONGNAME_NESTEDGREATERGREATER,
TOKEN_LONGNAME_PRECEDESEQUAL => return SYMBOL_TOKEN_LONGNAME_PRECEDESEQUAL,
TOKEN_LONGNAME_SUCCEEDSEQUAL => return SYMBOL_TOKEN_LONGNAME_SUCCEEDSEQUAL,
TOKEN_LONGNAME_DOUBLELEFTTEE => return SYMBOL_TOKEN_LONGNAME_DOUBLELEFTTEE,
TOKEN_LONGNAME_LEFTDOUBLEBRACKET => return SYMBOL_TOKEN_LONGNAME_LEFTDOUBLEBRACKET,
TOKEN_LONGNAME_RIGHTDOUBLEBRACKET => return SYMBOL_TOKEN_LONGNAME_RIGHTDOUBLEBRACKET,
TOKEN_LONGNAME_LEFTASSOCIATION => return SYMBOL_TOKEN_LONGNAME_LEFTASSOCIATION,
TOKEN_LONGNAME_RIGHTASSOCIATION => return SYMBOL_TOKEN_LONGNAME_RIGHTASSOCIATION,
TOKEN_LONGNAME_TWOWAYRULE => return SYMBOL_TOKEN_LONGNAME_TWOWAYRULE,
TOKEN_LONGNAME_PIECEWISE => return SYMBOL_TOKEN_LONGNAME_PIECEWISE,
TOKEN_LONGNAME_IMPLICITPLUS => return SYMBOL_TOKEN_LONGNAME_IMPLICITPLUS,
TOKEN_LONGNAME_AUTOLEFTMATCH => return SYMBOL_TOKEN_LONGNAME_AUTOLEFTMATCH,
TOKEN_LONGNAME_AUTORIGHTMATCH => return SYMBOL_TOKEN_LONGNAME_AUTORIGHTMATCH,
TOKEN_LONGNAME_INVISIBLEPREFIXSCRIPTBASE => return SYMBOL_TOKEN_LONGNAME_INVISIBLEPREFIXSCRIPTBASE,
TOKEN_LONGNAME_INVISIBLEPOSTFIXSCRIPTBASE => return SYMBOL_TOKEN_LONGNAME_INVISIBLEPOSTFIXSCRIPTBASE,
TOKEN_LONGNAME_TRANSPOSE => return SYMBOL_TOKEN_LONGNAME_TRANSPOSE,
TOKEN_LONGNAME_CONJUGATE => return SYMBOL_TOKEN_LONGNAME_CONJUGATE,
TOKEN_LONGNAME_CONJUGATETRANSPOSE => return SYMBOL_TOKEN_LONGNAME_CONJUGATETRANSPOSE,
TOKEN_LONGNAME_HERMITIANCONJUGATE => return SYMBOL_TOKEN_LONGNAME_HERMITIANCONJUGATE,
TOKEN_LONGNAME_VERTICALBAR => return SYMBOL_TOKEN_LONGNAME_VERTICALBAR,
TOKEN_LONGNAME_NOTVERTICALBAR => return SYMBOL_TOKEN_LONGNAME_NOTVERTICALBAR,
TOKEN_LONGNAME_DISTRIBUTED => return SYMBOL_TOKEN_LONGNAME_DISTRIBUTED,
TOKEN_LONGNAME_CONDITIONED => return SYMBOL_TOKEN_LONGNAME_CONDITIONED,
TOKEN_LONGNAME_UNDIRECTEDEDGE => return SYMBOL_TOKEN_LONGNAME_UNDIRECTEDEDGE,
TOKEN_LONGNAME_DIRECTEDEDGE => return SYMBOL_TOKEN_LONGNAME_DIRECTEDEDGE,
TOKEN_LONGNAME_GRADIENT => return SYMBOL_TOKEN_LONGNAME_GRADIENT,
TOKEN_LONGNAME_DIVERGENCE => return SYMBOL_TOKEN_LONGNAME_DIVERGENCE,
TOKEN_LONGNAME_CURL => return SYMBOL_TOKEN_LONGNAME_CURL,
TOKEN_LONGNAME_CONTINUEDFRACTIONK => return SYMBOL_TOKEN_LONGNAME_CONTINUEDFRACTIONK,
TOKEN_LONGNAME_TENSORPRODUCT => return SYMBOL_TOKEN_LONGNAME_TENSORPRODUCT,
TOKEN_LONGNAME_TENSORWEDGE => return SYMBOL_TOKEN_LONGNAME_TENSORWEDGE,
TOKEN_LONGNAME_PROBABILITYPR => return SYMBOL_TOKEN_LONGNAME_PROBABILITYPR,
TOKEN_LONGNAME_EXPECTATIONE => return SYMBOL_TOKEN_LONGNAME_EXPECTATIONE,
TOKEN_LONGNAME_PERMUTATIONPRODUCT => return SYMBOL_TOKEN_LONGNAME_PERMUTATIONPRODUCT,
TOKEN_LONGNAME_NOTEQUALTILDE => return SYMBOL_TOKEN_LONGNAME_NOTEQUALTILDE,
TOKEN_LONGNAME_NOTHUMPEQUAL => return SYMBOL_TOKEN_LONGNAME_NOTHUMPEQUAL,
TOKEN_LONGNAME_NOTHUMPDOWNHUMP => return SYMBOL_TOKEN_LONGNAME_NOTHUMPDOWNHUMP,
TOKEN_LONGNAME_NOTLEFTTRIANGLEBAR => return SYMBOL_TOKEN_LONGNAME_NOTLEFTTRIANGLEBAR,
TOKEN_LONGNAME_NOTRIGHTTRIANGLEBAR => return SYMBOL_TOKEN_LONGNAME_NOTRIGHTTRIANGLEBAR,
TOKEN_LONGNAME_NOTLESSLESS => return SYMBOL_TOKEN_LONGNAME_NOTLESSLESS,
TOKEN_LONGNAME_NOTNESTEDLESSLESS => return SYMBOL_TOKEN_LONGNAME_NOTNESTEDLESSLESS,
TOKEN_LONGNAME_NOTLESSSLANTEQUAL => return SYMBOL_TOKEN_LONGNAME_NOTLESSSLANTEQUAL,
TOKEN_LONGNAME_NOTGREATERGREATER => return SYMBOL_TOKEN_LONGNAME_NOTGREATERGREATER,
TOKEN_LONGNAME_NOTNESTEDGREATERGREATER => return SYMBOL_TOKEN_LONGNAME_NOTNESTEDGREATERGREATER,
TOKEN_LONGNAME_NOTGREATERSLANTEQUAL => return SYMBOL_TOKEN_LONGNAME_NOTGREATERSLANTEQUAL,
TOKEN_LONGNAME_NOTPRECEDESEQUAL => return SYMBOL_TOKEN_LONGNAME_NOTPRECEDESEQUAL,
TOKEN_LONGNAME_NOTSUCCEEDSEQUAL => return SYMBOL_TOKEN_LONGNAME_NOTSUCCEEDSEQUAL,
TOKEN_LONGNAME_NOTSQUARESUBSET => return SYMBOL_TOKEN_LONGNAME_NOTSQUARESUBSET,
TOKEN_LONGNAME_NOTSQUARESUPERSET => return SYMBOL_TOKEN_LONGNAME_NOTSQUARESUPERSET,
TOKEN_LONGNAME_EQUAL => return SYMBOL_TOKEN_LONGNAME_EQUAL,
TOKEN_LONGNAME_VERTICALSEPARATOR => return SYMBOL_TOKEN_LONGNAME_VERTICALSEPARATOR,
TOKEN_LONGNAME_VECTORGREATER => return SYMBOL_TOKEN_LONGNAME_VECTORGREATER,
TOKEN_LONGNAME_VECTORGREATEREQUAL => return SYMBOL_TOKEN_LONGNAME_VECTORGREATEREQUAL,
TOKEN_LONGNAME_VECTORLESS => return SYMBOL_TOKEN_LONGNAME_VECTORLESS,
TOKEN_LONGNAME_VECTORLESSEQUAL => return SYMBOL_TOKEN_LONGNAME_VECTORLESSEQUAL,
TOKEN_LONGNAME_LIMIT => return SYMBOL_TOKEN_LONGNAME_LIMIT,
TOKEN_LONGNAME_MAXLIMIT => return SYMBOL_TOKEN_LONGNAME_MAXLIMIT,
TOKEN_LONGNAME_MINLIMIT => return SYMBOL_TOKEN_LONGNAME_MINLIMIT,
TOKEN_LONGNAME_CROSS => return SYMBOL_TOKEN_LONGNAME_CROSS,
TOKEN_LONGNAME_FUNCTION => return SYMBOL_TOKEN_LONGNAME_FUNCTION,
TOKEN_LONGNAME_XNOR => return SYMBOL_TOKEN_LONGNAME_XNOR,
TOKEN_LONGNAME_DISCRETESHIFT => return SYMBOL_TOKEN_LONGNAME_DISCRETESHIFT,
TOKEN_LONGNAME_DIFFERENCEDELTA => return SYMBOL_TOKEN_LONGNAME_DIFFERENCEDELTA,
TOKEN_LONGNAME_DISCRETERATIO => return SYMBOL_TOKEN_LONGNAME_DISCRETERATIO,
TOKEN_LONGNAME_RULEDELAYED => return SYMBOL_TOKEN_LONGNAME_RULEDELAYED,
TOKEN_LONGNAME_SQUARE => return SYMBOL_TOKEN_LONGNAME_SQUARE,
TOKEN_LONGNAME_RULE => return SYMBOL_TOKEN_LONGNAME_RULE,
TOKEN_LONGNAME_IMPLIES => return SYMBOL_TOKEN_LONGNAME_IMPLIES,
TOKEN_LONGNAME_SHORTRIGHTARROW => return SYMBOL_TOKEN_LONGNAME_SHORTRIGHTARROW,
TOKEN_LONGNAME_SHORTLEFTARROW => return SYMBOL_TOKEN_LONGNAME_SHORTLEFTARROW,
TOKEN_LONGNAME_SHORTUPARROW => return SYMBOL_TOKEN_LONGNAME_SHORTUPARROW,
TOKEN_LONGNAME_SHORTDOWNARROW => return SYMBOL_TOKEN_LONGNAME_SHORTDOWNARROW,
TOKEN_LONGNAME_APPLICATION => return SYMBOL_TOKEN_LONGNAME_APPLICATION,
TOKEN_LONGNAME_LEFTBRACKETINGBAR => return SYMBOL_TOKEN_LONGNAME_LEFTBRACKETINGBAR,
TOKEN_LONGNAME_RIGHTBRACKETINGBAR => return SYMBOL_TOKEN_LONGNAME_RIGHTBRACKETINGBAR,
TOKEN_LONGNAME_LEFTDOUBLEBRACKETINGBAR => return SYMBOL_TOKEN_LONGNAME_LEFTDOUBLEBRACKETINGBAR,
TOKEN_LONGNAME_RIGHTDOUBLEBRACKETINGBAR => return SYMBOL_TOKEN_LONGNAME_RIGHTDOUBLEBRACKETINGBAR,
TOKEN_LONGNAME_CAPITALDIFFERENTIALD => return SYMBOL_TOKEN_LONGNAME_CAPITALDIFFERENTIALD,
TOKEN_LONGNAME_DIFFERENTIALD => return SYMBOL_TOKEN_LONGNAME_DIFFERENTIALD,
TOKEN_LONGNAME_INVISIBLECOMMA => return SYMBOL_TOKEN_LONGNAME_INVISIBLECOMMA,
TOKEN_LONGNAME_INVISIBLEAPPLICATION => return SYMBOL_TOKEN_LONGNAME_INVISIBLEAPPLICATION,
TOKEN_LONGNAME_LONGEQUAL => return SYMBOL_TOKEN_LONGNAME_LONGEQUAL,
TOKEN_COUNT => return SYMBOL_TOKEN_COUNT,
_ => panic!("Unhandled token type"),
}
}
