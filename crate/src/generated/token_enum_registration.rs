//
// AUTO GENERATED FILE
// DO NOT MODIFY
//

use crate::symbol::Symbol;

//
// All token enums
//

#[allow(non_camel_case_types)]
#[rustfmt::skip]
#[derive(Debug, Copy, Clone, PartialEq)]
#[repr(u16)]
pub enum TokenKind {
    Unknown = 0, // { group2Bits:0, group1Bits:0, enum:0, 0b0_0000_0000 }
    EndOfFile = 2049, // { group2Bits:2048, group1Bits:0, enum:1, 0b0_0000_0001 }
    Symbol = 514, // { group2Bits:0, group1Bits:512, enum:2, 0b0_0000_0010 }
    String = 515, // { group2Bits:0, group1Bits:512, enum:3, 0b0_0000_0011 }
    Integer = 516, // { group2Bits:0, group1Bits:512, enum:4, 0b0_0000_0100 }
    Real = 517, // { group2Bits:0, group1Bits:512, enum:5, 0b0_0000_0101 }
    Rational = 518, // { group2Bits:0, group1Bits:512, enum:6, 0b0_0000_0110 }
    LinearSyntaxBlob = 519, // { group2Bits:0, group1Bits:512, enum:7, 0b0_0000_0111 }
    InternalNewline = 8, // { group2Bits:0, group1Bits:0, enum:8, 0b0_0000_1000 }
    Comment = 9, // { group2Bits:0, group1Bits:0, enum:9, 0b0_0000_1001 }
    Whitespace = 10, // { group2Bits:0, group1Bits:0, enum:10, 0b0_0000_1010 }
    Buffer1 = 11, // { group2Bits:0, group1Bits:0, enum:11, 0b0_0000_1011 }
    ToplevelNewline = 12, // { group2Bits:0, group1Bits:0, enum:12, 0b0_0000_1100 }
    Buffer2 = 13, // { group2Bits:0, group1Bits:0, enum:13, 0b0_0000_1101 }
    Buffer3 = 14, // { group2Bits:0, group1Bits:0, enum:14, 0b0_0000_1110 }
    Buffer4 = 15, // { group2Bits:0, group1Bits:0, enum:15, 0b0_0000_1111 }
    Error_ExpectedEqual = 1552, // { group2Bits:0, group1Bits:1536, enum:16, 0b0_0001_0000 }
    Error_Number = 1553, // { group2Bits:0, group1Bits:1536, enum:17, 0b0_0001_0001 }
    Error_UnhandledCharacter = 1554, // { group2Bits:0, group1Bits:1536, enum:18, 0b0_0001_0010 }
    Error_ExpectedLetterlike = 1555, // { group2Bits:0, group1Bits:1536, enum:19, 0b0_0001_0011 }
    Error_Aborted = 3604, // { group2Bits:2048, group1Bits:1536, enum:20, 0b0_0001_0100 }
    Error_ExpectedOperand = 3605, // { group2Bits:2048, group1Bits:1536, enum:21, 0b0_0001_0101 }
    Error_ExpectedTag = 3606, // { group2Bits:2048, group1Bits:1536, enum:22, 0b0_0001_0110 }
    Error_ExpectedFile = 3607, // { group2Bits:2048, group1Bits:1536, enum:23, 0b0_0001_0111 }
    Error_UnexpectedCloser = 1560, // { group2Bits:0, group1Bits:1536, enum:24, 0b0_0001_1000 }
    Error_PrefixImplicitNull = 3609, // { group2Bits:2048, group1Bits:1536, enum:25, 0b0_0001_1001 }
    Error_InfixImplicitNull = 3610, // { group2Bits:2048, group1Bits:1536, enum:26, 0b0_0001_1010 }
    Error_UnsafeCharacterEncoding = 1563, // { group2Bits:0, group1Bits:1536, enum:27, 0b0_0001_1011 }
    Error_UnterminatedComment = 1564, // { group2Bits:0, group1Bits:1536, enum:28, 0b0_0001_1100 }
    Error_Unterminated_First = 28, // { group2Bits:0, group1Bits:0, enum:28, 0b0_0001_1100 }
    Error_UnterminatedString = 1565, // { group2Bits:0, group1Bits:1536, enum:29, 0b0_0001_1101 }
    Error_UnterminatedFileString = 1566, // { group2Bits:0, group1Bits:1536, enum:30, 0b0_0001_1110 }
    Error_UnterminatedLinearSyntaxBlob = 1567, // { group2Bits:0, group1Bits:1536, enum:31, 0b0_0001_1111 }
    Error_UnsupportedToken = 1568, // { group2Bits:0, group1Bits:1536, enum:32, 0b0_0010_0000 }
    Error_Unterminated_End = 32, // { group2Bits:0, group1Bits:0, enum:32, 0b0_0010_0000 }
    Error_UnexpectedCommentCloser = 1569, // { group2Bits:0, group1Bits:1536, enum:33, 0b0_0010_0001 }
    Error_End = 1570, // { group2Bits:0, group1Bits:1536, enum:34, 0b0_0010_0010 }
    Dot = 35, // { group2Bits:0, group1Bits:0, enum:35, 0b0_0010_0011 }
    Colon = 36, // { group2Bits:0, group1Bits:0, enum:36, 0b0_0010_0100 }
    OpenParen = 549, // { group2Bits:0, group1Bits:512, enum:37, 0b0_0010_0101 }
    CloseParen = 1062, // { group2Bits:0, group1Bits:1024, enum:38, 0b0_0010_0110 }
    OpenSquare = 39, // { group2Bits:0, group1Bits:0, enum:39, 0b0_0010_0111 }
    CloseSquare = 1064, // { group2Bits:0, group1Bits:1024, enum:40, 0b0_0010_1000 }
    Comma = 41, // { group2Bits:0, group1Bits:0, enum:41, 0b0_0010_1001 }
    OpenCurly = 554, // { group2Bits:0, group1Bits:512, enum:42, 0b0_0010_1010 }
    CloseCurly = 1067, // { group2Bits:0, group1Bits:1024, enum:43, 0b0_0010_1011 }
    Equal = 44, // { group2Bits:0, group1Bits:0, enum:44, 0b0_0010_1100 }
    Bang = 557, // { group2Bits:0, group1Bits:512, enum:45, 0b0_0010_1101 }
    Under = 558, // { group2Bits:0, group1Bits:512, enum:46, 0b0_0010_1110 }
    Less = 47, // { group2Bits:0, group1Bits:0, enum:47, 0b0_0010_1111 }
    Greater = 48, // { group2Bits:0, group1Bits:0, enum:48, 0b0_0011_0000 }
    Minus = 561, // { group2Bits:0, group1Bits:512, enum:49, 0b0_0011_0001 }
    Bar = 50, // { group2Bits:0, group1Bits:0, enum:50, 0b0_0011_0010 }
    Semi = 51, // { group2Bits:0, group1Bits:0, enum:51, 0b0_0011_0011 }
    Hash = 564, // { group2Bits:0, group1Bits:512, enum:52, 0b0_0011_0100 }
    Amp = 53, // { group2Bits:0, group1Bits:0, enum:53, 0b0_0011_0101 }
    Slash = 54, // { group2Bits:0, group1Bits:0, enum:54, 0b0_0011_0110 }
    At = 55, // { group2Bits:0, group1Bits:0, enum:55, 0b0_0011_0111 }
    Plus = 568, // { group2Bits:0, group1Bits:512, enum:56, 0b0_0011_1000 }
    Tilde = 57, // { group2Bits:0, group1Bits:0, enum:57, 0b0_0011_1001 }
    Star = 58, // { group2Bits:0, group1Bits:0, enum:58, 0b0_0011_1010 }
    Caret = 59, // { group2Bits:0, group1Bits:0, enum:59, 0b0_0011_1011 }
    SingleQuote = 60, // { group2Bits:0, group1Bits:0, enum:60, 0b0_0011_1100 }
    Percent = 573, // { group2Bits:0, group1Bits:512, enum:61, 0b0_0011_1101 }
    Question = 62, // { group2Bits:0, group1Bits:0, enum:62, 0b0_0011_1110 }
    DotDot = 63, // { group2Bits:0, group1Bits:0, enum:63, 0b0_0011_1111 }
    ColonColon = 64, // { group2Bits:0, group1Bits:0, enum:64, 0b0_0100_0000 }
    ColonEqual = 65, // { group2Bits:0, group1Bits:0, enum:65, 0b0_0100_0001 }
    ColonGreater = 66, // { group2Bits:0, group1Bits:0, enum:66, 0b0_0100_0010 }
    EqualEqual = 67, // { group2Bits:0, group1Bits:0, enum:67, 0b0_0100_0011 }
    UnderUnder = 580, // { group2Bits:0, group1Bits:512, enum:68, 0b0_0100_0100 }
    UnderDot = 581, // { group2Bits:0, group1Bits:512, enum:69, 0b0_0100_0101 }
    LessBar = 582, // { group2Bits:0, group1Bits:512, enum:70, 0b0_0100_0110 }
    LessLess = 583, // { group2Bits:0, group1Bits:512, enum:71, 0b0_0100_0111 }
    LessGreater = 72, // { group2Bits:0, group1Bits:0, enum:72, 0b0_0100_1000 }
    LessEqual = 73, // { group2Bits:0, group1Bits:0, enum:73, 0b0_0100_1001 }
    GreaterGreater = 74, // { group2Bits:0, group1Bits:0, enum:74, 0b0_0100_1010 }
    GreaterEqual = 75, // { group2Bits:0, group1Bits:0, enum:75, 0b0_0100_1011 }
    MinusGreater = 76, // { group2Bits:0, group1Bits:0, enum:76, 0b0_0100_1100 }
    MinusMinus = 589, // { group2Bits:0, group1Bits:512, enum:77, 0b0_0100_1101 }
    MinusEqual = 78, // { group2Bits:0, group1Bits:0, enum:78, 0b0_0100_1110 }
    BarBar = 79, // { group2Bits:0, group1Bits:0, enum:79, 0b0_0100_1111 }
    BarGreater = 1104, // { group2Bits:0, group1Bits:1024, enum:80, 0b0_0101_0000 }
    SemiSemi = 593, // { group2Bits:0, group1Bits:512, enum:81, 0b0_0101_0001 }
    AmpAmp = 82, // { group2Bits:0, group1Bits:0, enum:82, 0b0_0101_0010 }
    SlashAt = 83, // { group2Bits:0, group1Bits:0, enum:83, 0b0_0101_0011 }
    SlashSemi = 84, // { group2Bits:0, group1Bits:0, enum:84, 0b0_0101_0100 }
    SlashDot = 85, // { group2Bits:0, group1Bits:0, enum:85, 0b0_0101_0101 }
    SlashSlash = 86, // { group2Bits:0, group1Bits:0, enum:86, 0b0_0101_0110 }
    SlashColon = 87, // { group2Bits:0, group1Bits:0, enum:87, 0b0_0101_0111 }
    SlashEqual = 88, // { group2Bits:0, group1Bits:0, enum:88, 0b0_0101_1000 }
    SlashStar = 89, // { group2Bits:0, group1Bits:0, enum:89, 0b0_0101_1001 }
    AtAt = 90, // { group2Bits:0, group1Bits:0, enum:90, 0b0_0101_1010 }
    AtStar = 91, // { group2Bits:0, group1Bits:0, enum:91, 0b0_0101_1011 }
    PlusPlus = 604, // { group2Bits:0, group1Bits:512, enum:92, 0b0_0101_1100 }
    PlusEqual = 93, // { group2Bits:0, group1Bits:0, enum:93, 0b0_0101_1101 }
    TildeTilde = 94, // { group2Bits:0, group1Bits:0, enum:94, 0b0_0101_1110 }
    StarEqual = 95, // { group2Bits:0, group1Bits:0, enum:95, 0b0_0101_1111 }
    StarStar = 96, // { group2Bits:0, group1Bits:0, enum:96, 0b0_0110_0000 }
    CaretEqual = 97, // { group2Bits:0, group1Bits:0, enum:97, 0b0_0110_0001 }
    HashHash = 610, // { group2Bits:0, group1Bits:512, enum:98, 0b0_0110_0010 }
    BangEqual = 99, // { group2Bits:0, group1Bits:0, enum:99, 0b0_0110_0011 }
    BangBang = 612, // { group2Bits:0, group1Bits:512, enum:100, 0b0_0110_0100 }
    QuestionQuestion = 101, // { group2Bits:0, group1Bits:0, enum:101, 0b0_0110_0101 }
    DotDotDot = 102, // { group2Bits:0, group1Bits:0, enum:102, 0b0_0110_0110 }
    EqualEqualEqual = 103, // { group2Bits:0, group1Bits:0, enum:103, 0b0_0110_0111 }
    EqualBangEqual = 104, // { group2Bits:0, group1Bits:0, enum:104, 0b0_0110_1000 }
    UnderUnderUnder = 617, // { group2Bits:0, group1Bits:512, enum:105, 0b0_0110_1001 }
    SlashSlashDot = 106, // { group2Bits:0, group1Bits:0, enum:106, 0b0_0110_1010 }
    AtAtAt = 107, // { group2Bits:0, group1Bits:0, enum:107, 0b0_0110_1011 }
    LessMinusGreater = 108, // { group2Bits:0, group1Bits:0, enum:108, 0b0_0110_1100 }
    SlashSlashAt = 109, // { group2Bits:0, group1Bits:0, enum:109, 0b0_0110_1101 }
    CaretColonEqual = 110, // { group2Bits:0, group1Bits:0, enum:110, 0b0_0110_1110 }
    GreaterGreaterGreater = 111, // { group2Bits:0, group1Bits:0, enum:111, 0b0_0110_1111 }
    BarMinusGreater = 112, // { group2Bits:0, group1Bits:0, enum:112, 0b0_0111_0000 }
    SlashSlashEqual = 113, // { group2Bits:0, group1Bits:0, enum:113, 0b0_0111_0001 }
    ColonColonOpenSquare = 114, // { group2Bits:0, group1Bits:0, enum:114, 0b0_0111_0010 }
    PercentPercent = 627, // { group2Bits:0, group1Bits:512, enum:115, 0b0_0111_0011 }
    LinearSyntax_Bang = 628, // { group2Bits:0, group1Bits:512, enum:116, 0b0_0111_0100 }
    LinearSyntax_CloseParen = 117, // { group2Bits:0, group1Bits:0, enum:117, 0b0_0111_0101 }
    LinearSyntax_At = 118, // { group2Bits:0, group1Bits:0, enum:118, 0b0_0111_0110 }
    LinearSyntax_Amp = 119, // { group2Bits:0, group1Bits:0, enum:119, 0b0_0111_0111 }
    LinearSyntax_Star = 120, // { group2Bits:0, group1Bits:0, enum:120, 0b0_0111_1000 }
    LinearSyntax_Under = 121, // { group2Bits:0, group1Bits:0, enum:121, 0b0_0111_1001 }
    LinearSyntax_Caret = 122, // { group2Bits:0, group1Bits:0, enum:122, 0b0_0111_1010 }
    LinearSyntax_Space = 123, // { group2Bits:0, group1Bits:0, enum:123, 0b0_0111_1011 }
    LinearSyntax_Percent = 124, // { group2Bits:0, group1Bits:0, enum:124, 0b0_0111_1100 }
    LinearSyntax_Plus = 125, // { group2Bits:0, group1Bits:0, enum:125, 0b0_0111_1101 }
    LinearSyntax_Slash = 126, // { group2Bits:0, group1Bits:0, enum:126, 0b0_0111_1110 }
    LinearSyntax_BackTick = 127, // { group2Bits:0, group1Bits:0, enum:127, 0b0_0111_1111 }
    Fake_ImplicitTimes = 2176, // { group2Bits:2048, group1Bits:0, enum:128, 0b0_1000_0000 }
    Fake_ImplicitNull = 2177, // { group2Bits:2048, group1Bits:0, enum:129, 0b0_1000_0001 }
    Fake_ImplicitOne = 2178, // { group2Bits:2048, group1Bits:0, enum:130, 0b0_1000_0010 }
    Fake_ImplicitAll = 2179, // { group2Bits:2048, group1Bits:0, enum:131, 0b0_1000_0011 }
    Boxes_OpenParenStar = 132, // { group2Bits:0, group1Bits:0, enum:132, 0b0_1000_0100 }
    Boxes_StarCloseParen = 133, // { group2Bits:0, group1Bits:0, enum:133, 0b0_1000_0101 }
    Boxes_MultiSingleQuote = 134, // { group2Bits:0, group1Bits:0, enum:134, 0b0_1000_0110 }
    Boxes_MultiWhitespace = 135, // { group2Bits:0, group1Bits:0, enum:135, 0b0_1000_0111 }
    LongName_Not = 648, // { group2Bits:0, group1Bits:512, enum:136, 0b0_1000_1000 }
    LongName_PlusMinus = 649, // { group2Bits:0, group1Bits:512, enum:137, 0b0_1000_1001 }
    LongName_CenterDot = 138, // { group2Bits:0, group1Bits:0, enum:138, 0b0_1000_1010 }
    LongName_Times = 139, // { group2Bits:0, group1Bits:0, enum:139, 0b0_1000_1011 }
    LongName_Divide = 140, // { group2Bits:0, group1Bits:0, enum:140, 0b0_1000_1100 }
    LongName_OpenCurlyQuote = 653, // { group2Bits:0, group1Bits:512, enum:141, 0b0_1000_1101 }
    LongName_CloseCurlyQuote = 1166, // { group2Bits:0, group1Bits:1024, enum:142, 0b0_1000_1110 }
    LongName_OpenCurlyDoubleQuote = 655, // { group2Bits:0, group1Bits:512, enum:143, 0b0_1000_1111 }
    LongName_CloseCurlyDoubleQuote = 1168, // { group2Bits:0, group1Bits:1024, enum:144, 0b0_1001_0000 }
    LongName_InvisibleTimes = 145, // { group2Bits:0, group1Bits:0, enum:145, 0b0_1001_0001 }
    LongName_LeftArrow = 146, // { group2Bits:0, group1Bits:0, enum:146, 0b0_1001_0010 }
    LongName_UpArrow = 147, // { group2Bits:0, group1Bits:0, enum:147, 0b0_1001_0011 }
    LongName_RightArrow = 148, // { group2Bits:0, group1Bits:0, enum:148, 0b0_1001_0100 }
    LongName_DownArrow = 149, // { group2Bits:0, group1Bits:0, enum:149, 0b0_1001_0101 }
    LongName_LeftRightArrow = 150, // { group2Bits:0, group1Bits:0, enum:150, 0b0_1001_0110 }
    LongName_UpDownArrow = 151, // { group2Bits:0, group1Bits:0, enum:151, 0b0_1001_0111 }
    LongName_UpperLeftArrow = 152, // { group2Bits:0, group1Bits:0, enum:152, 0b0_1001_1000 }
    LongName_UpperRightArrow = 153, // { group2Bits:0, group1Bits:0, enum:153, 0b0_1001_1001 }
    LongName_LowerRightArrow = 154, // { group2Bits:0, group1Bits:0, enum:154, 0b0_1001_1010 }
    LongName_LowerLeftArrow = 155, // { group2Bits:0, group1Bits:0, enum:155, 0b0_1001_1011 }
    LongName_LeftTeeArrow = 156, // { group2Bits:0, group1Bits:0, enum:156, 0b0_1001_1100 }
    LongName_UpTeeArrow = 157, // { group2Bits:0, group1Bits:0, enum:157, 0b0_1001_1101 }
    LongName_RightTeeArrow = 158, // { group2Bits:0, group1Bits:0, enum:158, 0b0_1001_1110 }
    LongName_DownTeeArrow = 159, // { group2Bits:0, group1Bits:0, enum:159, 0b0_1001_1111 }
    LongName_LeftVector = 160, // { group2Bits:0, group1Bits:0, enum:160, 0b0_1010_0000 }
    LongName_DownLeftVector = 161, // { group2Bits:0, group1Bits:0, enum:161, 0b0_1010_0001 }
    LongName_RightUpVector = 162, // { group2Bits:0, group1Bits:0, enum:162, 0b0_1010_0010 }
    LongName_LeftUpVector = 163, // { group2Bits:0, group1Bits:0, enum:163, 0b0_1010_0011 }
    LongName_RightVector = 164, // { group2Bits:0, group1Bits:0, enum:164, 0b0_1010_0100 }
    LongName_DownRightVector = 165, // { group2Bits:0, group1Bits:0, enum:165, 0b0_1010_0101 }
    LongName_RightDownVector = 166, // { group2Bits:0, group1Bits:0, enum:166, 0b0_1010_0110 }
    LongName_LeftDownVector = 167, // { group2Bits:0, group1Bits:0, enum:167, 0b0_1010_0111 }
    LongName_RightArrowLeftArrow = 168, // { group2Bits:0, group1Bits:0, enum:168, 0b0_1010_1000 }
    LongName_UpArrowDownArrow = 169, // { group2Bits:0, group1Bits:0, enum:169, 0b0_1010_1001 }
    LongName_LeftArrowRightArrow = 170, // { group2Bits:0, group1Bits:0, enum:170, 0b0_1010_1010 }
    LongName_ReverseEquilibrium = 171, // { group2Bits:0, group1Bits:0, enum:171, 0b0_1010_1011 }
    LongName_Equilibrium = 172, // { group2Bits:0, group1Bits:0, enum:172, 0b0_1010_1100 }
    LongName_DoubleLeftArrow = 173, // { group2Bits:0, group1Bits:0, enum:173, 0b0_1010_1101 }
    LongName_DoubleUpArrow = 174, // { group2Bits:0, group1Bits:0, enum:174, 0b0_1010_1110 }
    LongName_DoubleRightArrow = 175, // { group2Bits:0, group1Bits:0, enum:175, 0b0_1010_1111 }
    LongName_DoubleDownArrow = 176, // { group2Bits:0, group1Bits:0, enum:176, 0b0_1011_0000 }
    LongName_DoubleLeftRightArrow = 177, // { group2Bits:0, group1Bits:0, enum:177, 0b0_1011_0001 }
    LongName_DoubleUpDownArrow = 178, // { group2Bits:0, group1Bits:0, enum:178, 0b0_1011_0010 }
    LongName_LeftArrowBar = 179, // { group2Bits:0, group1Bits:0, enum:179, 0b0_1011_0011 }
    LongName_RightArrowBar = 180, // { group2Bits:0, group1Bits:0, enum:180, 0b0_1011_0100 }
    LongName_DownArrowUpArrow = 181, // { group2Bits:0, group1Bits:0, enum:181, 0b0_1011_0101 }
    LongName_ForAll = 694, // { group2Bits:0, group1Bits:512, enum:182, 0b0_1011_0110 }
    LongName_PartialD = 183, // { group2Bits:0, group1Bits:0, enum:183, 0b0_1011_0111 }
    LongName_Exists = 696, // { group2Bits:0, group1Bits:512, enum:184, 0b0_1011_1000 }
    LongName_NotExists = 697, // { group2Bits:0, group1Bits:512, enum:185, 0b0_1011_1001 }
    LongName_Del = 698, // { group2Bits:0, group1Bits:512, enum:186, 0b0_1011_1010 }
    LongName_Element = 187, // { group2Bits:0, group1Bits:0, enum:187, 0b0_1011_1011 }
    LongName_NotElement = 188, // { group2Bits:0, group1Bits:0, enum:188, 0b0_1011_1100 }
    LongName_ReverseElement = 189, // { group2Bits:0, group1Bits:0, enum:189, 0b0_1011_1101 }
    LongName_NotReverseElement = 190, // { group2Bits:0, group1Bits:0, enum:190, 0b0_1011_1110 }
    LongName_SuchThat = 191, // { group2Bits:0, group1Bits:0, enum:191, 0b0_1011_1111 }
    LongName_Product = 704, // { group2Bits:0, group1Bits:512, enum:192, 0b0_1100_0000 }
    LongName_Coproduct = 705, // { group2Bits:0, group1Bits:512, enum:193, 0b0_1100_0001 }
    LongName_Sum = 706, // { group2Bits:0, group1Bits:512, enum:194, 0b0_1100_0010 }
    LongName_Minus = 707, // { group2Bits:0, group1Bits:512, enum:195, 0b0_1100_0011 }
    LongName_MinusPlus = 708, // { group2Bits:0, group1Bits:512, enum:196, 0b0_1100_0100 }
    LongName_DivisionSlash = 197, // { group2Bits:0, group1Bits:0, enum:197, 0b0_1100_0101 }
    LongName_Backslash = 198, // { group2Bits:0, group1Bits:0, enum:198, 0b0_1100_0110 }
    LongName_SmallCircle = 199, // { group2Bits:0, group1Bits:0, enum:199, 0b0_1100_0111 }
    LongName_Sqrt = 712, // { group2Bits:0, group1Bits:512, enum:200, 0b0_1100_1000 }
    LongName_CubeRoot = 713, // { group2Bits:0, group1Bits:512, enum:201, 0b0_1100_1001 }
    LongName_Proportional = 202, // { group2Bits:0, group1Bits:0, enum:202, 0b0_1100_1010 }
    LongName_Divides = 203, // { group2Bits:0, group1Bits:0, enum:203, 0b0_1100_1011 }
    LongName_DoubleVerticalBar = 204, // { group2Bits:0, group1Bits:0, enum:204, 0b0_1100_1100 }
    LongName_NotDoubleVerticalBar = 205, // { group2Bits:0, group1Bits:0, enum:205, 0b0_1100_1101 }
    LongName_And = 206, // { group2Bits:0, group1Bits:0, enum:206, 0b0_1100_1110 }
    LongName_Or = 207, // { group2Bits:0, group1Bits:0, enum:207, 0b0_1100_1111 }
    LongName_Integral = 720, // { group2Bits:0, group1Bits:512, enum:208, 0b0_1101_0000 }
    LongName_ContourIntegral = 721, // { group2Bits:0, group1Bits:512, enum:209, 0b0_1101_0001 }
    LongName_DoubleContourIntegral = 722, // { group2Bits:0, group1Bits:512, enum:210, 0b0_1101_0010 }
    LongName_ClockwiseContourIntegral = 723, // { group2Bits:0, group1Bits:512, enum:211, 0b0_1101_0011 }
    LongName_CounterClockwiseContourIntegral = 724, // { group2Bits:0, group1Bits:512, enum:212, 0b0_1101_0100 }
    LongName_Therefore = 213, // { group2Bits:0, group1Bits:0, enum:213, 0b0_1101_0101 }
    LongName_Because = 214, // { group2Bits:0, group1Bits:0, enum:214, 0b0_1101_0110 }
    LongName_Colon = 215, // { group2Bits:0, group1Bits:0, enum:215, 0b0_1101_0111 }
    LongName_Proportion = 216, // { group2Bits:0, group1Bits:0, enum:216, 0b0_1101_1000 }
    LongName_Tilde = 217, // { group2Bits:0, group1Bits:0, enum:217, 0b0_1101_1001 }
    LongName_VerticalTilde = 218, // { group2Bits:0, group1Bits:0, enum:218, 0b0_1101_1010 }
    LongName_NotTilde = 219, // { group2Bits:0, group1Bits:0, enum:219, 0b0_1101_1011 }
    LongName_EqualTilde = 220, // { group2Bits:0, group1Bits:0, enum:220, 0b0_1101_1100 }
    LongName_TildeEqual = 221, // { group2Bits:0, group1Bits:0, enum:221, 0b0_1101_1101 }
    LongName_NotTildeEqual = 222, // { group2Bits:0, group1Bits:0, enum:222, 0b0_1101_1110 }
    LongName_TildeFullEqual = 223, // { group2Bits:0, group1Bits:0, enum:223, 0b0_1101_1111 }
    LongName_NotTildeFullEqual = 224, // { group2Bits:0, group1Bits:0, enum:224, 0b0_1110_0000 }
    LongName_TildeTilde = 225, // { group2Bits:0, group1Bits:0, enum:225, 0b0_1110_0001 }
    LongName_NotTildeTilde = 226, // { group2Bits:0, group1Bits:0, enum:226, 0b0_1110_0010 }
    LongName_CupCap = 227, // { group2Bits:0, group1Bits:0, enum:227, 0b0_1110_0011 }
    LongName_HumpDownHump = 228, // { group2Bits:0, group1Bits:0, enum:228, 0b0_1110_0100 }
    LongName_HumpEqual = 229, // { group2Bits:0, group1Bits:0, enum:229, 0b0_1110_0101 }
    LongName_DotEqual = 230, // { group2Bits:0, group1Bits:0, enum:230, 0b0_1110_0110 }
    LongName_NotEqual = 231, // { group2Bits:0, group1Bits:0, enum:231, 0b0_1110_0111 }
    LongName_Congruent = 232, // { group2Bits:0, group1Bits:0, enum:232, 0b0_1110_1000 }
    LongName_NotCongruent = 233, // { group2Bits:0, group1Bits:0, enum:233, 0b0_1110_1001 }
    LongName_LessEqual = 234, // { group2Bits:0, group1Bits:0, enum:234, 0b0_1110_1010 }
    LongName_GreaterEqual = 235, // { group2Bits:0, group1Bits:0, enum:235, 0b0_1110_1011 }
    LongName_LessFullEqual = 236, // { group2Bits:0, group1Bits:0, enum:236, 0b0_1110_1100 }
    LongName_GreaterFullEqual = 237, // { group2Bits:0, group1Bits:0, enum:237, 0b0_1110_1101 }
    LongName_NotLessFullEqual = 238, // { group2Bits:0, group1Bits:0, enum:238, 0b0_1110_1110 }
    LongName_NotGreaterFullEqual = 239, // { group2Bits:0, group1Bits:0, enum:239, 0b0_1110_1111 }
    LongName_LessLess = 240, // { group2Bits:0, group1Bits:0, enum:240, 0b0_1111_0000 }
    LongName_GreaterGreater = 241, // { group2Bits:0, group1Bits:0, enum:241, 0b0_1111_0001 }
    LongName_NotCupCap = 242, // { group2Bits:0, group1Bits:0, enum:242, 0b0_1111_0010 }
    LongName_NotLess = 243, // { group2Bits:0, group1Bits:0, enum:243, 0b0_1111_0011 }
    LongName_NotGreater = 244, // { group2Bits:0, group1Bits:0, enum:244, 0b0_1111_0100 }
    LongName_NotLessEqual = 245, // { group2Bits:0, group1Bits:0, enum:245, 0b0_1111_0101 }
    LongName_NotGreaterEqual = 246, // { group2Bits:0, group1Bits:0, enum:246, 0b0_1111_0110 }
    LongName_LessTilde = 247, // { group2Bits:0, group1Bits:0, enum:247, 0b0_1111_0111 }
    LongName_GreaterTilde = 248, // { group2Bits:0, group1Bits:0, enum:248, 0b0_1111_1000 }
    LongName_NotLessTilde = 249, // { group2Bits:0, group1Bits:0, enum:249, 0b0_1111_1001 }
    LongName_NotGreaterTilde = 250, // { group2Bits:0, group1Bits:0, enum:250, 0b0_1111_1010 }
    LongName_LessGreater = 251, // { group2Bits:0, group1Bits:0, enum:251, 0b0_1111_1011 }
    LongName_GreaterLess = 252, // { group2Bits:0, group1Bits:0, enum:252, 0b0_1111_1100 }
    LongName_NotLessGreater = 253, // { group2Bits:0, group1Bits:0, enum:253, 0b0_1111_1101 }
    LongName_NotGreaterLess = 254, // { group2Bits:0, group1Bits:0, enum:254, 0b0_1111_1110 }
    LongName_Precedes = 255, // { group2Bits:0, group1Bits:0, enum:255, 0b0_1111_1111 }
    LongName_Succeeds = 256, // { group2Bits:0, group1Bits:0, enum:256, 0b1_0000_0000 }
    LongName_PrecedesSlantEqual = 257, // { group2Bits:0, group1Bits:0, enum:257, 0b1_0000_0001 }
    LongName_SucceedsSlantEqual = 258, // { group2Bits:0, group1Bits:0, enum:258, 0b1_0000_0010 }
    LongName_PrecedesTilde = 259, // { group2Bits:0, group1Bits:0, enum:259, 0b1_0000_0011 }
    LongName_SucceedsTilde = 260, // { group2Bits:0, group1Bits:0, enum:260, 0b1_0000_0100 }
    LongName_NotPrecedes = 261, // { group2Bits:0, group1Bits:0, enum:261, 0b1_0000_0101 }
    LongName_NotSucceeds = 262, // { group2Bits:0, group1Bits:0, enum:262, 0b1_0000_0110 }
    LongName_Subset = 263, // { group2Bits:0, group1Bits:0, enum:263, 0b1_0000_0111 }
    LongName_Superset = 264, // { group2Bits:0, group1Bits:0, enum:264, 0b1_0000_1000 }
    LongName_NotSubset = 265, // { group2Bits:0, group1Bits:0, enum:265, 0b1_0000_1001 }
    LongName_NotSuperset = 266, // { group2Bits:0, group1Bits:0, enum:266, 0b1_0000_1010 }
    LongName_SubsetEqual = 267, // { group2Bits:0, group1Bits:0, enum:267, 0b1_0000_1011 }
    LongName_SupersetEqual = 268, // { group2Bits:0, group1Bits:0, enum:268, 0b1_0000_1100 }
    LongName_NotSubsetEqual = 269, // { group2Bits:0, group1Bits:0, enum:269, 0b1_0000_1101 }
    LongName_NotSupersetEqual = 270, // { group2Bits:0, group1Bits:0, enum:270, 0b1_0000_1110 }
    LongName_UnionPlus = 271, // { group2Bits:0, group1Bits:0, enum:271, 0b1_0000_1111 }
    LongName_SquareSubset = 272, // { group2Bits:0, group1Bits:0, enum:272, 0b1_0001_0000 }
    LongName_SquareSuperset = 273, // { group2Bits:0, group1Bits:0, enum:273, 0b1_0001_0001 }
    LongName_SquareSubsetEqual = 274, // { group2Bits:0, group1Bits:0, enum:274, 0b1_0001_0010 }
    LongName_SquareSupersetEqual = 275, // { group2Bits:0, group1Bits:0, enum:275, 0b1_0001_0011 }
    LongName_SquareIntersection = 276, // { group2Bits:0, group1Bits:0, enum:276, 0b1_0001_0100 }
    LongName_SquareUnion = 277, // { group2Bits:0, group1Bits:0, enum:277, 0b1_0001_0101 }
    LongName_CirclePlus = 278, // { group2Bits:0, group1Bits:0, enum:278, 0b1_0001_0110 }
    LongName_CircleMinus = 279, // { group2Bits:0, group1Bits:0, enum:279, 0b1_0001_0111 }
    LongName_CircleTimes = 792, // { group2Bits:0, group1Bits:512, enum:280, 0b1_0001_1000 }
    LongName_CircleDot = 281, // { group2Bits:0, group1Bits:0, enum:281, 0b1_0001_1001 }
    LongName_RightTee = 282, // { group2Bits:0, group1Bits:0, enum:282, 0b1_0001_1010 }
    LongName_LeftTee = 283, // { group2Bits:0, group1Bits:0, enum:283, 0b1_0001_1011 }
    LongName_DownTee = 284, // { group2Bits:0, group1Bits:0, enum:284, 0b1_0001_1100 }
    LongName_UpTee = 285, // { group2Bits:0, group1Bits:0, enum:285, 0b1_0001_1101 }
    LongName_DoubleRightTee = 286, // { group2Bits:0, group1Bits:0, enum:286, 0b1_0001_1110 }
    LongName_LeftTriangle = 287, // { group2Bits:0, group1Bits:0, enum:287, 0b1_0001_1111 }
    LongName_RightTriangle = 288, // { group2Bits:0, group1Bits:0, enum:288, 0b1_0010_0000 }
    LongName_LeftTriangleEqual = 289, // { group2Bits:0, group1Bits:0, enum:289, 0b1_0010_0001 }
    LongName_RightTriangleEqual = 290, // { group2Bits:0, group1Bits:0, enum:290, 0b1_0010_0010 }
    LongName_Xor = 291, // { group2Bits:0, group1Bits:0, enum:291, 0b1_0010_0011 }
    LongName_Nand = 292, // { group2Bits:0, group1Bits:0, enum:292, 0b1_0010_0100 }
    LongName_Nor = 293, // { group2Bits:0, group1Bits:0, enum:293, 0b1_0010_0101 }
    LongName_Wedge = 294, // { group2Bits:0, group1Bits:0, enum:294, 0b1_0010_0110 }
    LongName_Vee = 295, // { group2Bits:0, group1Bits:0, enum:295, 0b1_0010_0111 }
    LongName_Intersection = 296, // { group2Bits:0, group1Bits:0, enum:296, 0b1_0010_1000 }
    LongName_Union = 297, // { group2Bits:0, group1Bits:0, enum:297, 0b1_0010_1001 }
    LongName_Diamond = 298, // { group2Bits:0, group1Bits:0, enum:298, 0b1_0010_1010 }
    LongName_Star = 299, // { group2Bits:0, group1Bits:0, enum:299, 0b1_0010_1011 }
    LongName_LessEqualGreater = 300, // { group2Bits:0, group1Bits:0, enum:300, 0b1_0010_1100 }
    LongName_GreaterEqualLess = 301, // { group2Bits:0, group1Bits:0, enum:301, 0b1_0010_1101 }
    LongName_NotPrecedesSlantEqual = 302, // { group2Bits:0, group1Bits:0, enum:302, 0b1_0010_1110 }
    LongName_NotSucceedsSlantEqual = 303, // { group2Bits:0, group1Bits:0, enum:303, 0b1_0010_1111 }
    LongName_NotSquareSubsetEqual = 304, // { group2Bits:0, group1Bits:0, enum:304, 0b1_0011_0000 }
    LongName_NotSquareSupersetEqual = 305, // { group2Bits:0, group1Bits:0, enum:305, 0b1_0011_0001 }
    LongName_NotPrecedesTilde = 306, // { group2Bits:0, group1Bits:0, enum:306, 0b1_0011_0010 }
    LongName_NotSucceedsTilde = 307, // { group2Bits:0, group1Bits:0, enum:307, 0b1_0011_0011 }
    LongName_NotLeftTriangle = 308, // { group2Bits:0, group1Bits:0, enum:308, 0b1_0011_0100 }
    LongName_NotRightTriangle = 309, // { group2Bits:0, group1Bits:0, enum:309, 0b1_0011_0101 }
    LongName_NotLeftTriangleEqual = 310, // { group2Bits:0, group1Bits:0, enum:310, 0b1_0011_0110 }
    LongName_NotRightTriangleEqual = 311, // { group2Bits:0, group1Bits:0, enum:311, 0b1_0011_0111 }
    LongName_LeftCeiling = 824, // { group2Bits:0, group1Bits:512, enum:312, 0b1_0011_1000 }
    LongName_RightCeiling = 1337, // { group2Bits:0, group1Bits:1024, enum:313, 0b1_0011_1001 }
    LongName_LeftFloor = 826, // { group2Bits:0, group1Bits:512, enum:314, 0b1_0011_1010 }
    LongName_RightFloor = 1339, // { group2Bits:0, group1Bits:1024, enum:315, 0b1_0011_1011 }
    LongName_Cap = 316, // { group2Bits:0, group1Bits:0, enum:316, 0b1_0011_1100 }
    LongName_Cup = 317, // { group2Bits:0, group1Bits:0, enum:317, 0b1_0011_1101 }
    LongName_LeftAngleBracket = 830, // { group2Bits:0, group1Bits:512, enum:318, 0b1_0011_1110 }
    LongName_RightAngleBracket = 1343, // { group2Bits:0, group1Bits:1024, enum:319, 0b1_0011_1111 }
    LongName_Perpendicular = 320, // { group2Bits:0, group1Bits:0, enum:320, 0b1_0100_0000 }
    LongName_LongLeftArrow = 321, // { group2Bits:0, group1Bits:0, enum:321, 0b1_0100_0001 }
    LongName_LongRightArrow = 322, // { group2Bits:0, group1Bits:0, enum:322, 0b1_0100_0010 }
    LongName_LongLeftRightArrow = 323, // { group2Bits:0, group1Bits:0, enum:323, 0b1_0100_0011 }
    LongName_DoubleLongLeftArrow = 324, // { group2Bits:0, group1Bits:0, enum:324, 0b1_0100_0100 }
    LongName_DoubleLongRightArrow = 325, // { group2Bits:0, group1Bits:0, enum:325, 0b1_0100_0101 }
    LongName_DoubleLongLeftRightArrow = 326, // { group2Bits:0, group1Bits:0, enum:326, 0b1_0100_0110 }
    LongName_UpArrowBar = 327, // { group2Bits:0, group1Bits:0, enum:327, 0b1_0100_0111 }
    LongName_DownArrowBar = 328, // { group2Bits:0, group1Bits:0, enum:328, 0b1_0100_1000 }
    LongName_LeftRightVector = 329, // { group2Bits:0, group1Bits:0, enum:329, 0b1_0100_1001 }
    LongName_RightUpDownVector = 330, // { group2Bits:0, group1Bits:0, enum:330, 0b1_0100_1010 }
    LongName_DownLeftRightVector = 331, // { group2Bits:0, group1Bits:0, enum:331, 0b1_0100_1011 }
    LongName_LeftUpDownVector = 332, // { group2Bits:0, group1Bits:0, enum:332, 0b1_0100_1100 }
    LongName_LeftVectorBar = 333, // { group2Bits:0, group1Bits:0, enum:333, 0b1_0100_1101 }
    LongName_RightVectorBar = 334, // { group2Bits:0, group1Bits:0, enum:334, 0b1_0100_1110 }
    LongName_RightUpVectorBar = 335, // { group2Bits:0, group1Bits:0, enum:335, 0b1_0100_1111 }
    LongName_RightDownVectorBar = 336, // { group2Bits:0, group1Bits:0, enum:336, 0b1_0101_0000 }
    LongName_DownLeftVectorBar = 337, // { group2Bits:0, group1Bits:0, enum:337, 0b1_0101_0001 }
    LongName_DownRightVectorBar = 338, // { group2Bits:0, group1Bits:0, enum:338, 0b1_0101_0010 }
    LongName_LeftUpVectorBar = 339, // { group2Bits:0, group1Bits:0, enum:339, 0b1_0101_0011 }
    LongName_LeftDownVectorBar = 340, // { group2Bits:0, group1Bits:0, enum:340, 0b1_0101_0100 }
    LongName_LeftTeeVector = 341, // { group2Bits:0, group1Bits:0, enum:341, 0b1_0101_0101 }
    LongName_RightTeeVector = 342, // { group2Bits:0, group1Bits:0, enum:342, 0b1_0101_0110 }
    LongName_RightUpTeeVector = 343, // { group2Bits:0, group1Bits:0, enum:343, 0b1_0101_0111 }
    LongName_RightDownTeeVector = 344, // { group2Bits:0, group1Bits:0, enum:344, 0b1_0101_1000 }
    LongName_DownLeftTeeVector = 345, // { group2Bits:0, group1Bits:0, enum:345, 0b1_0101_1001 }
    LongName_DownRightTeeVector = 346, // { group2Bits:0, group1Bits:0, enum:346, 0b1_0101_1010 }
    LongName_LeftUpTeeVector = 347, // { group2Bits:0, group1Bits:0, enum:347, 0b1_0101_1011 }
    LongName_LeftDownTeeVector = 348, // { group2Bits:0, group1Bits:0, enum:348, 0b1_0101_1100 }
    LongName_UpEquilibrium = 349, // { group2Bits:0, group1Bits:0, enum:349, 0b1_0101_1101 }
    LongName_ReverseUpEquilibrium = 350, // { group2Bits:0, group1Bits:0, enum:350, 0b1_0101_1110 }
    LongName_RoundImplies = 351, // { group2Bits:0, group1Bits:0, enum:351, 0b1_0101_1111 }
    LongName_LeftTriangleBar = 352, // { group2Bits:0, group1Bits:0, enum:352, 0b1_0110_0000 }
    LongName_RightTriangleBar = 353, // { group2Bits:0, group1Bits:0, enum:353, 0b1_0110_0001 }
    LongName_Equivalent = 354, // { group2Bits:0, group1Bits:0, enum:354, 0b1_0110_0010 }
    LongName_LessSlantEqual = 355, // { group2Bits:0, group1Bits:0, enum:355, 0b1_0110_0011 }
    LongName_GreaterSlantEqual = 356, // { group2Bits:0, group1Bits:0, enum:356, 0b1_0110_0100 }
    LongName_NestedLessLess = 357, // { group2Bits:0, group1Bits:0, enum:357, 0b1_0110_0101 }
    LongName_NestedGreaterGreater = 358, // { group2Bits:0, group1Bits:0, enum:358, 0b1_0110_0110 }
    LongName_PrecedesEqual = 359, // { group2Bits:0, group1Bits:0, enum:359, 0b1_0110_0111 }
    LongName_SucceedsEqual = 360, // { group2Bits:0, group1Bits:0, enum:360, 0b1_0110_1000 }
    LongName_DoubleLeftTee = 361, // { group2Bits:0, group1Bits:0, enum:361, 0b1_0110_1001 }
    LongName_LeftDoubleBracket = 362, // { group2Bits:0, group1Bits:0, enum:362, 0b1_0110_1010 }
    LongName_RightDoubleBracket = 1387, // { group2Bits:0, group1Bits:1024, enum:363, 0b1_0110_1011 }
    LongName_LeftAssociation = 876, // { group2Bits:0, group1Bits:512, enum:364, 0b1_0110_1100 }
    LongName_RightAssociation = 1389, // { group2Bits:0, group1Bits:1024, enum:365, 0b1_0110_1101 }
    LongName_TwoWayRule = 366, // { group2Bits:0, group1Bits:0, enum:366, 0b1_0110_1110 }
    LongName_Piecewise = 879, // { group2Bits:0, group1Bits:512, enum:367, 0b1_0110_1111 }
    LongName_ImplicitPlus = 368, // { group2Bits:0, group1Bits:0, enum:368, 0b1_0111_0000 }
    LongName_AutoLeftMatch = 369, // { group2Bits:0, group1Bits:0, enum:369, 0b1_0111_0001 }
    LongName_AutoRightMatch = 370, // { group2Bits:0, group1Bits:0, enum:370, 0b1_0111_0010 }
    LongName_InvisiblePrefixScriptBase = 883, // { group2Bits:0, group1Bits:512, enum:371, 0b1_0111_0011 }
    LongName_InvisiblePostfixScriptBase = 372, // { group2Bits:0, group1Bits:0, enum:372, 0b1_0111_0100 }
    LongName_Transpose = 373, // { group2Bits:0, group1Bits:0, enum:373, 0b1_0111_0101 }
    LongName_Conjugate = 374, // { group2Bits:0, group1Bits:0, enum:374, 0b1_0111_0110 }
    LongName_ConjugateTranspose = 375, // { group2Bits:0, group1Bits:0, enum:375, 0b1_0111_0111 }
    LongName_HermitianConjugate = 376, // { group2Bits:0, group1Bits:0, enum:376, 0b1_0111_1000 }
    LongName_VerticalBar = 377, // { group2Bits:0, group1Bits:0, enum:377, 0b1_0111_1001 }
    LongName_NotVerticalBar = 378, // { group2Bits:0, group1Bits:0, enum:378, 0b1_0111_1010 }
    LongName_Distributed = 379, // { group2Bits:0, group1Bits:0, enum:379, 0b1_0111_1011 }
    LongName_Conditioned = 380, // { group2Bits:0, group1Bits:0, enum:380, 0b1_0111_1100 }
    LongName_UndirectedEdge = 381, // { group2Bits:0, group1Bits:0, enum:381, 0b1_0111_1101 }
    LongName_DirectedEdge = 382, // { group2Bits:0, group1Bits:0, enum:382, 0b1_0111_1110 }
    LongName_ContinuedFractionK = 895, // { group2Bits:0, group1Bits:512, enum:383, 0b1_0111_1111 }
    LongName_TensorProduct = 384, // { group2Bits:0, group1Bits:0, enum:384, 0b1_1000_0000 }
    LongName_TensorWedge = 385, // { group2Bits:0, group1Bits:0, enum:385, 0b1_1000_0001 }
    LongName_ProbabilityPr = 898, // { group2Bits:0, group1Bits:512, enum:386, 0b1_1000_0010 }
    LongName_ExpectationE = 899, // { group2Bits:0, group1Bits:512, enum:387, 0b1_1000_0011 }
    LongName_PermutationProduct = 388, // { group2Bits:0, group1Bits:0, enum:388, 0b1_1000_0100 }
    LongName_NotEqualTilde = 389, // { group2Bits:0, group1Bits:0, enum:389, 0b1_1000_0101 }
    LongName_NotHumpEqual = 390, // { group2Bits:0, group1Bits:0, enum:390, 0b1_1000_0110 }
    LongName_NotHumpDownHump = 391, // { group2Bits:0, group1Bits:0, enum:391, 0b1_1000_0111 }
    LongName_NotLeftTriangleBar = 392, // { group2Bits:0, group1Bits:0, enum:392, 0b1_1000_1000 }
    LongName_NotRightTriangleBar = 393, // { group2Bits:0, group1Bits:0, enum:393, 0b1_1000_1001 }
    LongName_NotLessLess = 394, // { group2Bits:0, group1Bits:0, enum:394, 0b1_1000_1010 }
    LongName_NotNestedLessLess = 395, // { group2Bits:0, group1Bits:0, enum:395, 0b1_1000_1011 }
    LongName_NotLessSlantEqual = 396, // { group2Bits:0, group1Bits:0, enum:396, 0b1_1000_1100 }
    LongName_NotGreaterGreater = 397, // { group2Bits:0, group1Bits:0, enum:397, 0b1_1000_1101 }
    LongName_NotNestedGreaterGreater = 398, // { group2Bits:0, group1Bits:0, enum:398, 0b1_1000_1110 }
    LongName_NotGreaterSlantEqual = 399, // { group2Bits:0, group1Bits:0, enum:399, 0b1_1000_1111 }
    LongName_NotPrecedesEqual = 400, // { group2Bits:0, group1Bits:0, enum:400, 0b1_1001_0000 }
    LongName_NotSucceedsEqual = 401, // { group2Bits:0, group1Bits:0, enum:401, 0b1_1001_0001 }
    LongName_NotSquareSubset = 402, // { group2Bits:0, group1Bits:0, enum:402, 0b1_1001_0010 }
    LongName_NotSquareSuperset = 403, // { group2Bits:0, group1Bits:0, enum:403, 0b1_1001_0011 }
    LongName_Equal = 404, // { group2Bits:0, group1Bits:0, enum:404, 0b1_1001_0100 }
    LongName_VerticalSeparator = 405, // { group2Bits:0, group1Bits:0, enum:405, 0b1_1001_0101 }
    LongName_VectorGreater = 406, // { group2Bits:0, group1Bits:0, enum:406, 0b1_1001_0110 }
    LongName_VectorGreaterEqual = 407, // { group2Bits:0, group1Bits:0, enum:407, 0b1_1001_0111 }
    LongName_VectorLess = 408, // { group2Bits:0, group1Bits:0, enum:408, 0b1_1001_1000 }
    LongName_VectorLessEqual = 409, // { group2Bits:0, group1Bits:0, enum:409, 0b1_1001_1001 }
    LongName_Limit = 410, // { group2Bits:0, group1Bits:0, enum:410, 0b1_1001_1010 }
    LongName_MaxLimit = 411, // { group2Bits:0, group1Bits:0, enum:411, 0b1_1001_1011 }
    LongName_MinLimit = 412, // { group2Bits:0, group1Bits:0, enum:412, 0b1_1001_1100 }
    LongName_Cross = 413, // { group2Bits:0, group1Bits:0, enum:413, 0b1_1001_1101 }
    LongName_Function = 414, // { group2Bits:0, group1Bits:0, enum:414, 0b1_1001_1110 }
    LongName_Xnor = 415, // { group2Bits:0, group1Bits:0, enum:415, 0b1_1001_1111 }
    LongName_DiscreteShift = 416, // { group2Bits:0, group1Bits:0, enum:416, 0b1_1010_0000 }
    LongName_DifferenceDelta = 417, // { group2Bits:0, group1Bits:0, enum:417, 0b1_1010_0001 }
    LongName_DiscreteRatio = 418, // { group2Bits:0, group1Bits:0, enum:418, 0b1_1010_0010 }
    LongName_RuleDelayed = 419, // { group2Bits:0, group1Bits:0, enum:419, 0b1_1010_0011 }
    LongName_Square = 932, // { group2Bits:0, group1Bits:512, enum:420, 0b1_1010_0100 }
    LongName_Rule = 421, // { group2Bits:0, group1Bits:0, enum:421, 0b1_1010_0101 }
    LongName_Implies = 422, // { group2Bits:0, group1Bits:0, enum:422, 0b1_1010_0110 }
    LongName_ShortRightArrow = 423, // { group2Bits:0, group1Bits:0, enum:423, 0b1_1010_0111 }
    LongName_ShortLeftArrow = 424, // { group2Bits:0, group1Bits:0, enum:424, 0b1_1010_1000 }
    LongName_ShortUpArrow = 425, // { group2Bits:0, group1Bits:0, enum:425, 0b1_1010_1001 }
    LongName_ShortDownArrow = 426, // { group2Bits:0, group1Bits:0, enum:426, 0b1_1010_1010 }
    LongName_Application = 427, // { group2Bits:0, group1Bits:0, enum:427, 0b1_1010_1011 }
    LongName_LeftBracketingBar = 940, // { group2Bits:0, group1Bits:512, enum:428, 0b1_1010_1100 }
    LongName_RightBracketingBar = 1453, // { group2Bits:0, group1Bits:1024, enum:429, 0b1_1010_1101 }
    LongName_LeftDoubleBracketingBar = 942, // { group2Bits:0, group1Bits:512, enum:430, 0b1_1010_1110 }
    LongName_RightDoubleBracketingBar = 1455, // { group2Bits:0, group1Bits:1024, enum:431, 0b1_1010_1111 }
    LongName_CapitalDifferentialD = 944, // { group2Bits:0, group1Bits:512, enum:432, 0b1_1011_0000 }
    LongName_DifferentialD = 945, // { group2Bits:0, group1Bits:512, enum:433, 0b1_1011_0001 }
    LongName_InvisibleComma = 434, // { group2Bits:0, group1Bits:0, enum:434, 0b1_1011_0010 }
    LongName_InvisibleApplication = 435, // { group2Bits:0, group1Bits:0, enum:435, 0b1_1011_0011 }
    LongName_LongEqual = 436, // { group2Bits:0, group1Bits:0, enum:436, 0b1_1011_0100 }
    Count = 437, // { group2Bits:0, group1Bits:0, enum:437, 0b1_1011_0101 }
}

//
// AUTO GENERATED FILE
// DO NOT MODIFY
//

use crate::symbol_registration::*;

//
// TokenKind::Integer must be 0x4 to allow setting the 0b1 bit to convert to TokenKind::REAL, and 0b10 bit to convert to TokenKind::Rational
//
const _: () = assert!(TokenKind::Integer.value() == 0x4, "Check your assumptions");
const _: () = assert!(TokenKind::Real.value() == 0x5, "Check your assumptions");
const _: () = assert!(TokenKind::Rational.value() == 0x6, "Check your assumptions");

//
// TokenKind::InternalNewline must be 0x8 to allow setting the 0b100 bit to convert to TokenKind::ToplevelNewline
//
const _: () = assert!(TokenKind::InternalNewline.value() == 0b1000, "Check your assumptions");
const _: () = assert!(TokenKind::ToplevelNewline.value() == 0b1100, "Check your assumptions");
//const _: () = assert!(TokenKind::Error_First.value() == 0x10, "Check your assumptions");

//
// TokenKind::Error_Unterminated_First must be 0x1c to allow checking 0b0_0001_11xx for isUnterminated
//
const _: () = assert!(TokenKind::Error_Unterminated_First.value() == 0x1c, "Check your assumptions");
const _: () = assert!(TokenKind::Error_Unterminated_End.value() == 0x20, "Check your assumptions");


#[allow(dead_code)]
pub(crate) fn TokenToSymbol(token: TokenKind) -> Symbol {
    use TokenKind::*;
    match token {
        Unknown => return SYMBOL_TOKEN_UNKNOWN,
        EndOfFile => return SYMBOL_ENDOFFILE,
        Symbol => return SYMBOL_SYMBOL,
        String => return SYMBOL_STRING,
        Integer => return SYMBOL_INTEGER,
        Real => return SYMBOL_REAL,
        Rational => return SYMBOL_RATIONAL,
        LinearSyntaxBlob => return SYMBOL_TOKEN_LINEARSYNTAXBLOB,
        InternalNewline => return SYMBOL_TOKEN_NEWLINE,
        Comment => return SYMBOL_TOKEN_COMMENT,
        Whitespace => return SYMBOL_WHITESPACE,
        Buffer1 => return SYMBOL_TOKEN_BUFFER1,
        ToplevelNewline => return SYMBOL_TOKEN_NEWLINE,
        Buffer2 => return SYMBOL_TOKEN_BUFFER2,
        Buffer3 => return SYMBOL_TOKEN_BUFFER3,
        Buffer4 => return SYMBOL_TOKEN_BUFFER4,
        Error_ExpectedEqual => return SYMBOL_TOKEN_ERROR_EXPECTEDEQUAL,
        Error_Number => return SYMBOL_TOKEN_ERROR_NUMBER,
        Error_UnhandledCharacter => return SYMBOL_TOKEN_ERROR_UNHANDLEDCHARACTER,
        Error_ExpectedLetterlike => return SYMBOL_TOKEN_ERROR_EXPECTEDLETTERLIKE,
        Error_Aborted => return SYMBOL_TOKEN_ERROR_ABORTED,
        Error_ExpectedOperand => return SYMBOL_TOKEN_ERROR_EXPECTEDOPERAND,
        Error_ExpectedTag => return SYMBOL_TOKEN_ERROR_EXPECTEDTAG,
        Error_ExpectedFile => return SYMBOL_TOKEN_ERROR_EXPECTEDFILE,
        Error_UnexpectedCloser => return SYMBOL_TOKEN_ERROR_UNEXPECTEDCLOSER,
        Error_PrefixImplicitNull => return SYMBOL_TOKEN_ERROR_PREFIXIMPLICITNULL,
        Error_InfixImplicitNull => return SYMBOL_TOKEN_ERROR_INFIXIMPLICITNULL,
        Error_UnsafeCharacterEncoding => return SYMBOL_TOKEN_ERROR_UNSAFECHARACTERENCODING,
        Error_UnterminatedComment => return SYMBOL_TOKEN_ERROR_UNTERMINATEDCOMMENT,
        Error_UnterminatedString => return SYMBOL_TOKEN_ERROR_UNTERMINATEDSTRING,
        Error_UnterminatedFileString => return SYMBOL_TOKEN_ERROR_UNTERMINATEDFILESTRING,
        Error_UnterminatedLinearSyntaxBlob => return SYMBOL_TOKEN_ERROR_UNTERMINATEDLINEARSYNTAXBLOB,
        Error_UnsupportedToken => return SYMBOL_TOKEN_ERROR_UNSUPPORTEDTOKEN,
        Error_UnexpectedCommentCloser => return SYMBOL_TOKEN_ERROR_UNEXPECTEDCOMMENTCLOSER,
        Error_End => return SYMBOL_TOKEN_ERROR_END,
        Dot => return SYMBOL_TOKEN_DOT,
        Colon => return SYMBOL_TOKEN_COLON,
        OpenParen => return SYMBOL_TOKEN_OPENPAREN,
        CloseParen => return SYMBOL_TOKEN_CLOSEPAREN,
        OpenSquare => return SYMBOL_TOKEN_OPENSQUARE,
        CloseSquare => return SYMBOL_TOKEN_CLOSESQUARE,
        Comma => return SYMBOL_TOKEN_COMMA,
        OpenCurly => return SYMBOL_TOKEN_OPENCURLY,
        CloseCurly => return SYMBOL_TOKEN_CLOSECURLY,
        Equal => return SYMBOL_TOKEN_EQUAL,
        Bang => return SYMBOL_TOKEN_BANG,
        Under => return SYMBOL_TOKEN_UNDER,
        Less => return SYMBOL_TOKEN_LESS,
        Greater => return SYMBOL_TOKEN_GREATER,
        Minus => return SYMBOL_TOKEN_MINUS,
        Bar => return SYMBOL_TOKEN_BAR,
        Semi => return SYMBOL_TOKEN_SEMI,
        Hash => return SYMBOL_TOKEN_HASH,
        Amp => return SYMBOL_TOKEN_AMP,
        Slash => return SYMBOL_TOKEN_SLASH,
        At => return SYMBOL_TOKEN_AT,
        Plus => return SYMBOL_TOKEN_PLUS,
        Tilde => return SYMBOL_TOKEN_TILDE,
        Star => return SYMBOL_TOKEN_STAR,
        Caret => return SYMBOL_TOKEN_CARET,
        SingleQuote => return SYMBOL_TOKEN_SINGLEQUOTE,
        Percent => return SYMBOL_TOKEN_PERCENT,
        Question => return SYMBOL_TOKEN_QUESTION,
        DotDot => return SYMBOL_TOKEN_DOTDOT,
        ColonColon => return SYMBOL_TOKEN_COLONCOLON,
        ColonEqual => return SYMBOL_TOKEN_COLONEQUAL,
        ColonGreater => return SYMBOL_TOKEN_COLONGREATER,
        EqualEqual => return SYMBOL_TOKEN_EQUALEQUAL,
        UnderUnder => return SYMBOL_TOKEN_UNDERUNDER,
        UnderDot => return SYMBOL_TOKEN_UNDERDOT,
        LessBar => return SYMBOL_TOKEN_LESSBAR,
        LessLess => return SYMBOL_TOKEN_LESSLESS,
        LessGreater => return SYMBOL_TOKEN_LESSGREATER,
        LessEqual => return SYMBOL_TOKEN_LESSEQUAL,
        GreaterGreater => return SYMBOL_TOKEN_GREATERGREATER,
        GreaterEqual => return SYMBOL_TOKEN_GREATEREQUAL,
        MinusGreater => return SYMBOL_TOKEN_MINUSGREATER,
        MinusMinus => return SYMBOL_TOKEN_MINUSMINUS,
        MinusEqual => return SYMBOL_TOKEN_MINUSEQUAL,
        BarBar => return SYMBOL_TOKEN_BARBAR,
        BarGreater => return SYMBOL_TOKEN_BARGREATER,
        SemiSemi => return SYMBOL_TOKEN_SEMISEMI,
        AmpAmp => return SYMBOL_TOKEN_AMPAMP,
        SlashAt => return SYMBOL_TOKEN_SLASHAT,
        SlashSemi => return SYMBOL_TOKEN_SLASHSEMI,
        SlashDot => return SYMBOL_TOKEN_SLASHDOT,
        SlashSlash => return SYMBOL_TOKEN_SLASHSLASH,
        SlashColon => return SYMBOL_TOKEN_SLASHCOLON,
        SlashEqual => return SYMBOL_TOKEN_SLASHEQUAL,
        SlashStar => return SYMBOL_TOKEN_SLASHSTAR,
        AtAt => return SYMBOL_TOKEN_ATAT,
        AtStar => return SYMBOL_TOKEN_ATSTAR,
        PlusPlus => return SYMBOL_TOKEN_PLUSPLUS,
        PlusEqual => return SYMBOL_TOKEN_PLUSEQUAL,
        TildeTilde => return SYMBOL_TOKEN_TILDETILDE,
        StarEqual => return SYMBOL_TOKEN_STAREQUAL,
        StarStar => return SYMBOL_TOKEN_STARSTAR,
        CaretEqual => return SYMBOL_TOKEN_CARETEQUAL,
        HashHash => return SYMBOL_TOKEN_HASHHASH,
        BangEqual => return SYMBOL_TOKEN_BANGEQUAL,
        BangBang => return SYMBOL_TOKEN_BANGBANG,
        QuestionQuestion => return SYMBOL_TOKEN_QUESTIONQUESTION,
        DotDotDot => return SYMBOL_TOKEN_DOTDOTDOT,
        EqualEqualEqual => return SYMBOL_TOKEN_EQUALEQUALEQUAL,
        EqualBangEqual => return SYMBOL_TOKEN_EQUALBANGEQUAL,
        UnderUnderUnder => return SYMBOL_TOKEN_UNDERUNDERUNDER,
        SlashSlashDot => return SYMBOL_TOKEN_SLASHSLASHDOT,
        AtAtAt => return SYMBOL_TOKEN_ATATAT,
        LessMinusGreater => return SYMBOL_TOKEN_LESSMINUSGREATER,
        SlashSlashAt => return SYMBOL_TOKEN_SLASHSLASHAT,
        CaretColonEqual => return SYMBOL_TOKEN_CARETCOLONEQUAL,
        GreaterGreaterGreater => return SYMBOL_TOKEN_GREATERGREATERGREATER,
        BarMinusGreater => return SYMBOL_TOKEN_BARMINUSGREATER,
        SlashSlashEqual => return SYMBOL_TOKEN_SLASHSLASHEQUAL,
        ColonColonOpenSquare => return SYMBOL_TOKEN_COLONCOLONOPENSQUARE,
        PercentPercent => return SYMBOL_TOKEN_PERCENTPERCENT,
        LinearSyntax_Bang => return SYMBOL_TOKEN_LINEARSYNTAX_BANG,
        LinearSyntax_CloseParen => return SYMBOL_TOKEN_LINEARSYNTAX_CLOSEPAREN,
        LinearSyntax_At => return SYMBOL_TOKEN_LINEARSYNTAX_AT,
        LinearSyntax_Amp => return SYMBOL_TOKEN_LINEARSYNTAX_AMP,
        LinearSyntax_Star => return SYMBOL_TOKEN_LINEARSYNTAX_STAR,
        LinearSyntax_Under => return SYMBOL_TOKEN_LINEARSYNTAX_UNDER,
        LinearSyntax_Caret => return SYMBOL_TOKEN_LINEARSYNTAX_CARET,
        LinearSyntax_Space => return SYMBOL_TOKEN_LINEARSYNTAX_SPACE,
        LinearSyntax_Percent => return SYMBOL_TOKEN_LINEARSYNTAX_PERCENT,
        LinearSyntax_Plus => return SYMBOL_TOKEN_LINEARSYNTAX_PLUS,
        LinearSyntax_Slash => return SYMBOL_TOKEN_LINEARSYNTAX_SLASH,
        LinearSyntax_BackTick => return SYMBOL_TOKEN_LINEARSYNTAX_BACKTICK,
        Fake_ImplicitTimes => return SYMBOL_TOKEN_FAKE_IMPLICITTIMES,
        Fake_ImplicitNull => return SYMBOL_TOKEN_FAKE_IMPLICITNULL,
        Fake_ImplicitOne => return SYMBOL_TOKEN_FAKE_IMPLICITONE,
        Fake_ImplicitAll => return SYMBOL_TOKEN_FAKE_IMPLICITALL,
        Boxes_OpenParenStar => return SYMBOL_TOKEN_BOXES_OPENPARENSTAR,
        Boxes_StarCloseParen => return SYMBOL_TOKEN_BOXES_STARCLOSEPAREN,
        Boxes_MultiSingleQuote => return SYMBOL_TOKEN_BOXES_MULTISINGLEQUOTE,
        Boxes_MultiWhitespace => return SYMBOL_TOKEN_BOXES_MULTIWHITESPACE,
        LongName_Not => return SYMBOL_TOKEN_LONGNAME_NOT,
        LongName_PlusMinus => return SYMBOL_TOKEN_LONGNAME_PLUSMINUS,
        LongName_CenterDot => return SYMBOL_TOKEN_LONGNAME_CENTERDOT,
        LongName_Times => return SYMBOL_TOKEN_LONGNAME_TIMES,
        LongName_Divide => return SYMBOL_TOKEN_LONGNAME_DIVIDE,
        LongName_OpenCurlyQuote => return SYMBOL_TOKEN_LONGNAME_OPENCURLYQUOTE,
        LongName_CloseCurlyQuote => return SYMBOL_TOKEN_LONGNAME_CLOSECURLYQUOTE,
        LongName_OpenCurlyDoubleQuote => return SYMBOL_TOKEN_LONGNAME_OPENCURLYDOUBLEQUOTE,
        LongName_CloseCurlyDoubleQuote => return SYMBOL_TOKEN_LONGNAME_CLOSECURLYDOUBLEQUOTE,
        LongName_InvisibleTimes => return SYMBOL_TOKEN_LONGNAME_INVISIBLETIMES,
        LongName_LeftArrow => return SYMBOL_TOKEN_LONGNAME_LEFTARROW,
        LongName_UpArrow => return SYMBOL_TOKEN_LONGNAME_UPARROW,
        LongName_RightArrow => return SYMBOL_TOKEN_LONGNAME_RIGHTARROW,
        LongName_DownArrow => return SYMBOL_TOKEN_LONGNAME_DOWNARROW,
        LongName_LeftRightArrow => return SYMBOL_TOKEN_LONGNAME_LEFTRIGHTARROW,
        LongName_UpDownArrow => return SYMBOL_TOKEN_LONGNAME_UPDOWNARROW,
        LongName_UpperLeftArrow => return SYMBOL_TOKEN_LONGNAME_UPPERLEFTARROW,
        LongName_UpperRightArrow => return SYMBOL_TOKEN_LONGNAME_UPPERRIGHTARROW,
        LongName_LowerRightArrow => return SYMBOL_TOKEN_LONGNAME_LOWERRIGHTARROW,
        LongName_LowerLeftArrow => return SYMBOL_TOKEN_LONGNAME_LOWERLEFTARROW,
        LongName_LeftTeeArrow => return SYMBOL_TOKEN_LONGNAME_LEFTTEEARROW,
        LongName_UpTeeArrow => return SYMBOL_TOKEN_LONGNAME_UPTEEARROW,
        LongName_RightTeeArrow => return SYMBOL_TOKEN_LONGNAME_RIGHTTEEARROW,
        LongName_DownTeeArrow => return SYMBOL_TOKEN_LONGNAME_DOWNTEEARROW,
        LongName_LeftVector => return SYMBOL_TOKEN_LONGNAME_LEFTVECTOR,
        LongName_DownLeftVector => return SYMBOL_TOKEN_LONGNAME_DOWNLEFTVECTOR,
        LongName_RightUpVector => return SYMBOL_TOKEN_LONGNAME_RIGHTUPVECTOR,
        LongName_LeftUpVector => return SYMBOL_TOKEN_LONGNAME_LEFTUPVECTOR,
        LongName_RightVector => return SYMBOL_TOKEN_LONGNAME_RIGHTVECTOR,
        LongName_DownRightVector => return SYMBOL_TOKEN_LONGNAME_DOWNRIGHTVECTOR,
        LongName_RightDownVector => return SYMBOL_TOKEN_LONGNAME_RIGHTDOWNVECTOR,
        LongName_LeftDownVector => return SYMBOL_TOKEN_LONGNAME_LEFTDOWNVECTOR,
        LongName_RightArrowLeftArrow => return SYMBOL_TOKEN_LONGNAME_RIGHTARROWLEFTARROW,
        LongName_UpArrowDownArrow => return SYMBOL_TOKEN_LONGNAME_UPARROWDOWNARROW,
        LongName_LeftArrowRightArrow => return SYMBOL_TOKEN_LONGNAME_LEFTARROWRIGHTARROW,
        LongName_ReverseEquilibrium => return SYMBOL_TOKEN_LONGNAME_REVERSEEQUILIBRIUM,
        LongName_Equilibrium => return SYMBOL_TOKEN_LONGNAME_EQUILIBRIUM,
        LongName_DoubleLeftArrow => return SYMBOL_TOKEN_LONGNAME_DOUBLELEFTARROW,
        LongName_DoubleUpArrow => return SYMBOL_TOKEN_LONGNAME_DOUBLEUPARROW,
        LongName_DoubleRightArrow => return SYMBOL_TOKEN_LONGNAME_DOUBLERIGHTARROW,
        LongName_DoubleDownArrow => return SYMBOL_TOKEN_LONGNAME_DOUBLEDOWNARROW,
        LongName_DoubleLeftRightArrow => return SYMBOL_TOKEN_LONGNAME_DOUBLELEFTRIGHTARROW,
        LongName_DoubleUpDownArrow => return SYMBOL_TOKEN_LONGNAME_DOUBLEUPDOWNARROW,
        LongName_LeftArrowBar => return SYMBOL_TOKEN_LONGNAME_LEFTARROWBAR,
        LongName_RightArrowBar => return SYMBOL_TOKEN_LONGNAME_RIGHTARROWBAR,
        LongName_DownArrowUpArrow => return SYMBOL_TOKEN_LONGNAME_DOWNARROWUPARROW,
        LongName_ForAll => return SYMBOL_TOKEN_LONGNAME_FORALL,
        LongName_PartialD => return SYMBOL_TOKEN_LONGNAME_PARTIALD,
        LongName_Exists => return SYMBOL_TOKEN_LONGNAME_EXISTS,
        LongName_NotExists => return SYMBOL_TOKEN_LONGNAME_NOTEXISTS,
        LongName_Del => return SYMBOL_TOKEN_LONGNAME_DEL,
        LongName_Element => return SYMBOL_TOKEN_LONGNAME_ELEMENT,
        LongName_NotElement => return SYMBOL_TOKEN_LONGNAME_NOTELEMENT,
        LongName_ReverseElement => return SYMBOL_TOKEN_LONGNAME_REVERSEELEMENT,
        LongName_NotReverseElement => return SYMBOL_TOKEN_LONGNAME_NOTREVERSEELEMENT,
        LongName_SuchThat => return SYMBOL_TOKEN_LONGNAME_SUCHTHAT,
        LongName_Product => return SYMBOL_TOKEN_LONGNAME_PRODUCT,
        LongName_Coproduct => return SYMBOL_TOKEN_LONGNAME_COPRODUCT,
        LongName_Sum => return SYMBOL_TOKEN_LONGNAME_SUM,
        LongName_Minus => return SYMBOL_TOKEN_LONGNAME_MINUS,
        LongName_MinusPlus => return SYMBOL_TOKEN_LONGNAME_MINUSPLUS,
        LongName_DivisionSlash => return SYMBOL_TOKEN_LONGNAME_DIVISIONSLASH,
        LongName_Backslash => return SYMBOL_TOKEN_LONGNAME_BACKSLASH,
        LongName_SmallCircle => return SYMBOL_TOKEN_LONGNAME_SMALLCIRCLE,
        LongName_Sqrt => return SYMBOL_TOKEN_LONGNAME_SQRT,
        LongName_CubeRoot => return SYMBOL_TOKEN_LONGNAME_CUBEROOT,
        LongName_Proportional => return SYMBOL_TOKEN_LONGNAME_PROPORTIONAL,
        LongName_Divides => return SYMBOL_TOKEN_LONGNAME_DIVIDES,
        LongName_DoubleVerticalBar => return SYMBOL_TOKEN_LONGNAME_DOUBLEVERTICALBAR,
        LongName_NotDoubleVerticalBar => return SYMBOL_TOKEN_LONGNAME_NOTDOUBLEVERTICALBAR,
        LongName_And => return SYMBOL_TOKEN_LONGNAME_AND,
        LongName_Or => return SYMBOL_TOKEN_LONGNAME_OR,
        LongName_Integral => return SYMBOL_TOKEN_LONGNAME_INTEGRAL,
        LongName_ContourIntegral => return SYMBOL_TOKEN_LONGNAME_CONTOURINTEGRAL,
        LongName_DoubleContourIntegral => return SYMBOL_TOKEN_LONGNAME_DOUBLECONTOURINTEGRAL,
        LongName_ClockwiseContourIntegral => return SYMBOL_TOKEN_LONGNAME_CLOCKWISECONTOURINTEGRAL,
        LongName_CounterClockwiseContourIntegral => return SYMBOL_TOKEN_LONGNAME_COUNTERCLOCKWISECONTOURINTEGRAL,
        LongName_Therefore => return SYMBOL_TOKEN_LONGNAME_THEREFORE,
        LongName_Because => return SYMBOL_TOKEN_LONGNAME_BECAUSE,
        LongName_Colon => return SYMBOL_TOKEN_LONGNAME_COLON,
        LongName_Proportion => return SYMBOL_TOKEN_LONGNAME_PROPORTION,
        LongName_Tilde => return SYMBOL_TOKEN_LONGNAME_TILDE,
        LongName_VerticalTilde => return SYMBOL_TOKEN_LONGNAME_VERTICALTILDE,
        LongName_NotTilde => return SYMBOL_TOKEN_LONGNAME_NOTTILDE,
        LongName_EqualTilde => return SYMBOL_TOKEN_LONGNAME_EQUALTILDE,
        LongName_TildeEqual => return SYMBOL_TOKEN_LONGNAME_TILDEEQUAL,
        LongName_NotTildeEqual => return SYMBOL_TOKEN_LONGNAME_NOTTILDEEQUAL,
        LongName_TildeFullEqual => return SYMBOL_TOKEN_LONGNAME_TILDEFULLEQUAL,
        LongName_NotTildeFullEqual => return SYMBOL_TOKEN_LONGNAME_NOTTILDEFULLEQUAL,
        LongName_TildeTilde => return SYMBOL_TOKEN_LONGNAME_TILDETILDE,
        LongName_NotTildeTilde => return SYMBOL_TOKEN_LONGNAME_NOTTILDETILDE,
        LongName_CupCap => return SYMBOL_TOKEN_LONGNAME_CUPCAP,
        LongName_HumpDownHump => return SYMBOL_TOKEN_LONGNAME_HUMPDOWNHUMP,
        LongName_HumpEqual => return SYMBOL_TOKEN_LONGNAME_HUMPEQUAL,
        LongName_DotEqual => return SYMBOL_TOKEN_LONGNAME_DOTEQUAL,
        LongName_NotEqual => return SYMBOL_TOKEN_LONGNAME_NOTEQUAL,
        LongName_Congruent => return SYMBOL_TOKEN_LONGNAME_CONGRUENT,
        LongName_NotCongruent => return SYMBOL_TOKEN_LONGNAME_NOTCONGRUENT,
        LongName_LessEqual => return SYMBOL_TOKEN_LONGNAME_LESSEQUAL,
        LongName_GreaterEqual => return SYMBOL_TOKEN_LONGNAME_GREATEREQUAL,
        LongName_LessFullEqual => return SYMBOL_TOKEN_LONGNAME_LESSFULLEQUAL,
        LongName_GreaterFullEqual => return SYMBOL_TOKEN_LONGNAME_GREATERFULLEQUAL,
        LongName_NotLessFullEqual => return SYMBOL_TOKEN_LONGNAME_NOTLESSFULLEQUAL,
        LongName_NotGreaterFullEqual => return SYMBOL_TOKEN_LONGNAME_NOTGREATERFULLEQUAL,
        LongName_LessLess => return SYMBOL_TOKEN_LONGNAME_LESSLESS,
        LongName_GreaterGreater => return SYMBOL_TOKEN_LONGNAME_GREATERGREATER,
        LongName_NotCupCap => return SYMBOL_TOKEN_LONGNAME_NOTCUPCAP,
        LongName_NotLess => return SYMBOL_TOKEN_LONGNAME_NOTLESS,
        LongName_NotGreater => return SYMBOL_TOKEN_LONGNAME_NOTGREATER,
        LongName_NotLessEqual => return SYMBOL_TOKEN_LONGNAME_NOTLESSEQUAL,
        LongName_NotGreaterEqual => return SYMBOL_TOKEN_LONGNAME_NOTGREATEREQUAL,
        LongName_LessTilde => return SYMBOL_TOKEN_LONGNAME_LESSTILDE,
        LongName_GreaterTilde => return SYMBOL_TOKEN_LONGNAME_GREATERTILDE,
        LongName_NotLessTilde => return SYMBOL_TOKEN_LONGNAME_NOTLESSTILDE,
        LongName_NotGreaterTilde => return SYMBOL_TOKEN_LONGNAME_NOTGREATERTILDE,
        LongName_LessGreater => return SYMBOL_TOKEN_LONGNAME_LESSGREATER,
        LongName_GreaterLess => return SYMBOL_TOKEN_LONGNAME_GREATERLESS,
        LongName_NotLessGreater => return SYMBOL_TOKEN_LONGNAME_NOTLESSGREATER,
        LongName_NotGreaterLess => return SYMBOL_TOKEN_LONGNAME_NOTGREATERLESS,
        LongName_Precedes => return SYMBOL_TOKEN_LONGNAME_PRECEDES,
        LongName_Succeeds => return SYMBOL_TOKEN_LONGNAME_SUCCEEDS,
        LongName_PrecedesSlantEqual => return SYMBOL_TOKEN_LONGNAME_PRECEDESSLANTEQUAL,
        LongName_SucceedsSlantEqual => return SYMBOL_TOKEN_LONGNAME_SUCCEEDSSLANTEQUAL,
        LongName_PrecedesTilde => return SYMBOL_TOKEN_LONGNAME_PRECEDESTILDE,
        LongName_SucceedsTilde => return SYMBOL_TOKEN_LONGNAME_SUCCEEDSTILDE,
        LongName_NotPrecedes => return SYMBOL_TOKEN_LONGNAME_NOTPRECEDES,
        LongName_NotSucceeds => return SYMBOL_TOKEN_LONGNAME_NOTSUCCEEDS,
        LongName_Subset => return SYMBOL_TOKEN_LONGNAME_SUBSET,
        LongName_Superset => return SYMBOL_TOKEN_LONGNAME_SUPERSET,
        LongName_NotSubset => return SYMBOL_TOKEN_LONGNAME_NOTSUBSET,
        LongName_NotSuperset => return SYMBOL_TOKEN_LONGNAME_NOTSUPERSET,
        LongName_SubsetEqual => return SYMBOL_TOKEN_LONGNAME_SUBSETEQUAL,
        LongName_SupersetEqual => return SYMBOL_TOKEN_LONGNAME_SUPERSETEQUAL,
        LongName_NotSubsetEqual => return SYMBOL_TOKEN_LONGNAME_NOTSUBSETEQUAL,
        LongName_NotSupersetEqual => return SYMBOL_TOKEN_LONGNAME_NOTSUPERSETEQUAL,
        LongName_UnionPlus => return SYMBOL_TOKEN_LONGNAME_UNIONPLUS,
        LongName_SquareSubset => return SYMBOL_TOKEN_LONGNAME_SQUARESUBSET,
        LongName_SquareSuperset => return SYMBOL_TOKEN_LONGNAME_SQUARESUPERSET,
        LongName_SquareSubsetEqual => return SYMBOL_TOKEN_LONGNAME_SQUARESUBSETEQUAL,
        LongName_SquareSupersetEqual => return SYMBOL_TOKEN_LONGNAME_SQUARESUPERSETEQUAL,
        LongName_SquareIntersection => return SYMBOL_TOKEN_LONGNAME_SQUAREINTERSECTION,
        LongName_SquareUnion => return SYMBOL_TOKEN_LONGNAME_SQUAREUNION,
        LongName_CirclePlus => return SYMBOL_TOKEN_LONGNAME_CIRCLEPLUS,
        LongName_CircleMinus => return SYMBOL_TOKEN_LONGNAME_CIRCLEMINUS,
        LongName_CircleTimes => return SYMBOL_TOKEN_LONGNAME_CIRCLETIMES,
        LongName_CircleDot => return SYMBOL_TOKEN_LONGNAME_CIRCLEDOT,
        LongName_RightTee => return SYMBOL_TOKEN_LONGNAME_RIGHTTEE,
        LongName_LeftTee => return SYMBOL_TOKEN_LONGNAME_LEFTTEE,
        LongName_DownTee => return SYMBOL_TOKEN_LONGNAME_DOWNTEE,
        LongName_UpTee => return SYMBOL_TOKEN_LONGNAME_UPTEE,
        LongName_DoubleRightTee => return SYMBOL_TOKEN_LONGNAME_DOUBLERIGHTTEE,
        LongName_LeftTriangle => return SYMBOL_TOKEN_LONGNAME_LEFTTRIANGLE,
        LongName_RightTriangle => return SYMBOL_TOKEN_LONGNAME_RIGHTTRIANGLE,
        LongName_LeftTriangleEqual => return SYMBOL_TOKEN_LONGNAME_LEFTTRIANGLEEQUAL,
        LongName_RightTriangleEqual => return SYMBOL_TOKEN_LONGNAME_RIGHTTRIANGLEEQUAL,
        LongName_Xor => return SYMBOL_TOKEN_LONGNAME_XOR,
        LongName_Nand => return SYMBOL_TOKEN_LONGNAME_NAND,
        LongName_Nor => return SYMBOL_TOKEN_LONGNAME_NOR,
        LongName_Wedge => return SYMBOL_TOKEN_LONGNAME_WEDGE,
        LongName_Vee => return SYMBOL_TOKEN_LONGNAME_VEE,
        LongName_Intersection => return SYMBOL_TOKEN_LONGNAME_INTERSECTION,
        LongName_Union => return SYMBOL_TOKEN_LONGNAME_UNION,
        LongName_Diamond => return SYMBOL_TOKEN_LONGNAME_DIAMOND,
        LongName_Star => return SYMBOL_TOKEN_LONGNAME_STAR,
        LongName_LessEqualGreater => return SYMBOL_TOKEN_LONGNAME_LESSEQUALGREATER,
        LongName_GreaterEqualLess => return SYMBOL_TOKEN_LONGNAME_GREATEREQUALLESS,
        LongName_NotPrecedesSlantEqual => return SYMBOL_TOKEN_LONGNAME_NOTPRECEDESSLANTEQUAL,
        LongName_NotSucceedsSlantEqual => return SYMBOL_TOKEN_LONGNAME_NOTSUCCEEDSSLANTEQUAL,
        LongName_NotSquareSubsetEqual => return SYMBOL_TOKEN_LONGNAME_NOTSQUARESUBSETEQUAL,
        LongName_NotSquareSupersetEqual => return SYMBOL_TOKEN_LONGNAME_NOTSQUARESUPERSETEQUAL,
        LongName_NotPrecedesTilde => return SYMBOL_TOKEN_LONGNAME_NOTPRECEDESTILDE,
        LongName_NotSucceedsTilde => return SYMBOL_TOKEN_LONGNAME_NOTSUCCEEDSTILDE,
        LongName_NotLeftTriangle => return SYMBOL_TOKEN_LONGNAME_NOTLEFTTRIANGLE,
        LongName_NotRightTriangle => return SYMBOL_TOKEN_LONGNAME_NOTRIGHTTRIANGLE,
        LongName_NotLeftTriangleEqual => return SYMBOL_TOKEN_LONGNAME_NOTLEFTTRIANGLEEQUAL,
        LongName_NotRightTriangleEqual => return SYMBOL_TOKEN_LONGNAME_NOTRIGHTTRIANGLEEQUAL,
        LongName_LeftCeiling => return SYMBOL_TOKEN_LONGNAME_LEFTCEILING,
        LongName_RightCeiling => return SYMBOL_TOKEN_LONGNAME_RIGHTCEILING,
        LongName_LeftFloor => return SYMBOL_TOKEN_LONGNAME_LEFTFLOOR,
        LongName_RightFloor => return SYMBOL_TOKEN_LONGNAME_RIGHTFLOOR,
        LongName_Cap => return SYMBOL_TOKEN_LONGNAME_CAP,
        LongName_Cup => return SYMBOL_TOKEN_LONGNAME_CUP,
        LongName_LeftAngleBracket => return SYMBOL_TOKEN_LONGNAME_LEFTANGLEBRACKET,
        LongName_RightAngleBracket => return SYMBOL_TOKEN_LONGNAME_RIGHTANGLEBRACKET,
        LongName_Perpendicular => return SYMBOL_TOKEN_LONGNAME_PERPENDICULAR,
        LongName_LongLeftArrow => return SYMBOL_TOKEN_LONGNAME_LONGLEFTARROW,
        LongName_LongRightArrow => return SYMBOL_TOKEN_LONGNAME_LONGRIGHTARROW,
        LongName_LongLeftRightArrow => return SYMBOL_TOKEN_LONGNAME_LONGLEFTRIGHTARROW,
        LongName_DoubleLongLeftArrow => return SYMBOL_TOKEN_LONGNAME_DOUBLELONGLEFTARROW,
        LongName_DoubleLongRightArrow => return SYMBOL_TOKEN_LONGNAME_DOUBLELONGRIGHTARROW,
        LongName_DoubleLongLeftRightArrow => return SYMBOL_TOKEN_LONGNAME_DOUBLELONGLEFTRIGHTARROW,
        LongName_UpArrowBar => return SYMBOL_TOKEN_LONGNAME_UPARROWBAR,
        LongName_DownArrowBar => return SYMBOL_TOKEN_LONGNAME_DOWNARROWBAR,
        LongName_LeftRightVector => return SYMBOL_TOKEN_LONGNAME_LEFTRIGHTVECTOR,
        LongName_RightUpDownVector => return SYMBOL_TOKEN_LONGNAME_RIGHTUPDOWNVECTOR,
        LongName_DownLeftRightVector => return SYMBOL_TOKEN_LONGNAME_DOWNLEFTRIGHTVECTOR,
        LongName_LeftUpDownVector => return SYMBOL_TOKEN_LONGNAME_LEFTUPDOWNVECTOR,
        LongName_LeftVectorBar => return SYMBOL_TOKEN_LONGNAME_LEFTVECTORBAR,
        LongName_RightVectorBar => return SYMBOL_TOKEN_LONGNAME_RIGHTVECTORBAR,
        LongName_RightUpVectorBar => return SYMBOL_TOKEN_LONGNAME_RIGHTUPVECTORBAR,
        LongName_RightDownVectorBar => return SYMBOL_TOKEN_LONGNAME_RIGHTDOWNVECTORBAR,
        LongName_DownLeftVectorBar => return SYMBOL_TOKEN_LONGNAME_DOWNLEFTVECTORBAR,
        LongName_DownRightVectorBar => return SYMBOL_TOKEN_LONGNAME_DOWNRIGHTVECTORBAR,
        LongName_LeftUpVectorBar => return SYMBOL_TOKEN_LONGNAME_LEFTUPVECTORBAR,
        LongName_LeftDownVectorBar => return SYMBOL_TOKEN_LONGNAME_LEFTDOWNVECTORBAR,
        LongName_LeftTeeVector => return SYMBOL_TOKEN_LONGNAME_LEFTTEEVECTOR,
        LongName_RightTeeVector => return SYMBOL_TOKEN_LONGNAME_RIGHTTEEVECTOR,
        LongName_RightUpTeeVector => return SYMBOL_TOKEN_LONGNAME_RIGHTUPTEEVECTOR,
        LongName_RightDownTeeVector => return SYMBOL_TOKEN_LONGNAME_RIGHTDOWNTEEVECTOR,
        LongName_DownLeftTeeVector => return SYMBOL_TOKEN_LONGNAME_DOWNLEFTTEEVECTOR,
        LongName_DownRightTeeVector => return SYMBOL_TOKEN_LONGNAME_DOWNRIGHTTEEVECTOR,
        LongName_LeftUpTeeVector => return SYMBOL_TOKEN_LONGNAME_LEFTUPTEEVECTOR,
        LongName_LeftDownTeeVector => return SYMBOL_TOKEN_LONGNAME_LEFTDOWNTEEVECTOR,
        LongName_UpEquilibrium => return SYMBOL_TOKEN_LONGNAME_UPEQUILIBRIUM,
        LongName_ReverseUpEquilibrium => return SYMBOL_TOKEN_LONGNAME_REVERSEUPEQUILIBRIUM,
        LongName_RoundImplies => return SYMBOL_TOKEN_LONGNAME_ROUNDIMPLIES,
        LongName_LeftTriangleBar => return SYMBOL_TOKEN_LONGNAME_LEFTTRIANGLEBAR,
        LongName_RightTriangleBar => return SYMBOL_TOKEN_LONGNAME_RIGHTTRIANGLEBAR,
        LongName_Equivalent => return SYMBOL_TOKEN_LONGNAME_EQUIVALENT,
        LongName_LessSlantEqual => return SYMBOL_TOKEN_LONGNAME_LESSSLANTEQUAL,
        LongName_GreaterSlantEqual => return SYMBOL_TOKEN_LONGNAME_GREATERSLANTEQUAL,
        LongName_NestedLessLess => return SYMBOL_TOKEN_LONGNAME_NESTEDLESSLESS,
        LongName_NestedGreaterGreater => return SYMBOL_TOKEN_LONGNAME_NESTEDGREATERGREATER,
        LongName_PrecedesEqual => return SYMBOL_TOKEN_LONGNAME_PRECEDESEQUAL,
        LongName_SucceedsEqual => return SYMBOL_TOKEN_LONGNAME_SUCCEEDSEQUAL,
        LongName_DoubleLeftTee => return SYMBOL_TOKEN_LONGNAME_DOUBLELEFTTEE,
        LongName_LeftDoubleBracket => return SYMBOL_TOKEN_LONGNAME_LEFTDOUBLEBRACKET,
        LongName_RightDoubleBracket => return SYMBOL_TOKEN_LONGNAME_RIGHTDOUBLEBRACKET,
        LongName_LeftAssociation => return SYMBOL_TOKEN_LONGNAME_LEFTASSOCIATION,
        LongName_RightAssociation => return SYMBOL_TOKEN_LONGNAME_RIGHTASSOCIATION,
        LongName_TwoWayRule => return SYMBOL_TOKEN_LONGNAME_TWOWAYRULE,
        LongName_Piecewise => return SYMBOL_TOKEN_LONGNAME_PIECEWISE,
        LongName_ImplicitPlus => return SYMBOL_TOKEN_LONGNAME_IMPLICITPLUS,
        LongName_AutoLeftMatch => return SYMBOL_TOKEN_LONGNAME_AUTOLEFTMATCH,
        LongName_AutoRightMatch => return SYMBOL_TOKEN_LONGNAME_AUTORIGHTMATCH,
        LongName_InvisiblePrefixScriptBase => return SYMBOL_TOKEN_LONGNAME_INVISIBLEPREFIXSCRIPTBASE,
        LongName_InvisiblePostfixScriptBase => return SYMBOL_TOKEN_LONGNAME_INVISIBLEPOSTFIXSCRIPTBASE,
        LongName_Transpose => return SYMBOL_TOKEN_LONGNAME_TRANSPOSE,
        LongName_Conjugate => return SYMBOL_TOKEN_LONGNAME_CONJUGATE,
        LongName_ConjugateTranspose => return SYMBOL_TOKEN_LONGNAME_CONJUGATETRANSPOSE,
        LongName_HermitianConjugate => return SYMBOL_TOKEN_LONGNAME_HERMITIANCONJUGATE,
        LongName_VerticalBar => return SYMBOL_TOKEN_LONGNAME_VERTICALBAR,
        LongName_NotVerticalBar => return SYMBOL_TOKEN_LONGNAME_NOTVERTICALBAR,
        LongName_Distributed => return SYMBOL_TOKEN_LONGNAME_DISTRIBUTED,
        LongName_Conditioned => return SYMBOL_TOKEN_LONGNAME_CONDITIONED,
        LongName_UndirectedEdge => return SYMBOL_TOKEN_LONGNAME_UNDIRECTEDEDGE,
        LongName_DirectedEdge => return SYMBOL_TOKEN_LONGNAME_DIRECTEDEDGE,
        LongName_ContinuedFractionK => return SYMBOL_TOKEN_LONGNAME_CONTINUEDFRACTIONK,
        LongName_TensorProduct => return SYMBOL_TOKEN_LONGNAME_TENSORPRODUCT,
        LongName_TensorWedge => return SYMBOL_TOKEN_LONGNAME_TENSORWEDGE,
        LongName_ProbabilityPr => return SYMBOL_TOKEN_LONGNAME_PROBABILITYPR,
        LongName_ExpectationE => return SYMBOL_TOKEN_LONGNAME_EXPECTATIONE,
        LongName_PermutationProduct => return SYMBOL_TOKEN_LONGNAME_PERMUTATIONPRODUCT,
        LongName_NotEqualTilde => return SYMBOL_TOKEN_LONGNAME_NOTEQUALTILDE,
        LongName_NotHumpEqual => return SYMBOL_TOKEN_LONGNAME_NOTHUMPEQUAL,
        LongName_NotHumpDownHump => return SYMBOL_TOKEN_LONGNAME_NOTHUMPDOWNHUMP,
        LongName_NotLeftTriangleBar => return SYMBOL_TOKEN_LONGNAME_NOTLEFTTRIANGLEBAR,
        LongName_NotRightTriangleBar => return SYMBOL_TOKEN_LONGNAME_NOTRIGHTTRIANGLEBAR,
        LongName_NotLessLess => return SYMBOL_TOKEN_LONGNAME_NOTLESSLESS,
        LongName_NotNestedLessLess => return SYMBOL_TOKEN_LONGNAME_NOTNESTEDLESSLESS,
        LongName_NotLessSlantEqual => return SYMBOL_TOKEN_LONGNAME_NOTLESSSLANTEQUAL,
        LongName_NotGreaterGreater => return SYMBOL_TOKEN_LONGNAME_NOTGREATERGREATER,
        LongName_NotNestedGreaterGreater => return SYMBOL_TOKEN_LONGNAME_NOTNESTEDGREATERGREATER,
        LongName_NotGreaterSlantEqual => return SYMBOL_TOKEN_LONGNAME_NOTGREATERSLANTEQUAL,
        LongName_NotPrecedesEqual => return SYMBOL_TOKEN_LONGNAME_NOTPRECEDESEQUAL,
        LongName_NotSucceedsEqual => return SYMBOL_TOKEN_LONGNAME_NOTSUCCEEDSEQUAL,
        LongName_NotSquareSubset => return SYMBOL_TOKEN_LONGNAME_NOTSQUARESUBSET,
        LongName_NotSquareSuperset => return SYMBOL_TOKEN_LONGNAME_NOTSQUARESUPERSET,
        LongName_Equal => return SYMBOL_TOKEN_LONGNAME_EQUAL,
        LongName_VerticalSeparator => return SYMBOL_TOKEN_LONGNAME_VERTICALSEPARATOR,
        LongName_VectorGreater => return SYMBOL_TOKEN_LONGNAME_VECTORGREATER,
        LongName_VectorGreaterEqual => return SYMBOL_TOKEN_LONGNAME_VECTORGREATEREQUAL,
        LongName_VectorLess => return SYMBOL_TOKEN_LONGNAME_VECTORLESS,
        LongName_VectorLessEqual => return SYMBOL_TOKEN_LONGNAME_VECTORLESSEQUAL,
        LongName_Limit => return SYMBOL_TOKEN_LONGNAME_LIMIT,
        LongName_MaxLimit => return SYMBOL_TOKEN_LONGNAME_MAXLIMIT,
        LongName_MinLimit => return SYMBOL_TOKEN_LONGNAME_MINLIMIT,
        LongName_Cross => return SYMBOL_TOKEN_LONGNAME_CROSS,
        LongName_Function => return SYMBOL_TOKEN_LONGNAME_FUNCTION,
        LongName_Xnor => return SYMBOL_TOKEN_LONGNAME_XNOR,
        LongName_DiscreteShift => return SYMBOL_TOKEN_LONGNAME_DISCRETESHIFT,
        LongName_DifferenceDelta => return SYMBOL_TOKEN_LONGNAME_DIFFERENCEDELTA,
        LongName_DiscreteRatio => return SYMBOL_TOKEN_LONGNAME_DISCRETERATIO,
        LongName_RuleDelayed => return SYMBOL_TOKEN_LONGNAME_RULEDELAYED,
        LongName_Square => return SYMBOL_TOKEN_LONGNAME_SQUARE,
        LongName_Rule => return SYMBOL_TOKEN_LONGNAME_RULE,
        LongName_Implies => return SYMBOL_TOKEN_LONGNAME_IMPLIES,
        LongName_ShortRightArrow => return SYMBOL_TOKEN_LONGNAME_SHORTRIGHTARROW,
        LongName_ShortLeftArrow => return SYMBOL_TOKEN_LONGNAME_SHORTLEFTARROW,
        LongName_ShortUpArrow => return SYMBOL_TOKEN_LONGNAME_SHORTUPARROW,
        LongName_ShortDownArrow => return SYMBOL_TOKEN_LONGNAME_SHORTDOWNARROW,
        LongName_Application => return SYMBOL_TOKEN_LONGNAME_APPLICATION,
        LongName_LeftBracketingBar => return SYMBOL_TOKEN_LONGNAME_LEFTBRACKETINGBAR,
        LongName_RightBracketingBar => return SYMBOL_TOKEN_LONGNAME_RIGHTBRACKETINGBAR,
        LongName_LeftDoubleBracketingBar => return SYMBOL_TOKEN_LONGNAME_LEFTDOUBLEBRACKETINGBAR,
        LongName_RightDoubleBracketingBar => return SYMBOL_TOKEN_LONGNAME_RIGHTDOUBLEBRACKETINGBAR,
        LongName_CapitalDifferentialD => return SYMBOL_TOKEN_LONGNAME_CAPITALDIFFERENTIALD,
        LongName_DifferentialD => return SYMBOL_TOKEN_LONGNAME_DIFFERENTIALD,
        LongName_InvisibleComma => return SYMBOL_TOKEN_LONGNAME_INVISIBLECOMMA,
        LongName_InvisibleApplication => return SYMBOL_TOKEN_LONGNAME_INVISIBLEAPPLICATION,
        LongName_LongEqual => return SYMBOL_TOKEN_LONGNAME_LONGEQUAL,
        Count => return SYMBOL_TOKEN_COUNT,
        _ => panic!("Unhandled token type"),
    }
}
